/**
 * Client
 **/

import * as runtime from "./runtime/library.js";
import $Types = runtime.Types; // general types
import $Public = runtime.Types.Public;
import $Utils = runtime.Types.Utils;
import $Extensions = runtime.Types.Extensions;
import $Result = runtime.Types.Result;

export type PrismaPromise<T> = $Public.PrismaPromise<T>;

/**
 * Model User
 *
 */
export type User = $Result.DefaultSelection<Prisma.$UserPayload>;
/**
 * Model Room
 *
 */
export type Room = $Result.DefaultSelection<Prisma.$RoomPayload>;
/**
 * Model ChatMessage
 *
 */
export type ChatMessage = $Result.DefaultSelection<Prisma.$ChatMessagePayload>;
/**
 * Model Workspace
 *
 */
export type Workspace = $Result.DefaultSelection<Prisma.$WorkspacePayload>;
/**
 * Model WorkspaceMember
 *
 */
export type WorkspaceMember =
  $Result.DefaultSelection<Prisma.$WorkspaceMemberPayload>;
/**
 * Model Project
 *
 */
export type Project = $Result.DefaultSelection<Prisma.$ProjectPayload>;
/**
 * Model Task
 *
 */
export type Task = $Result.DefaultSelection<Prisma.$TaskPayload>;
/**
 * Model TaskTag
 *
 */
export type TaskTag = $Result.DefaultSelection<Prisma.$TaskTagPayload>;
/**
 * Model Sprint
 *
 */
export type Sprint = $Result.DefaultSelection<Prisma.$SprintPayload>;
/**
 * Model Milestone
 *
 */
export type Milestone = $Result.DefaultSelection<Prisma.$MilestonePayload>;
/**
 * Model MilestoneDependency
 *
 */
export type MilestoneDependency =
  $Result.DefaultSelection<Prisma.$MilestoneDependencyPayload>;
/**
 * Model Activity
 *
 */
export type Activity = $Result.DefaultSelection<Prisma.$ActivityPayload>;
/**
 * Model Notification
 *
 */
export type Notification =
  $Result.DefaultSelection<Prisma.$NotificationPayload>;

/**
 * Enums
 */
export namespace $Enums {
  export const UserRole: {
    ADMIN: "ADMIN";
    MANAGER: "MANAGER";
    MEMBER: "MEMBER";
    GUEST: "GUEST";
  };

  export type UserRole = (typeof UserRole)[keyof typeof UserRole];

  export const ProjectStatus: {
    PLANNING: "PLANNING";
    ACTIVE: "ACTIVE";
    COMPLETED: "COMPLETED";
    ARCHIVED: "ARCHIVED";
  };

  export type ProjectStatus =
    (typeof ProjectStatus)[keyof typeof ProjectStatus];

  export const TaskType: {
    TASK: "TASK";
    BUG: "BUG";
    STORY: "STORY";
    EPIC: "EPIC";
  };

  export type TaskType = (typeof TaskType)[keyof typeof TaskType];

  export const TaskStatus: {
    TODO: "TODO";
    IN_PROGRESS: "IN_PROGRESS";
    DONE: "DONE";
    ARCHIVED: "ARCHIVED";
  };

  export type TaskStatus = (typeof TaskStatus)[keyof typeof TaskStatus];

  export const Priority: {
    HIGH: "HIGH";
    MEDIUM: "MEDIUM";
    LOW: "LOW";
  };

  export type Priority = (typeof Priority)[keyof typeof Priority];

  export const SprintStatus: {
    PLANNING: "PLANNING";
    ACTIVE: "ACTIVE";
    COMPLETED: "COMPLETED";
    CANCELLED: "CANCELLED";
  };

  export type SprintStatus = (typeof SprintStatus)[keyof typeof SprintStatus];

  export const MilestoneStatus: {
    COMPLETED: "COMPLETED";
    IN_PROGRESS: "IN_PROGRESS";
    UPCOMING: "UPCOMING";
    AT_RISK: "AT_RISK";
    BLOCKED: "BLOCKED";
  };

  export type MilestoneStatus =
    (typeof MilestoneStatus)[keyof typeof MilestoneStatus];

  export const ViewType: {
    TABLE: "TABLE";
    GALLERY: "GALLERY";
    LIST: "LIST";
    CALENDAR: "CALENDAR";
    KANBAN: "KANBAN";
    TIMELINE: "TIMELINE";
  };

  export type ViewType = (typeof ViewType)[keyof typeof ViewType];

  export const ActivityType: {
    CREATED: "CREATED";
    UPDATED: "UPDATED";
    DELETED: "DELETED";
    COMMENTED: "COMMENTED";
    ASSIGNED: "ASSIGNED";
    STATUS_CHANGED: "STATUS_CHANGED";
    COMPLETED: "COMPLETED";
  };

  export type ActivityType = (typeof ActivityType)[keyof typeof ActivityType];
}

export type UserRole = $Enums.UserRole;

export const UserRole: typeof $Enums.UserRole;

export type ProjectStatus = $Enums.ProjectStatus;

export const ProjectStatus: typeof $Enums.ProjectStatus;

export type TaskType = $Enums.TaskType;

export const TaskType: typeof $Enums.TaskType;

export type TaskStatus = $Enums.TaskStatus;

export const TaskStatus: typeof $Enums.TaskStatus;

export type Priority = $Enums.Priority;

export const Priority: typeof $Enums.Priority;

export type SprintStatus = $Enums.SprintStatus;

export const SprintStatus: typeof $Enums.SprintStatus;

export type MilestoneStatus = $Enums.MilestoneStatus;

export const MilestoneStatus: typeof $Enums.MilestoneStatus;

export type ViewType = $Enums.ViewType;

export const ViewType: typeof $Enums.ViewType;

export type ActivityType = $Enums.ActivityType;

export const ActivityType: typeof $Enums.ActivityType;

/**
 * ##  Prisma Client ʲˢ
 *
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Users
 * const users = await prisma.user.findMany()
 * ```
 *
 *
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = "log" extends keyof ClientOptions
    ? ClientOptions["log"] extends Array<Prisma.LogLevel | Prisma.LogDefinition>
      ? Prisma.GetEvents<ClientOptions["log"]>
      : never
    : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>["other"] };

  /**
   * ##  Prisma Client ʲˢ
   *
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Users
   * const users = await prisma.user.findMany()
   * ```
   *
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(
    optionsArg?: Prisma.Subset<ClientOptions, Prisma.PrismaClientOptions>,
  );
  $on<V extends U>(
    eventType: V,
    callback: (
      event: V extends "query" ? Prisma.QueryEvent : Prisma.LogEvent,
    ) => void,
  ): PrismaClient;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void;

  /**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(
    query: TemplateStringsArray | Prisma.Sql,
    ...values: any[]
  ): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(
    query: string,
    ...values: any[]
  ): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(
    query: TemplateStringsArray | Prisma.Sql,
    ...values: any[]
  ): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(
    query: string,
    ...values: any[]
  ): Prisma.PrismaPromise<T>;

  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(
    arg: [...P],
    options?: { isolationLevel?: Prisma.TransactionIsolationLevel },
  ): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>;

  $transaction<R>(
    fn: (
      prisma: Omit<PrismaClient, runtime.ITXClientDenyList>,
    ) => $Utils.JsPromise<R>,
    options?: {
      maxWait?: number;
      timeout?: number;
      isolationLevel?: Prisma.TransactionIsolationLevel;
    },
  ): $Utils.JsPromise<R>;

  $extends: $Extensions.ExtendsHook<
    "extends",
    Prisma.TypeMapCb<ClientOptions>,
    ExtArgs,
    $Utils.Call<
      Prisma.TypeMapCb<ClientOptions>,
      {
        extArgs: ExtArgs;
      }
    >
  >;

  /**
   * `prisma.user`: Exposes CRUD operations for the **User** model.
   * Example usage:
   * ```ts
   * // Fetch zero or more Users
   * const users = await prisma.user.findMany()
   * ```
   */
  get user(): Prisma.UserDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.room`: Exposes CRUD operations for the **Room** model.
   * Example usage:
   * ```ts
   * // Fetch zero or more Rooms
   * const rooms = await prisma.room.findMany()
   * ```
   */
  get room(): Prisma.RoomDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.chatMessage`: Exposes CRUD operations for the **ChatMessage** model.
   * Example usage:
   * ```ts
   * // Fetch zero or more ChatMessages
   * const chatMessages = await prisma.chatMessage.findMany()
   * ```
   */
  get chatMessage(): Prisma.ChatMessageDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.workspace`: Exposes CRUD operations for the **Workspace** model.
   * Example usage:
   * ```ts
   * // Fetch zero or more Workspaces
   * const workspaces = await prisma.workspace.findMany()
   * ```
   */
  get workspace(): Prisma.WorkspaceDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.workspaceMember`: Exposes CRUD operations for the **WorkspaceMember** model.
   * Example usage:
   * ```ts
   * // Fetch zero or more WorkspaceMembers
   * const workspaceMembers = await prisma.workspaceMember.findMany()
   * ```
   */
  get workspaceMember(): Prisma.WorkspaceMemberDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.project`: Exposes CRUD operations for the **Project** model.
   * Example usage:
   * ```ts
   * // Fetch zero or more Projects
   * const projects = await prisma.project.findMany()
   * ```
   */
  get project(): Prisma.ProjectDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.task`: Exposes CRUD operations for the **Task** model.
   * Example usage:
   * ```ts
   * // Fetch zero or more Tasks
   * const tasks = await prisma.task.findMany()
   * ```
   */
  get task(): Prisma.TaskDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.taskTag`: Exposes CRUD operations for the **TaskTag** model.
   * Example usage:
   * ```ts
   * // Fetch zero or more TaskTags
   * const taskTags = await prisma.taskTag.findMany()
   * ```
   */
  get taskTag(): Prisma.TaskTagDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.sprint`: Exposes CRUD operations for the **Sprint** model.
   * Example usage:
   * ```ts
   * // Fetch zero or more Sprints
   * const sprints = await prisma.sprint.findMany()
   * ```
   */
  get sprint(): Prisma.SprintDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.milestone`: Exposes CRUD operations for the **Milestone** model.
   * Example usage:
   * ```ts
   * // Fetch zero or more Milestones
   * const milestones = await prisma.milestone.findMany()
   * ```
   */
  get milestone(): Prisma.MilestoneDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.milestoneDependency`: Exposes CRUD operations for the **MilestoneDependency** model.
   * Example usage:
   * ```ts
   * // Fetch zero or more MilestoneDependencies
   * const milestoneDependencies = await prisma.milestoneDependency.findMany()
   * ```
   */
  get milestoneDependency(): Prisma.MilestoneDependencyDelegate<
    ExtArgs,
    ClientOptions
  >;

  /**
   * `prisma.activity`: Exposes CRUD operations for the **Activity** model.
   * Example usage:
   * ```ts
   * // Fetch zero or more Activities
   * const activities = await prisma.activity.findMany()
   * ```
   */
  get activity(): Prisma.ActivityDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.notification`: Exposes CRUD operations for the **Notification** model.
   * Example usage:
   * ```ts
   * // Fetch zero or more Notifications
   * const notifications = await prisma.notification.findMany()
   * ```
   */
  get notification(): Prisma.NotificationDelegate<ExtArgs, ClientOptions>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF;

  export type PrismaPromise<T> = $Public.PrismaPromise<T>;

  /**
   * Validator
   */
  export import validator = runtime.Public.validator;

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError;
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError;
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError;
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError;
  export import PrismaClientValidationError = runtime.PrismaClientValidationError;

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag;
  export import empty = runtime.empty;
  export import join = runtime.join;
  export import raw = runtime.raw;
  export import Sql = runtime.Sql;

  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal;

  export type DecimalJsLike = runtime.DecimalJsLike;

  /**
   * Metrics
   */
  export type Metrics = runtime.Metrics;
  export type Metric<T> = runtime.Metric<T>;
  export type MetricHistogram = runtime.MetricHistogram;
  export type MetricHistogramBucket = runtime.MetricHistogramBucket;

  /**
   * Extensions
   */
  export import Extension = $Extensions.UserArgs;
  export import getExtensionContext = runtime.Extensions.getExtensionContext;
  export import Args = $Public.Args;
  export import Payload = $Public.Payload;
  export import Result = $Public.Result;
  export import Exact = $Public.Exact;

  /**
   * Prisma Client JS version: 6.5.0
   * Query Engine version: 173f8d54f8d52e692c7e27e72a88314ec7aeff60
   */
  export type PrismaVersion = {
    client: string;
  };

  export const prismaVersion: PrismaVersion;

  /**
   * Utility Types
   */

  export import JsonObject = runtime.JsonObject;
  export import JsonArray = runtime.JsonArray;
  export import JsonValue = runtime.JsonValue;
  export import InputJsonObject = runtime.InputJsonObject;
  export import InputJsonArray = runtime.InputJsonArray;
  export import InputJsonValue = runtime.InputJsonValue;

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
     * Type of `Prisma.DbNull`.
     *
     * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
     *
     * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
     */
    class DbNull {
      private DbNull: never;
      private constructor();
    }

    /**
     * Type of `Prisma.JsonNull`.
     *
     * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
     *
     * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
     */
    class JsonNull {
      private JsonNull: never;
      private constructor();
    }

    /**
     * Type of `Prisma.AnyNull`.
     *
     * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
     *
     * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
     */
    class AnyNull {
      private AnyNull: never;
      private constructor();
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull;

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull;

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull;

  type SelectAndInclude = {
    select: any;
    include: any;
  };

  type SelectAndOmit = {
    select: any;
    omit: any;
  };

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> =
    T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<
    T extends (...args: any) => $Utils.JsPromise<any>,
  > = PromiseType<ReturnType<T>>;

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
    [P in K]: T[P];
  };

  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K;
  }[keyof T];

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K;
  };

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>;

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  } & (T extends SelectAndInclude
    ? "Please either choose `select` or `include`."
    : T extends SelectAndOmit
      ? "Please either choose `select` or `omit`."
      : {});

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  } & K;

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> = T extends object
    ? U extends object
      ? (Without<T, U> & U) | (Without<U, T> & T)
      : U
    : T;

  /**
   * Is T a Record?
   */
  type IsObject<T extends any> =
    T extends Array<any>
      ? False
      : T extends Date
        ? False
        : T extends Uint8Array
          ? False
          : T extends BigInt
            ? False
            : T extends object
              ? True
              : False;

  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T;

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O>; // With K possibilities
    }[K];

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>;

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<
    __Either<O, K>
  >;

  type _Either<O extends object, K extends Key, strict extends Boolean> = {
    1: EitherStrict<O, K>;
    0: EitherLoose<O, K>;
  }[strict];

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1,
  > = O extends unknown ? _Either<O, K, strict> : never;

  export type Union = any;

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K];
  } & {};

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never;

  export type Overwrite<O extends object, O1 extends object> = {
    [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<
    Overwrite<
      U,
      {
        [K in keyof U]-?: At<U, K>;
      }
    >
  >;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O
    ? O[K]
    : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown
    ? AtStrict<O, K>
    : never;
  export type At<
    O extends object,
    K extends Key,
    strict extends Boolean = 1,
  > = {
    1: AtStrict<O, K>;
    0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function
    ? A
    : {
        [K in keyof A]: A[K];
      } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
      ?
          | (K extends keyof O ? { [P in K]: O[P] } & O : O)
          | ({ [P in keyof O as P extends K ? P : never]-?: O[P] } & O)
      : never
  >;

  type _Strict<U, _U = U> = U extends unknown
    ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>>
    : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False;

  // /**
  // 1
  // */
  export type True = 1;

  /**
  0
  */
  export type False = 0;

  export type Not<B extends Boolean> = {
    0: 1;
    1: 0;
  }[B];

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
      ? 1
      : 0;

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >;

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0;
      1: 1;
    };
    1: {
      0: 1;
      1: 1;
    };
  }[B1][B2];

  export type Keys<U extends Union> = U extends unknown ? keyof U : never;

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;

  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object
    ? {
        [P in keyof T]: P extends keyof O ? O[P] : never;
      }
    : never;

  type FieldPaths<
    T,
    U = Omit<T, "_avg" | "_sum" | "_count" | "_min" | "_max">,
  > = IsObject<T> extends True ? U : T;

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<"OR", K>, Extends<"AND", K>>,
      Extends<"NOT", K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<
            UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never
          >
        : never
      : {} extends FieldPaths<T[K]>
        ? never
        : K;
  }[keyof T];

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never;
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>;
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T;

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<
    T,
    K extends Enumerable<keyof T> | keyof T,
  > = Prisma__Pick<T, MaybeTupleToUnion<K>>;

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}`
    ? never
    : T;

  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>;

  type FieldRefInputType<Model, FieldType> = Model extends never
    ? never
    : FieldRef<Model, FieldType>;

  export const ModelName: {
    User: "User";
    Room: "Room";
    ChatMessage: "ChatMessage";
    Workspace: "Workspace";
    WorkspaceMember: "WorkspaceMember";
    Project: "Project";
    Task: "Task";
    TaskTag: "TaskTag";
    Sprint: "Sprint";
    Milestone: "Milestone";
    MilestoneDependency: "MilestoneDependency";
    Activity: "Activity";
    Notification: "Notification";
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName];

  export type Datasources = {
    db?: Datasource;
  };

  interface TypeMapCb<ClientOptions = {}>
    extends $Utils.Fn<
      { extArgs: $Extensions.InternalArgs },
      $Utils.Record<string, any>
    > {
    returns: Prisma.TypeMap<
      this["params"]["extArgs"],
      ClientOptions extends { omit: infer OmitOptions } ? OmitOptions : {}
    >;
  }

  export type TypeMap<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
    GlobalOmitOptions = {},
  > = {
    globalOmitOptions: {
      omit: GlobalOmitOptions;
    };
    meta: {
      modelProps:
        | "user"
        | "room"
        | "chatMessage"
        | "workspace"
        | "workspaceMember"
        | "project"
        | "task"
        | "taskTag"
        | "sprint"
        | "milestone"
        | "milestoneDependency"
        | "activity"
        | "notification";
      txIsolationLevel: Prisma.TransactionIsolationLevel;
    };
    model: {
      User: {
        payload: Prisma.$UserPayload<ExtArgs>;
        fields: Prisma.UserFieldRefs;
        operations: {
          findUnique: {
            args: Prisma.UserFindUniqueArgs<ExtArgs>;
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null;
          };
          findUniqueOrThrow: {
            args: Prisma.UserFindUniqueOrThrowArgs<ExtArgs>;
            result: $Utils.PayloadToResult<Prisma.$UserPayload>;
          };
          findFirst: {
            args: Prisma.UserFindFirstArgs<ExtArgs>;
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null;
          };
          findFirstOrThrow: {
            args: Prisma.UserFindFirstOrThrowArgs<ExtArgs>;
            result: $Utils.PayloadToResult<Prisma.$UserPayload>;
          };
          findMany: {
            args: Prisma.UserFindManyArgs<ExtArgs>;
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[];
          };
          create: {
            args: Prisma.UserCreateArgs<ExtArgs>;
            result: $Utils.PayloadToResult<Prisma.$UserPayload>;
          };
          createMany: {
            args: Prisma.UserCreateManyArgs<ExtArgs>;
            result: BatchPayload;
          };
          createManyAndReturn: {
            args: Prisma.UserCreateManyAndReturnArgs<ExtArgs>;
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[];
          };
          delete: {
            args: Prisma.UserDeleteArgs<ExtArgs>;
            result: $Utils.PayloadToResult<Prisma.$UserPayload>;
          };
          update: {
            args: Prisma.UserUpdateArgs<ExtArgs>;
            result: $Utils.PayloadToResult<Prisma.$UserPayload>;
          };
          deleteMany: {
            args: Prisma.UserDeleteManyArgs<ExtArgs>;
            result: BatchPayload;
          };
          updateMany: {
            args: Prisma.UserUpdateManyArgs<ExtArgs>;
            result: BatchPayload;
          };
          updateManyAndReturn: {
            args: Prisma.UserUpdateManyAndReturnArgs<ExtArgs>;
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[];
          };
          upsert: {
            args: Prisma.UserUpsertArgs<ExtArgs>;
            result: $Utils.PayloadToResult<Prisma.$UserPayload>;
          };
          aggregate: {
            args: Prisma.UserAggregateArgs<ExtArgs>;
            result: $Utils.Optional<AggregateUser>;
          };
          groupBy: {
            args: Prisma.UserGroupByArgs<ExtArgs>;
            result: $Utils.Optional<UserGroupByOutputType>[];
          };
          count: {
            args: Prisma.UserCountArgs<ExtArgs>;
            result: $Utils.Optional<UserCountAggregateOutputType> | number;
          };
        };
      };
      Room: {
        payload: Prisma.$RoomPayload<ExtArgs>;
        fields: Prisma.RoomFieldRefs;
        operations: {
          findUnique: {
            args: Prisma.RoomFindUniqueArgs<ExtArgs>;
            result: $Utils.PayloadToResult<Prisma.$RoomPayload> | null;
          };
          findUniqueOrThrow: {
            args: Prisma.RoomFindUniqueOrThrowArgs<ExtArgs>;
            result: $Utils.PayloadToResult<Prisma.$RoomPayload>;
          };
          findFirst: {
            args: Prisma.RoomFindFirstArgs<ExtArgs>;
            result: $Utils.PayloadToResult<Prisma.$RoomPayload> | null;
          };
          findFirstOrThrow: {
            args: Prisma.RoomFindFirstOrThrowArgs<ExtArgs>;
            result: $Utils.PayloadToResult<Prisma.$RoomPayload>;
          };
          findMany: {
            args: Prisma.RoomFindManyArgs<ExtArgs>;
            result: $Utils.PayloadToResult<Prisma.$RoomPayload>[];
          };
          create: {
            args: Prisma.RoomCreateArgs<ExtArgs>;
            result: $Utils.PayloadToResult<Prisma.$RoomPayload>;
          };
          createMany: {
            args: Prisma.RoomCreateManyArgs<ExtArgs>;
            result: BatchPayload;
          };
          createManyAndReturn: {
            args: Prisma.RoomCreateManyAndReturnArgs<ExtArgs>;
            result: $Utils.PayloadToResult<Prisma.$RoomPayload>[];
          };
          delete: {
            args: Prisma.RoomDeleteArgs<ExtArgs>;
            result: $Utils.PayloadToResult<Prisma.$RoomPayload>;
          };
          update: {
            args: Prisma.RoomUpdateArgs<ExtArgs>;
            result: $Utils.PayloadToResult<Prisma.$RoomPayload>;
          };
          deleteMany: {
            args: Prisma.RoomDeleteManyArgs<ExtArgs>;
            result: BatchPayload;
          };
          updateMany: {
            args: Prisma.RoomUpdateManyArgs<ExtArgs>;
            result: BatchPayload;
          };
          updateManyAndReturn: {
            args: Prisma.RoomUpdateManyAndReturnArgs<ExtArgs>;
            result: $Utils.PayloadToResult<Prisma.$RoomPayload>[];
          };
          upsert: {
            args: Prisma.RoomUpsertArgs<ExtArgs>;
            result: $Utils.PayloadToResult<Prisma.$RoomPayload>;
          };
          aggregate: {
            args: Prisma.RoomAggregateArgs<ExtArgs>;
            result: $Utils.Optional<AggregateRoom>;
          };
          groupBy: {
            args: Prisma.RoomGroupByArgs<ExtArgs>;
            result: $Utils.Optional<RoomGroupByOutputType>[];
          };
          count: {
            args: Prisma.RoomCountArgs<ExtArgs>;
            result: $Utils.Optional<RoomCountAggregateOutputType> | number;
          };
        };
      };
      ChatMessage: {
        payload: Prisma.$ChatMessagePayload<ExtArgs>;
        fields: Prisma.ChatMessageFieldRefs;
        operations: {
          findUnique: {
            args: Prisma.ChatMessageFindUniqueArgs<ExtArgs>;
            result: $Utils.PayloadToResult<Prisma.$ChatMessagePayload> | null;
          };
          findUniqueOrThrow: {
            args: Prisma.ChatMessageFindUniqueOrThrowArgs<ExtArgs>;
            result: $Utils.PayloadToResult<Prisma.$ChatMessagePayload>;
          };
          findFirst: {
            args: Prisma.ChatMessageFindFirstArgs<ExtArgs>;
            result: $Utils.PayloadToResult<Prisma.$ChatMessagePayload> | null;
          };
          findFirstOrThrow: {
            args: Prisma.ChatMessageFindFirstOrThrowArgs<ExtArgs>;
            result: $Utils.PayloadToResult<Prisma.$ChatMessagePayload>;
          };
          findMany: {
            args: Prisma.ChatMessageFindManyArgs<ExtArgs>;
            result: $Utils.PayloadToResult<Prisma.$ChatMessagePayload>[];
          };
          create: {
            args: Prisma.ChatMessageCreateArgs<ExtArgs>;
            result: $Utils.PayloadToResult<Prisma.$ChatMessagePayload>;
          };
          createMany: {
            args: Prisma.ChatMessageCreateManyArgs<ExtArgs>;
            result: BatchPayload;
          };
          createManyAndReturn: {
            args: Prisma.ChatMessageCreateManyAndReturnArgs<ExtArgs>;
            result: $Utils.PayloadToResult<Prisma.$ChatMessagePayload>[];
          };
          delete: {
            args: Prisma.ChatMessageDeleteArgs<ExtArgs>;
            result: $Utils.PayloadToResult<Prisma.$ChatMessagePayload>;
          };
          update: {
            args: Prisma.ChatMessageUpdateArgs<ExtArgs>;
            result: $Utils.PayloadToResult<Prisma.$ChatMessagePayload>;
          };
          deleteMany: {
            args: Prisma.ChatMessageDeleteManyArgs<ExtArgs>;
            result: BatchPayload;
          };
          updateMany: {
            args: Prisma.ChatMessageUpdateManyArgs<ExtArgs>;
            result: BatchPayload;
          };
          updateManyAndReturn: {
            args: Prisma.ChatMessageUpdateManyAndReturnArgs<ExtArgs>;
            result: $Utils.PayloadToResult<Prisma.$ChatMessagePayload>[];
          };
          upsert: {
            args: Prisma.ChatMessageUpsertArgs<ExtArgs>;
            result: $Utils.PayloadToResult<Prisma.$ChatMessagePayload>;
          };
          aggregate: {
            args: Prisma.ChatMessageAggregateArgs<ExtArgs>;
            result: $Utils.Optional<AggregateChatMessage>;
          };
          groupBy: {
            args: Prisma.ChatMessageGroupByArgs<ExtArgs>;
            result: $Utils.Optional<ChatMessageGroupByOutputType>[];
          };
          count: {
            args: Prisma.ChatMessageCountArgs<ExtArgs>;
            result:
              | $Utils.Optional<ChatMessageCountAggregateOutputType>
              | number;
          };
        };
      };
      Workspace: {
        payload: Prisma.$WorkspacePayload<ExtArgs>;
        fields: Prisma.WorkspaceFieldRefs;
        operations: {
          findUnique: {
            args: Prisma.WorkspaceFindUniqueArgs<ExtArgs>;
            result: $Utils.PayloadToResult<Prisma.$WorkspacePayload> | null;
          };
          findUniqueOrThrow: {
            args: Prisma.WorkspaceFindUniqueOrThrowArgs<ExtArgs>;
            result: $Utils.PayloadToResult<Prisma.$WorkspacePayload>;
          };
          findFirst: {
            args: Prisma.WorkspaceFindFirstArgs<ExtArgs>;
            result: $Utils.PayloadToResult<Prisma.$WorkspacePayload> | null;
          };
          findFirstOrThrow: {
            args: Prisma.WorkspaceFindFirstOrThrowArgs<ExtArgs>;
            result: $Utils.PayloadToResult<Prisma.$WorkspacePayload>;
          };
          findMany: {
            args: Prisma.WorkspaceFindManyArgs<ExtArgs>;
            result: $Utils.PayloadToResult<Prisma.$WorkspacePayload>[];
          };
          create: {
            args: Prisma.WorkspaceCreateArgs<ExtArgs>;
            result: $Utils.PayloadToResult<Prisma.$WorkspacePayload>;
          };
          createMany: {
            args: Prisma.WorkspaceCreateManyArgs<ExtArgs>;
            result: BatchPayload;
          };
          createManyAndReturn: {
            args: Prisma.WorkspaceCreateManyAndReturnArgs<ExtArgs>;
            result: $Utils.PayloadToResult<Prisma.$WorkspacePayload>[];
          };
          delete: {
            args: Prisma.WorkspaceDeleteArgs<ExtArgs>;
            result: $Utils.PayloadToResult<Prisma.$WorkspacePayload>;
          };
          update: {
            args: Prisma.WorkspaceUpdateArgs<ExtArgs>;
            result: $Utils.PayloadToResult<Prisma.$WorkspacePayload>;
          };
          deleteMany: {
            args: Prisma.WorkspaceDeleteManyArgs<ExtArgs>;
            result: BatchPayload;
          };
          updateMany: {
            args: Prisma.WorkspaceUpdateManyArgs<ExtArgs>;
            result: BatchPayload;
          };
          updateManyAndReturn: {
            args: Prisma.WorkspaceUpdateManyAndReturnArgs<ExtArgs>;
            result: $Utils.PayloadToResult<Prisma.$WorkspacePayload>[];
          };
          upsert: {
            args: Prisma.WorkspaceUpsertArgs<ExtArgs>;
            result: $Utils.PayloadToResult<Prisma.$WorkspacePayload>;
          };
          aggregate: {
            args: Prisma.WorkspaceAggregateArgs<ExtArgs>;
            result: $Utils.Optional<AggregateWorkspace>;
          };
          groupBy: {
            args: Prisma.WorkspaceGroupByArgs<ExtArgs>;
            result: $Utils.Optional<WorkspaceGroupByOutputType>[];
          };
          count: {
            args: Prisma.WorkspaceCountArgs<ExtArgs>;
            result: $Utils.Optional<WorkspaceCountAggregateOutputType> | number;
          };
        };
      };
      WorkspaceMember: {
        payload: Prisma.$WorkspaceMemberPayload<ExtArgs>;
        fields: Prisma.WorkspaceMemberFieldRefs;
        operations: {
          findUnique: {
            args: Prisma.WorkspaceMemberFindUniqueArgs<ExtArgs>;
            result: $Utils.PayloadToResult<Prisma.$WorkspaceMemberPayload> | null;
          };
          findUniqueOrThrow: {
            args: Prisma.WorkspaceMemberFindUniqueOrThrowArgs<ExtArgs>;
            result: $Utils.PayloadToResult<Prisma.$WorkspaceMemberPayload>;
          };
          findFirst: {
            args: Prisma.WorkspaceMemberFindFirstArgs<ExtArgs>;
            result: $Utils.PayloadToResult<Prisma.$WorkspaceMemberPayload> | null;
          };
          findFirstOrThrow: {
            args: Prisma.WorkspaceMemberFindFirstOrThrowArgs<ExtArgs>;
            result: $Utils.PayloadToResult<Prisma.$WorkspaceMemberPayload>;
          };
          findMany: {
            args: Prisma.WorkspaceMemberFindManyArgs<ExtArgs>;
            result: $Utils.PayloadToResult<Prisma.$WorkspaceMemberPayload>[];
          };
          create: {
            args: Prisma.WorkspaceMemberCreateArgs<ExtArgs>;
            result: $Utils.PayloadToResult<Prisma.$WorkspaceMemberPayload>;
          };
          createMany: {
            args: Prisma.WorkspaceMemberCreateManyArgs<ExtArgs>;
            result: BatchPayload;
          };
          createManyAndReturn: {
            args: Prisma.WorkspaceMemberCreateManyAndReturnArgs<ExtArgs>;
            result: $Utils.PayloadToResult<Prisma.$WorkspaceMemberPayload>[];
          };
          delete: {
            args: Prisma.WorkspaceMemberDeleteArgs<ExtArgs>;
            result: $Utils.PayloadToResult<Prisma.$WorkspaceMemberPayload>;
          };
          update: {
            args: Prisma.WorkspaceMemberUpdateArgs<ExtArgs>;
            result: $Utils.PayloadToResult<Prisma.$WorkspaceMemberPayload>;
          };
          deleteMany: {
            args: Prisma.WorkspaceMemberDeleteManyArgs<ExtArgs>;
            result: BatchPayload;
          };
          updateMany: {
            args: Prisma.WorkspaceMemberUpdateManyArgs<ExtArgs>;
            result: BatchPayload;
          };
          updateManyAndReturn: {
            args: Prisma.WorkspaceMemberUpdateManyAndReturnArgs<ExtArgs>;
            result: $Utils.PayloadToResult<Prisma.$WorkspaceMemberPayload>[];
          };
          upsert: {
            args: Prisma.WorkspaceMemberUpsertArgs<ExtArgs>;
            result: $Utils.PayloadToResult<Prisma.$WorkspaceMemberPayload>;
          };
          aggregate: {
            args: Prisma.WorkspaceMemberAggregateArgs<ExtArgs>;
            result: $Utils.Optional<AggregateWorkspaceMember>;
          };
          groupBy: {
            args: Prisma.WorkspaceMemberGroupByArgs<ExtArgs>;
            result: $Utils.Optional<WorkspaceMemberGroupByOutputType>[];
          };
          count: {
            args: Prisma.WorkspaceMemberCountArgs<ExtArgs>;
            result:
              | $Utils.Optional<WorkspaceMemberCountAggregateOutputType>
              | number;
          };
        };
      };
      Project: {
        payload: Prisma.$ProjectPayload<ExtArgs>;
        fields: Prisma.ProjectFieldRefs;
        operations: {
          findUnique: {
            args: Prisma.ProjectFindUniqueArgs<ExtArgs>;
            result: $Utils.PayloadToResult<Prisma.$ProjectPayload> | null;
          };
          findUniqueOrThrow: {
            args: Prisma.ProjectFindUniqueOrThrowArgs<ExtArgs>;
            result: $Utils.PayloadToResult<Prisma.$ProjectPayload>;
          };
          findFirst: {
            args: Prisma.ProjectFindFirstArgs<ExtArgs>;
            result: $Utils.PayloadToResult<Prisma.$ProjectPayload> | null;
          };
          findFirstOrThrow: {
            args: Prisma.ProjectFindFirstOrThrowArgs<ExtArgs>;
            result: $Utils.PayloadToResult<Prisma.$ProjectPayload>;
          };
          findMany: {
            args: Prisma.ProjectFindManyArgs<ExtArgs>;
            result: $Utils.PayloadToResult<Prisma.$ProjectPayload>[];
          };
          create: {
            args: Prisma.ProjectCreateArgs<ExtArgs>;
            result: $Utils.PayloadToResult<Prisma.$ProjectPayload>;
          };
          createMany: {
            args: Prisma.ProjectCreateManyArgs<ExtArgs>;
            result: BatchPayload;
          };
          createManyAndReturn: {
            args: Prisma.ProjectCreateManyAndReturnArgs<ExtArgs>;
            result: $Utils.PayloadToResult<Prisma.$ProjectPayload>[];
          };
          delete: {
            args: Prisma.ProjectDeleteArgs<ExtArgs>;
            result: $Utils.PayloadToResult<Prisma.$ProjectPayload>;
          };
          update: {
            args: Prisma.ProjectUpdateArgs<ExtArgs>;
            result: $Utils.PayloadToResult<Prisma.$ProjectPayload>;
          };
          deleteMany: {
            args: Prisma.ProjectDeleteManyArgs<ExtArgs>;
            result: BatchPayload;
          };
          updateMany: {
            args: Prisma.ProjectUpdateManyArgs<ExtArgs>;
            result: BatchPayload;
          };
          updateManyAndReturn: {
            args: Prisma.ProjectUpdateManyAndReturnArgs<ExtArgs>;
            result: $Utils.PayloadToResult<Prisma.$ProjectPayload>[];
          };
          upsert: {
            args: Prisma.ProjectUpsertArgs<ExtArgs>;
            result: $Utils.PayloadToResult<Prisma.$ProjectPayload>;
          };
          aggregate: {
            args: Prisma.ProjectAggregateArgs<ExtArgs>;
            result: $Utils.Optional<AggregateProject>;
          };
          groupBy: {
            args: Prisma.ProjectGroupByArgs<ExtArgs>;
            result: $Utils.Optional<ProjectGroupByOutputType>[];
          };
          count: {
            args: Prisma.ProjectCountArgs<ExtArgs>;
            result: $Utils.Optional<ProjectCountAggregateOutputType> | number;
          };
        };
      };
      Task: {
        payload: Prisma.$TaskPayload<ExtArgs>;
        fields: Prisma.TaskFieldRefs;
        operations: {
          findUnique: {
            args: Prisma.TaskFindUniqueArgs<ExtArgs>;
            result: $Utils.PayloadToResult<Prisma.$TaskPayload> | null;
          };
          findUniqueOrThrow: {
            args: Prisma.TaskFindUniqueOrThrowArgs<ExtArgs>;
            result: $Utils.PayloadToResult<Prisma.$TaskPayload>;
          };
          findFirst: {
            args: Prisma.TaskFindFirstArgs<ExtArgs>;
            result: $Utils.PayloadToResult<Prisma.$TaskPayload> | null;
          };
          findFirstOrThrow: {
            args: Prisma.TaskFindFirstOrThrowArgs<ExtArgs>;
            result: $Utils.PayloadToResult<Prisma.$TaskPayload>;
          };
          findMany: {
            args: Prisma.TaskFindManyArgs<ExtArgs>;
            result: $Utils.PayloadToResult<Prisma.$TaskPayload>[];
          };
          create: {
            args: Prisma.TaskCreateArgs<ExtArgs>;
            result: $Utils.PayloadToResult<Prisma.$TaskPayload>;
          };
          createMany: {
            args: Prisma.TaskCreateManyArgs<ExtArgs>;
            result: BatchPayload;
          };
          createManyAndReturn: {
            args: Prisma.TaskCreateManyAndReturnArgs<ExtArgs>;
            result: $Utils.PayloadToResult<Prisma.$TaskPayload>[];
          };
          delete: {
            args: Prisma.TaskDeleteArgs<ExtArgs>;
            result: $Utils.PayloadToResult<Prisma.$TaskPayload>;
          };
          update: {
            args: Prisma.TaskUpdateArgs<ExtArgs>;
            result: $Utils.PayloadToResult<Prisma.$TaskPayload>;
          };
          deleteMany: {
            args: Prisma.TaskDeleteManyArgs<ExtArgs>;
            result: BatchPayload;
          };
          updateMany: {
            args: Prisma.TaskUpdateManyArgs<ExtArgs>;
            result: BatchPayload;
          };
          updateManyAndReturn: {
            args: Prisma.TaskUpdateManyAndReturnArgs<ExtArgs>;
            result: $Utils.PayloadToResult<Prisma.$TaskPayload>[];
          };
          upsert: {
            args: Prisma.TaskUpsertArgs<ExtArgs>;
            result: $Utils.PayloadToResult<Prisma.$TaskPayload>;
          };
          aggregate: {
            args: Prisma.TaskAggregateArgs<ExtArgs>;
            result: $Utils.Optional<AggregateTask>;
          };
          groupBy: {
            args: Prisma.TaskGroupByArgs<ExtArgs>;
            result: $Utils.Optional<TaskGroupByOutputType>[];
          };
          count: {
            args: Prisma.TaskCountArgs<ExtArgs>;
            result: $Utils.Optional<TaskCountAggregateOutputType> | number;
          };
        };
      };
      TaskTag: {
        payload: Prisma.$TaskTagPayload<ExtArgs>;
        fields: Prisma.TaskTagFieldRefs;
        operations: {
          findUnique: {
            args: Prisma.TaskTagFindUniqueArgs<ExtArgs>;
            result: $Utils.PayloadToResult<Prisma.$TaskTagPayload> | null;
          };
          findUniqueOrThrow: {
            args: Prisma.TaskTagFindUniqueOrThrowArgs<ExtArgs>;
            result: $Utils.PayloadToResult<Prisma.$TaskTagPayload>;
          };
          findFirst: {
            args: Prisma.TaskTagFindFirstArgs<ExtArgs>;
            result: $Utils.PayloadToResult<Prisma.$TaskTagPayload> | null;
          };
          findFirstOrThrow: {
            args: Prisma.TaskTagFindFirstOrThrowArgs<ExtArgs>;
            result: $Utils.PayloadToResult<Prisma.$TaskTagPayload>;
          };
          findMany: {
            args: Prisma.TaskTagFindManyArgs<ExtArgs>;
            result: $Utils.PayloadToResult<Prisma.$TaskTagPayload>[];
          };
          create: {
            args: Prisma.TaskTagCreateArgs<ExtArgs>;
            result: $Utils.PayloadToResult<Prisma.$TaskTagPayload>;
          };
          createMany: {
            args: Prisma.TaskTagCreateManyArgs<ExtArgs>;
            result: BatchPayload;
          };
          createManyAndReturn: {
            args: Prisma.TaskTagCreateManyAndReturnArgs<ExtArgs>;
            result: $Utils.PayloadToResult<Prisma.$TaskTagPayload>[];
          };
          delete: {
            args: Prisma.TaskTagDeleteArgs<ExtArgs>;
            result: $Utils.PayloadToResult<Prisma.$TaskTagPayload>;
          };
          update: {
            args: Prisma.TaskTagUpdateArgs<ExtArgs>;
            result: $Utils.PayloadToResult<Prisma.$TaskTagPayload>;
          };
          deleteMany: {
            args: Prisma.TaskTagDeleteManyArgs<ExtArgs>;
            result: BatchPayload;
          };
          updateMany: {
            args: Prisma.TaskTagUpdateManyArgs<ExtArgs>;
            result: BatchPayload;
          };
          updateManyAndReturn: {
            args: Prisma.TaskTagUpdateManyAndReturnArgs<ExtArgs>;
            result: $Utils.PayloadToResult<Prisma.$TaskTagPayload>[];
          };
          upsert: {
            args: Prisma.TaskTagUpsertArgs<ExtArgs>;
            result: $Utils.PayloadToResult<Prisma.$TaskTagPayload>;
          };
          aggregate: {
            args: Prisma.TaskTagAggregateArgs<ExtArgs>;
            result: $Utils.Optional<AggregateTaskTag>;
          };
          groupBy: {
            args: Prisma.TaskTagGroupByArgs<ExtArgs>;
            result: $Utils.Optional<TaskTagGroupByOutputType>[];
          };
          count: {
            args: Prisma.TaskTagCountArgs<ExtArgs>;
            result: $Utils.Optional<TaskTagCountAggregateOutputType> | number;
          };
        };
      };
      Sprint: {
        payload: Prisma.$SprintPayload<ExtArgs>;
        fields: Prisma.SprintFieldRefs;
        operations: {
          findUnique: {
            args: Prisma.SprintFindUniqueArgs<ExtArgs>;
            result: $Utils.PayloadToResult<Prisma.$SprintPayload> | null;
          };
          findUniqueOrThrow: {
            args: Prisma.SprintFindUniqueOrThrowArgs<ExtArgs>;
            result: $Utils.PayloadToResult<Prisma.$SprintPayload>;
          };
          findFirst: {
            args: Prisma.SprintFindFirstArgs<ExtArgs>;
            result: $Utils.PayloadToResult<Prisma.$SprintPayload> | null;
          };
          findFirstOrThrow: {
            args: Prisma.SprintFindFirstOrThrowArgs<ExtArgs>;
            result: $Utils.PayloadToResult<Prisma.$SprintPayload>;
          };
          findMany: {
            args: Prisma.SprintFindManyArgs<ExtArgs>;
            result: $Utils.PayloadToResult<Prisma.$SprintPayload>[];
          };
          create: {
            args: Prisma.SprintCreateArgs<ExtArgs>;
            result: $Utils.PayloadToResult<Prisma.$SprintPayload>;
          };
          createMany: {
            args: Prisma.SprintCreateManyArgs<ExtArgs>;
            result: BatchPayload;
          };
          createManyAndReturn: {
            args: Prisma.SprintCreateManyAndReturnArgs<ExtArgs>;
            result: $Utils.PayloadToResult<Prisma.$SprintPayload>[];
          };
          delete: {
            args: Prisma.SprintDeleteArgs<ExtArgs>;
            result: $Utils.PayloadToResult<Prisma.$SprintPayload>;
          };
          update: {
            args: Prisma.SprintUpdateArgs<ExtArgs>;
            result: $Utils.PayloadToResult<Prisma.$SprintPayload>;
          };
          deleteMany: {
            args: Prisma.SprintDeleteManyArgs<ExtArgs>;
            result: BatchPayload;
          };
          updateMany: {
            args: Prisma.SprintUpdateManyArgs<ExtArgs>;
            result: BatchPayload;
          };
          updateManyAndReturn: {
            args: Prisma.SprintUpdateManyAndReturnArgs<ExtArgs>;
            result: $Utils.PayloadToResult<Prisma.$SprintPayload>[];
          };
          upsert: {
            args: Prisma.SprintUpsertArgs<ExtArgs>;
            result: $Utils.PayloadToResult<Prisma.$SprintPayload>;
          };
          aggregate: {
            args: Prisma.SprintAggregateArgs<ExtArgs>;
            result: $Utils.Optional<AggregateSprint>;
          };
          groupBy: {
            args: Prisma.SprintGroupByArgs<ExtArgs>;
            result: $Utils.Optional<SprintGroupByOutputType>[];
          };
          count: {
            args: Prisma.SprintCountArgs<ExtArgs>;
            result: $Utils.Optional<SprintCountAggregateOutputType> | number;
          };
        };
      };
      Milestone: {
        payload: Prisma.$MilestonePayload<ExtArgs>;
        fields: Prisma.MilestoneFieldRefs;
        operations: {
          findUnique: {
            args: Prisma.MilestoneFindUniqueArgs<ExtArgs>;
            result: $Utils.PayloadToResult<Prisma.$MilestonePayload> | null;
          };
          findUniqueOrThrow: {
            args: Prisma.MilestoneFindUniqueOrThrowArgs<ExtArgs>;
            result: $Utils.PayloadToResult<Prisma.$MilestonePayload>;
          };
          findFirst: {
            args: Prisma.MilestoneFindFirstArgs<ExtArgs>;
            result: $Utils.PayloadToResult<Prisma.$MilestonePayload> | null;
          };
          findFirstOrThrow: {
            args: Prisma.MilestoneFindFirstOrThrowArgs<ExtArgs>;
            result: $Utils.PayloadToResult<Prisma.$MilestonePayload>;
          };
          findMany: {
            args: Prisma.MilestoneFindManyArgs<ExtArgs>;
            result: $Utils.PayloadToResult<Prisma.$MilestonePayload>[];
          };
          create: {
            args: Prisma.MilestoneCreateArgs<ExtArgs>;
            result: $Utils.PayloadToResult<Prisma.$MilestonePayload>;
          };
          createMany: {
            args: Prisma.MilestoneCreateManyArgs<ExtArgs>;
            result: BatchPayload;
          };
          createManyAndReturn: {
            args: Prisma.MilestoneCreateManyAndReturnArgs<ExtArgs>;
            result: $Utils.PayloadToResult<Prisma.$MilestonePayload>[];
          };
          delete: {
            args: Prisma.MilestoneDeleteArgs<ExtArgs>;
            result: $Utils.PayloadToResult<Prisma.$MilestonePayload>;
          };
          update: {
            args: Prisma.MilestoneUpdateArgs<ExtArgs>;
            result: $Utils.PayloadToResult<Prisma.$MilestonePayload>;
          };
          deleteMany: {
            args: Prisma.MilestoneDeleteManyArgs<ExtArgs>;
            result: BatchPayload;
          };
          updateMany: {
            args: Prisma.MilestoneUpdateManyArgs<ExtArgs>;
            result: BatchPayload;
          };
          updateManyAndReturn: {
            args: Prisma.MilestoneUpdateManyAndReturnArgs<ExtArgs>;
            result: $Utils.PayloadToResult<Prisma.$MilestonePayload>[];
          };
          upsert: {
            args: Prisma.MilestoneUpsertArgs<ExtArgs>;
            result: $Utils.PayloadToResult<Prisma.$MilestonePayload>;
          };
          aggregate: {
            args: Prisma.MilestoneAggregateArgs<ExtArgs>;
            result: $Utils.Optional<AggregateMilestone>;
          };
          groupBy: {
            args: Prisma.MilestoneGroupByArgs<ExtArgs>;
            result: $Utils.Optional<MilestoneGroupByOutputType>[];
          };
          count: {
            args: Prisma.MilestoneCountArgs<ExtArgs>;
            result: $Utils.Optional<MilestoneCountAggregateOutputType> | number;
          };
        };
      };
      MilestoneDependency: {
        payload: Prisma.$MilestoneDependencyPayload<ExtArgs>;
        fields: Prisma.MilestoneDependencyFieldRefs;
        operations: {
          findUnique: {
            args: Prisma.MilestoneDependencyFindUniqueArgs<ExtArgs>;
            result: $Utils.PayloadToResult<Prisma.$MilestoneDependencyPayload> | null;
          };
          findUniqueOrThrow: {
            args: Prisma.MilestoneDependencyFindUniqueOrThrowArgs<ExtArgs>;
            result: $Utils.PayloadToResult<Prisma.$MilestoneDependencyPayload>;
          };
          findFirst: {
            args: Prisma.MilestoneDependencyFindFirstArgs<ExtArgs>;
            result: $Utils.PayloadToResult<Prisma.$MilestoneDependencyPayload> | null;
          };
          findFirstOrThrow: {
            args: Prisma.MilestoneDependencyFindFirstOrThrowArgs<ExtArgs>;
            result: $Utils.PayloadToResult<Prisma.$MilestoneDependencyPayload>;
          };
          findMany: {
            args: Prisma.MilestoneDependencyFindManyArgs<ExtArgs>;
            result: $Utils.PayloadToResult<Prisma.$MilestoneDependencyPayload>[];
          };
          create: {
            args: Prisma.MilestoneDependencyCreateArgs<ExtArgs>;
            result: $Utils.PayloadToResult<Prisma.$MilestoneDependencyPayload>;
          };
          createMany: {
            args: Prisma.MilestoneDependencyCreateManyArgs<ExtArgs>;
            result: BatchPayload;
          };
          createManyAndReturn: {
            args: Prisma.MilestoneDependencyCreateManyAndReturnArgs<ExtArgs>;
            result: $Utils.PayloadToResult<Prisma.$MilestoneDependencyPayload>[];
          };
          delete: {
            args: Prisma.MilestoneDependencyDeleteArgs<ExtArgs>;
            result: $Utils.PayloadToResult<Prisma.$MilestoneDependencyPayload>;
          };
          update: {
            args: Prisma.MilestoneDependencyUpdateArgs<ExtArgs>;
            result: $Utils.PayloadToResult<Prisma.$MilestoneDependencyPayload>;
          };
          deleteMany: {
            args: Prisma.MilestoneDependencyDeleteManyArgs<ExtArgs>;
            result: BatchPayload;
          };
          updateMany: {
            args: Prisma.MilestoneDependencyUpdateManyArgs<ExtArgs>;
            result: BatchPayload;
          };
          updateManyAndReturn: {
            args: Prisma.MilestoneDependencyUpdateManyAndReturnArgs<ExtArgs>;
            result: $Utils.PayloadToResult<Prisma.$MilestoneDependencyPayload>[];
          };
          upsert: {
            args: Prisma.MilestoneDependencyUpsertArgs<ExtArgs>;
            result: $Utils.PayloadToResult<Prisma.$MilestoneDependencyPayload>;
          };
          aggregate: {
            args: Prisma.MilestoneDependencyAggregateArgs<ExtArgs>;
            result: $Utils.Optional<AggregateMilestoneDependency>;
          };
          groupBy: {
            args: Prisma.MilestoneDependencyGroupByArgs<ExtArgs>;
            result: $Utils.Optional<MilestoneDependencyGroupByOutputType>[];
          };
          count: {
            args: Prisma.MilestoneDependencyCountArgs<ExtArgs>;
            result:
              | $Utils.Optional<MilestoneDependencyCountAggregateOutputType>
              | number;
          };
        };
      };
      Activity: {
        payload: Prisma.$ActivityPayload<ExtArgs>;
        fields: Prisma.ActivityFieldRefs;
        operations: {
          findUnique: {
            args: Prisma.ActivityFindUniqueArgs<ExtArgs>;
            result: $Utils.PayloadToResult<Prisma.$ActivityPayload> | null;
          };
          findUniqueOrThrow: {
            args: Prisma.ActivityFindUniqueOrThrowArgs<ExtArgs>;
            result: $Utils.PayloadToResult<Prisma.$ActivityPayload>;
          };
          findFirst: {
            args: Prisma.ActivityFindFirstArgs<ExtArgs>;
            result: $Utils.PayloadToResult<Prisma.$ActivityPayload> | null;
          };
          findFirstOrThrow: {
            args: Prisma.ActivityFindFirstOrThrowArgs<ExtArgs>;
            result: $Utils.PayloadToResult<Prisma.$ActivityPayload>;
          };
          findMany: {
            args: Prisma.ActivityFindManyArgs<ExtArgs>;
            result: $Utils.PayloadToResult<Prisma.$ActivityPayload>[];
          };
          create: {
            args: Prisma.ActivityCreateArgs<ExtArgs>;
            result: $Utils.PayloadToResult<Prisma.$ActivityPayload>;
          };
          createMany: {
            args: Prisma.ActivityCreateManyArgs<ExtArgs>;
            result: BatchPayload;
          };
          createManyAndReturn: {
            args: Prisma.ActivityCreateManyAndReturnArgs<ExtArgs>;
            result: $Utils.PayloadToResult<Prisma.$ActivityPayload>[];
          };
          delete: {
            args: Prisma.ActivityDeleteArgs<ExtArgs>;
            result: $Utils.PayloadToResult<Prisma.$ActivityPayload>;
          };
          update: {
            args: Prisma.ActivityUpdateArgs<ExtArgs>;
            result: $Utils.PayloadToResult<Prisma.$ActivityPayload>;
          };
          deleteMany: {
            args: Prisma.ActivityDeleteManyArgs<ExtArgs>;
            result: BatchPayload;
          };
          updateMany: {
            args: Prisma.ActivityUpdateManyArgs<ExtArgs>;
            result: BatchPayload;
          };
          updateManyAndReturn: {
            args: Prisma.ActivityUpdateManyAndReturnArgs<ExtArgs>;
            result: $Utils.PayloadToResult<Prisma.$ActivityPayload>[];
          };
          upsert: {
            args: Prisma.ActivityUpsertArgs<ExtArgs>;
            result: $Utils.PayloadToResult<Prisma.$ActivityPayload>;
          };
          aggregate: {
            args: Prisma.ActivityAggregateArgs<ExtArgs>;
            result: $Utils.Optional<AggregateActivity>;
          };
          groupBy: {
            args: Prisma.ActivityGroupByArgs<ExtArgs>;
            result: $Utils.Optional<ActivityGroupByOutputType>[];
          };
          count: {
            args: Prisma.ActivityCountArgs<ExtArgs>;
            result: $Utils.Optional<ActivityCountAggregateOutputType> | number;
          };
        };
      };
      Notification: {
        payload: Prisma.$NotificationPayload<ExtArgs>;
        fields: Prisma.NotificationFieldRefs;
        operations: {
          findUnique: {
            args: Prisma.NotificationFindUniqueArgs<ExtArgs>;
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload> | null;
          };
          findUniqueOrThrow: {
            args: Prisma.NotificationFindUniqueOrThrowArgs<ExtArgs>;
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload>;
          };
          findFirst: {
            args: Prisma.NotificationFindFirstArgs<ExtArgs>;
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload> | null;
          };
          findFirstOrThrow: {
            args: Prisma.NotificationFindFirstOrThrowArgs<ExtArgs>;
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload>;
          };
          findMany: {
            args: Prisma.NotificationFindManyArgs<ExtArgs>;
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload>[];
          };
          create: {
            args: Prisma.NotificationCreateArgs<ExtArgs>;
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload>;
          };
          createMany: {
            args: Prisma.NotificationCreateManyArgs<ExtArgs>;
            result: BatchPayload;
          };
          createManyAndReturn: {
            args: Prisma.NotificationCreateManyAndReturnArgs<ExtArgs>;
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload>[];
          };
          delete: {
            args: Prisma.NotificationDeleteArgs<ExtArgs>;
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload>;
          };
          update: {
            args: Prisma.NotificationUpdateArgs<ExtArgs>;
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload>;
          };
          deleteMany: {
            args: Prisma.NotificationDeleteManyArgs<ExtArgs>;
            result: BatchPayload;
          };
          updateMany: {
            args: Prisma.NotificationUpdateManyArgs<ExtArgs>;
            result: BatchPayload;
          };
          updateManyAndReturn: {
            args: Prisma.NotificationUpdateManyAndReturnArgs<ExtArgs>;
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload>[];
          };
          upsert: {
            args: Prisma.NotificationUpsertArgs<ExtArgs>;
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload>;
          };
          aggregate: {
            args: Prisma.NotificationAggregateArgs<ExtArgs>;
            result: $Utils.Optional<AggregateNotification>;
          };
          groupBy: {
            args: Prisma.NotificationGroupByArgs<ExtArgs>;
            result: $Utils.Optional<NotificationGroupByOutputType>[];
          };
          count: {
            args: Prisma.NotificationCountArgs<ExtArgs>;
            result:
              | $Utils.Optional<NotificationCountAggregateOutputType>
              | number;
          };
        };
      };
    };
  } & {
    other: {
      payload: any;
      operations: {
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]];
          result: any;
        };
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]];
          result: any;
        };
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]];
          result: any;
        };
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]];
          result: any;
        };
      };
    };
  };
  export const defineExtension: $Extensions.ExtendsHook<
    "define",
    Prisma.TypeMapCb,
    $Extensions.DefaultArgs
  >;
  export type DefaultPrismaClient = PrismaClient;
  export type ErrorFormat = "pretty" | "colorless" | "minimal";
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources;
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string;
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat;
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     *
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[];
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number;
      timeout?: number;
      isolationLevel?: Prisma.TransactionIsolationLevel;
    };
    /**
     * Global configuration for omitting model fields by default.
     *
     * @example
     * ```
     * const prisma = new PrismaClient({
     *   omit: {
     *     user: {
     *       password: true
     *     }
     *   }
     * })
     * ```
     */
    omit?: Prisma.GlobalOmitConfig;
  }
  export type GlobalOmitConfig = {
    user?: UserOmit;
    room?: RoomOmit;
    chatMessage?: ChatMessageOmit;
    workspace?: WorkspaceOmit;
    workspaceMember?: WorkspaceMemberOmit;
    project?: ProjectOmit;
    task?: TaskOmit;
    taskTag?: TaskTagOmit;
    sprint?: SprintOmit;
    milestone?: MilestoneOmit;
    milestoneDependency?: MilestoneDependencyOmit;
    activity?: ActivityOmit;
    notification?: NotificationOmit;
  };

  /* Types for Logging */
  export type LogLevel = "info" | "query" | "warn" | "error";
  export type LogDefinition = {
    level: LogLevel;
    emit: "stdout" | "event";
  };

  export type GetLogType<T extends LogLevel | LogDefinition> =
    T extends LogDefinition
      ? T["emit"] extends "event"
        ? T["level"]
        : never
      : never;
  export type GetEvents<T extends any> =
    T extends Array<LogLevel | LogDefinition>
      ?
          | GetLogType<T[0]>
          | GetLogType<T[1]>
          | GetLogType<T[2]>
          | GetLogType<T[3]>
      : never;

  export type QueryEvent = {
    timestamp: Date;
    query: string;
    params: string;
    duration: number;
    target: string;
  };

  export type LogEvent = {
    timestamp: Date;
    message: string;
    target: string;
  };
  /* End Types for Logging */

  export type PrismaAction =
    | "findUnique"
    | "findUniqueOrThrow"
    | "findMany"
    | "findFirst"
    | "findFirstOrThrow"
    | "create"
    | "createMany"
    | "createManyAndReturn"
    | "update"
    | "updateMany"
    | "updateManyAndReturn"
    | "upsert"
    | "delete"
    | "deleteMany"
    | "executeRaw"
    | "queryRaw"
    | "aggregate"
    | "count"
    | "runCommandRaw"
    | "findRaw"
    | "groupBy";

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName;
    action: PrismaAction;
    args: any;
    dataPath: string[];
    runInTransaction: boolean;
  };

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>;

  // tested in getLogLevel.test.ts
  export function getLogLevel(
    log: Array<LogLevel | LogDefinition>,
  ): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<
    Prisma.DefaultPrismaClient,
    runtime.ITXClientDenyList
  >;

  export type Datasource = {
    url?: string;
  };

  /**
   * Count Types
   */

  /**
   * Count Type UserCountOutputType
   */

  export type UserCountOutputType = {
    assignedTasks: number;
    createdTasks: number;
    ownedMilestones: number;
    ownedSprints: number;
    workspaces: number;
    notifications: number;
    activities: number;
    rooms: number;
    messages: number;
  };

  export type UserCountOutputTypeSelect<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    assignedTasks?: boolean | UserCountOutputTypeCountAssignedTasksArgs;
    createdTasks?: boolean | UserCountOutputTypeCountCreatedTasksArgs;
    ownedMilestones?: boolean | UserCountOutputTypeCountOwnedMilestonesArgs;
    ownedSprints?: boolean | UserCountOutputTypeCountOwnedSprintsArgs;
    workspaces?: boolean | UserCountOutputTypeCountWorkspacesArgs;
    notifications?: boolean | UserCountOutputTypeCountNotificationsArgs;
    activities?: boolean | UserCountOutputTypeCountActivitiesArgs;
    rooms?: boolean | UserCountOutputTypeCountRoomsArgs;
    messages?: boolean | UserCountOutputTypeCountMessagesArgs;
  };

  // Custom InputTypes
  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeDefaultArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * Select specific fields to fetch from the UserCountOutputType
     */
    select?: UserCountOutputTypeSelect<ExtArgs> | null;
  };

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountAssignedTasksArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    where?: TaskWhereInput;
  };

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountCreatedTasksArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    where?: TaskWhereInput;
  };

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountOwnedMilestonesArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    where?: MilestoneWhereInput;
  };

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountOwnedSprintsArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    where?: SprintWhereInput;
  };

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountWorkspacesArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    where?: WorkspaceMemberWhereInput;
  };

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountNotificationsArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    where?: NotificationWhereInput;
  };

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountActivitiesArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    where?: ActivityWhereInput;
  };

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountRoomsArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    where?: RoomWhereInput;
  };

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountMessagesArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    where?: ChatMessageWhereInput;
  };

  /**
   * Count Type RoomCountOutputType
   */

  export type RoomCountOutputType = {
    chatMessages: number;
  };

  export type RoomCountOutputTypeSelect<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    chatMessages?: boolean | RoomCountOutputTypeCountChatMessagesArgs;
  };

  // Custom InputTypes
  /**
   * RoomCountOutputType without action
   */
  export type RoomCountOutputTypeDefaultArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * Select specific fields to fetch from the RoomCountOutputType
     */
    select?: RoomCountOutputTypeSelect<ExtArgs> | null;
  };

  /**
   * RoomCountOutputType without action
   */
  export type RoomCountOutputTypeCountChatMessagesArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    where?: ChatMessageWhereInput;
  };

  /**
   * Count Type WorkspaceCountOutputType
   */

  export type WorkspaceCountOutputType = {
    members: number;
    projects: number;
  };

  export type WorkspaceCountOutputTypeSelect<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    members?: boolean | WorkspaceCountOutputTypeCountMembersArgs;
    projects?: boolean | WorkspaceCountOutputTypeCountProjectsArgs;
  };

  // Custom InputTypes
  /**
   * WorkspaceCountOutputType without action
   */
  export type WorkspaceCountOutputTypeDefaultArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * Select specific fields to fetch from the WorkspaceCountOutputType
     */
    select?: WorkspaceCountOutputTypeSelect<ExtArgs> | null;
  };

  /**
   * WorkspaceCountOutputType without action
   */
  export type WorkspaceCountOutputTypeCountMembersArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    where?: WorkspaceMemberWhereInput;
  };

  /**
   * WorkspaceCountOutputType without action
   */
  export type WorkspaceCountOutputTypeCountProjectsArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    where?: ProjectWhereInput;
  };

  /**
   * Count Type ProjectCountOutputType
   */

  export type ProjectCountOutputType = {
    tasks: number;
    sprints: number;
    milestones: number;
  };

  export type ProjectCountOutputTypeSelect<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    tasks?: boolean | ProjectCountOutputTypeCountTasksArgs;
    sprints?: boolean | ProjectCountOutputTypeCountSprintsArgs;
    milestones?: boolean | ProjectCountOutputTypeCountMilestonesArgs;
  };

  // Custom InputTypes
  /**
   * ProjectCountOutputType without action
   */
  export type ProjectCountOutputTypeDefaultArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * Select specific fields to fetch from the ProjectCountOutputType
     */
    select?: ProjectCountOutputTypeSelect<ExtArgs> | null;
  };

  /**
   * ProjectCountOutputType without action
   */
  export type ProjectCountOutputTypeCountTasksArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    where?: TaskWhereInput;
  };

  /**
   * ProjectCountOutputType without action
   */
  export type ProjectCountOutputTypeCountSprintsArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    where?: SprintWhereInput;
  };

  /**
   * ProjectCountOutputType without action
   */
  export type ProjectCountOutputTypeCountMilestonesArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    where?: MilestoneWhereInput;
  };

  /**
   * Count Type TaskCountOutputType
   */

  export type TaskCountOutputType = {
    tags: number;
    activities: number;
  };

  export type TaskCountOutputTypeSelect<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    tags?: boolean | TaskCountOutputTypeCountTagsArgs;
    activities?: boolean | TaskCountOutputTypeCountActivitiesArgs;
  };

  // Custom InputTypes
  /**
   * TaskCountOutputType without action
   */
  export type TaskCountOutputTypeDefaultArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * Select specific fields to fetch from the TaskCountOutputType
     */
    select?: TaskCountOutputTypeSelect<ExtArgs> | null;
  };

  /**
   * TaskCountOutputType without action
   */
  export type TaskCountOutputTypeCountTagsArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    where?: TaskTagWhereInput;
  };

  /**
   * TaskCountOutputType without action
   */
  export type TaskCountOutputTypeCountActivitiesArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    where?: ActivityWhereInput;
  };

  /**
   * Count Type SprintCountOutputType
   */

  export type SprintCountOutputType = {
    tasks: number;
  };

  export type SprintCountOutputTypeSelect<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    tasks?: boolean | SprintCountOutputTypeCountTasksArgs;
  };

  // Custom InputTypes
  /**
   * SprintCountOutputType without action
   */
  export type SprintCountOutputTypeDefaultArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * Select specific fields to fetch from the SprintCountOutputType
     */
    select?: SprintCountOutputTypeSelect<ExtArgs> | null;
  };

  /**
   * SprintCountOutputType without action
   */
  export type SprintCountOutputTypeCountTasksArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    where?: TaskWhereInput;
  };

  /**
   * Count Type MilestoneCountOutputType
   */

  export type MilestoneCountOutputType = {
    dependencies: number;
    dependents: number;
  };

  export type MilestoneCountOutputTypeSelect<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    dependencies?: boolean | MilestoneCountOutputTypeCountDependenciesArgs;
    dependents?: boolean | MilestoneCountOutputTypeCountDependentsArgs;
  };

  // Custom InputTypes
  /**
   * MilestoneCountOutputType without action
   */
  export type MilestoneCountOutputTypeDefaultArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * Select specific fields to fetch from the MilestoneCountOutputType
     */
    select?: MilestoneCountOutputTypeSelect<ExtArgs> | null;
  };

  /**
   * MilestoneCountOutputType without action
   */
  export type MilestoneCountOutputTypeCountDependenciesArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    where?: MilestoneDependencyWhereInput;
  };

  /**
   * MilestoneCountOutputType without action
   */
  export type MilestoneCountOutputTypeCountDependentsArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    where?: MilestoneDependencyWhereInput;
  };

  /**
   * Models
   */

  /**
   * Model User
   */

  export type AggregateUser = {
    _count: UserCountAggregateOutputType | null;
    _min: UserMinAggregateOutputType | null;
    _max: UserMaxAggregateOutputType | null;
  };

  export type UserMinAggregateOutputType = {
    id: string | null;
    email: string | null;
    name: string | null;
    role: $Enums.UserRole | null;
    createdAt: Date | null;
    updatedAt: Date | null;
  };

  export type UserMaxAggregateOutputType = {
    id: string | null;
    email: string | null;
    name: string | null;
    role: $Enums.UserRole | null;
    createdAt: Date | null;
    updatedAt: Date | null;
  };

  export type UserCountAggregateOutputType = {
    id: number;
    email: number;
    name: number;
    role: number;
    createdAt: number;
    updatedAt: number;
    _all: number;
  };

  export type UserMinAggregateInputType = {
    id?: true;
    email?: true;
    name?: true;
    role?: true;
    createdAt?: true;
    updatedAt?: true;
  };

  export type UserMaxAggregateInputType = {
    id?: true;
    email?: true;
    name?: true;
    role?: true;
    createdAt?: true;
    updatedAt?: true;
  };

  export type UserCountAggregateInputType = {
    id?: true;
    email?: true;
    name?: true;
    role?: true;
    createdAt?: true;
    updatedAt?: true;
    _all?: true;
  };

  export type UserAggregateArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * Filter which User to aggregate.
     */
    where?: UserWhereInput;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     *
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[];
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     *
     * Sets the start position
     */
    cursor?: UserWhereUniqueInput;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     *
     * Take `±n` Users from the position of the cursor.
     */
    take?: number;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     *
     * Skip the first `n` Users.
     */
    skip?: number;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     *
     * Count returned Users
     **/
    _count?: true | UserCountAggregateInputType;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     *
     * Select which fields to find the minimum value
     **/
    _min?: UserMinAggregateInputType;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     *
     * Select which fields to find the maximum value
     **/
    _max?: UserMaxAggregateInputType;
  };

  export type GetUserAggregateType<T extends UserAggregateArgs> = {
    [P in keyof T & keyof AggregateUser]: P extends "_count" | "count"
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser[P]>
      : GetScalarType<T[P], AggregateUser[P]>;
  };

  export type UserGroupByArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    where?: UserWhereInput;
    orderBy?:
      | UserOrderByWithAggregationInput
      | UserOrderByWithAggregationInput[];
    by: UserScalarFieldEnum[] | UserScalarFieldEnum;
    having?: UserScalarWhereWithAggregatesInput;
    take?: number;
    skip?: number;
    _count?: UserCountAggregateInputType | true;
    _min?: UserMinAggregateInputType;
    _max?: UserMaxAggregateInputType;
  };

  export type UserGroupByOutputType = {
    id: string;
    email: string | null;
    name: string | null;
    role: $Enums.UserRole;
    createdAt: Date;
    updatedAt: Date;
    _count: UserCountAggregateOutputType | null;
    _min: UserMinAggregateOutputType | null;
    _max: UserMaxAggregateOutputType | null;
  };

  type GetUserGroupByPayload<T extends UserGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserGroupByOutputType, T["by"]> & {
        [P in keyof T & keyof UserGroupByOutputType]: P extends "_count"
          ? T[P] extends boolean
            ? number
            : GetScalarType<T[P], UserGroupByOutputType[P]>
          : GetScalarType<T[P], UserGroupByOutputType[P]>;
      }
    >
  >;

  export type UserSelect<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = $Extensions.GetSelect<
    {
      id?: boolean;
      email?: boolean;
      name?: boolean;
      role?: boolean;
      createdAt?: boolean;
      updatedAt?: boolean;
      assignedTasks?: boolean | User$assignedTasksArgs<ExtArgs>;
      createdTasks?: boolean | User$createdTasksArgs<ExtArgs>;
      ownedMilestones?: boolean | User$ownedMilestonesArgs<ExtArgs>;
      ownedSprints?: boolean | User$ownedSprintsArgs<ExtArgs>;
      workspaces?: boolean | User$workspacesArgs<ExtArgs>;
      notifications?: boolean | User$notificationsArgs<ExtArgs>;
      activities?: boolean | User$activitiesArgs<ExtArgs>;
      rooms?: boolean | User$roomsArgs<ExtArgs>;
      messages?: boolean | User$messagesArgs<ExtArgs>;
      _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>;
    },
    ExtArgs["result"]["user"]
  >;

  export type UserSelectCreateManyAndReturn<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = $Extensions.GetSelect<
    {
      id?: boolean;
      email?: boolean;
      name?: boolean;
      role?: boolean;
      createdAt?: boolean;
      updatedAt?: boolean;
    },
    ExtArgs["result"]["user"]
  >;

  export type UserSelectUpdateManyAndReturn<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = $Extensions.GetSelect<
    {
      id?: boolean;
      email?: boolean;
      name?: boolean;
      role?: boolean;
      createdAt?: boolean;
      updatedAt?: boolean;
    },
    ExtArgs["result"]["user"]
  >;

  export type UserSelectScalar = {
    id?: boolean;
    email?: boolean;
    name?: boolean;
    role?: boolean;
    createdAt?: boolean;
    updatedAt?: boolean;
  };

  export type UserOmit<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = $Extensions.GetOmit<
    "id" | "email" | "name" | "role" | "createdAt" | "updatedAt",
    ExtArgs["result"]["user"]
  >;
  export type UserInclude<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    assignedTasks?: boolean | User$assignedTasksArgs<ExtArgs>;
    createdTasks?: boolean | User$createdTasksArgs<ExtArgs>;
    ownedMilestones?: boolean | User$ownedMilestonesArgs<ExtArgs>;
    ownedSprints?: boolean | User$ownedSprintsArgs<ExtArgs>;
    workspaces?: boolean | User$workspacesArgs<ExtArgs>;
    notifications?: boolean | User$notificationsArgs<ExtArgs>;
    activities?: boolean | User$activitiesArgs<ExtArgs>;
    rooms?: boolean | User$roomsArgs<ExtArgs>;
    messages?: boolean | User$messagesArgs<ExtArgs>;
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>;
  };
  export type UserIncludeCreateManyAndReturn<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {};
  export type UserIncludeUpdateManyAndReturn<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {};

  export type $UserPayload<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    name: "User";
    objects: {
      assignedTasks: Prisma.$TaskPayload<ExtArgs>[];
      createdTasks: Prisma.$TaskPayload<ExtArgs>[];
      ownedMilestones: Prisma.$MilestonePayload<ExtArgs>[];
      ownedSprints: Prisma.$SprintPayload<ExtArgs>[];
      workspaces: Prisma.$WorkspaceMemberPayload<ExtArgs>[];
      notifications: Prisma.$NotificationPayload<ExtArgs>[];
      activities: Prisma.$ActivityPayload<ExtArgs>[];
      rooms: Prisma.$RoomPayload<ExtArgs>[];
      messages: Prisma.$ChatMessagePayload<ExtArgs>[];
    };
    scalars: $Extensions.GetPayloadResult<
      {
        id: string;
        email: string | null;
        name: string | null;
        role: $Enums.UserRole;
        createdAt: Date;
        updatedAt: Date;
      },
      ExtArgs["result"]["user"]
    >;
    composites: {};
  };

  type UserGetPayload<S extends boolean | null | undefined | UserDefaultArgs> =
    $Result.GetResult<Prisma.$UserPayload, S>;

  type UserCountArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = Omit<UserFindManyArgs, "select" | "include" | "distinct" | "omit"> & {
    select?: UserCountAggregateInputType | true;
  };

  export interface UserDelegate<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
    GlobalOmitOptions = {},
  > {
    [K: symbol]: {
      types: Prisma.TypeMap<ExtArgs>["model"]["User"];
      meta: { name: "User" };
    };
    /**
     * Find zero or one User that matches the filter.
     * @param {UserFindUniqueArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends UserFindUniqueArgs>(
      args: SelectSubset<T, UserFindUniqueArgs<ExtArgs>>,
    ): Prisma__UserClient<
      $Result.GetResult<
        Prisma.$UserPayload<ExtArgs>,
        T,
        "findUnique",
        GlobalOmitOptions
      > | null,
      null,
      ExtArgs,
      GlobalOmitOptions
    >;

    /**
     * Find one User that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {UserFindUniqueOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends UserFindUniqueOrThrowArgs>(
      args: SelectSubset<T, UserFindUniqueOrThrowArgs<ExtArgs>>,
    ): Prisma__UserClient<
      $Result.GetResult<
        Prisma.$UserPayload<ExtArgs>,
        T,
        "findUniqueOrThrow",
        GlobalOmitOptions
      >,
      never,
      ExtArgs,
      GlobalOmitOptions
    >;

    /**
     * Find the first User that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends UserFindFirstArgs>(
      args?: SelectSubset<T, UserFindFirstArgs<ExtArgs>>,
    ): Prisma__UserClient<
      $Result.GetResult<
        Prisma.$UserPayload<ExtArgs>,
        T,
        "findFirst",
        GlobalOmitOptions
      > | null,
      null,
      ExtArgs,
      GlobalOmitOptions
    >;

    /**
     * Find the first User that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends UserFindFirstOrThrowArgs>(
      args?: SelectSubset<T, UserFindFirstOrThrowArgs<ExtArgs>>,
    ): Prisma__UserClient<
      $Result.GetResult<
        Prisma.$UserPayload<ExtArgs>,
        T,
        "findFirstOrThrow",
        GlobalOmitOptions
      >,
      never,
      ExtArgs,
      GlobalOmitOptions
    >;

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.user.findMany()
     *
     * // Get first 10 Users
     * const users = await prisma.user.findMany({ take: 10 })
     *
     * // Only select the `id`
     * const userWithIdOnly = await prisma.user.findMany({ select: { id: true } })
     *
     */
    findMany<T extends UserFindManyArgs>(
      args?: SelectSubset<T, UserFindManyArgs<ExtArgs>>,
    ): Prisma.PrismaPromise<
      $Result.GetResult<
        Prisma.$UserPayload<ExtArgs>,
        T,
        "findMany",
        GlobalOmitOptions
      >
    >;

    /**
     * Create a User.
     * @param {UserCreateArgs} args - Arguments to create a User.
     * @example
     * // Create one User
     * const User = await prisma.user.create({
     *   data: {
     *     // ... data to create a User
     *   }
     * })
     *
     */
    create<T extends UserCreateArgs>(
      args: SelectSubset<T, UserCreateArgs<ExtArgs>>,
    ): Prisma__UserClient<
      $Result.GetResult<
        Prisma.$UserPayload<ExtArgs>,
        T,
        "create",
        GlobalOmitOptions
      >,
      never,
      ExtArgs,
      GlobalOmitOptions
    >;

    /**
     * Create many Users.
     * @param {UserCreateManyArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *
     */
    createMany<T extends UserCreateManyArgs>(
      args?: SelectSubset<T, UserCreateManyArgs<ExtArgs>>,
    ): Prisma.PrismaPromise<BatchPayload>;

    /**
     * Create many Users and returns the data saved in the database.
     * @param {UserCreateManyAndReturnArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *
     * // Create many Users and only return the `id`
     * const userWithIdOnly = await prisma.user.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     *
     */
    createManyAndReturn<T extends UserCreateManyAndReturnArgs>(
      args?: SelectSubset<T, UserCreateManyAndReturnArgs<ExtArgs>>,
    ): Prisma.PrismaPromise<
      $Result.GetResult<
        Prisma.$UserPayload<ExtArgs>,
        T,
        "createManyAndReturn",
        GlobalOmitOptions
      >
    >;

    /**
     * Delete a User.
     * @param {UserDeleteArgs} args - Arguments to delete one User.
     * @example
     * // Delete one User
     * const User = await prisma.user.delete({
     *   where: {
     *     // ... filter to delete one User
     *   }
     * })
     *
     */
    delete<T extends UserDeleteArgs>(
      args: SelectSubset<T, UserDeleteArgs<ExtArgs>>,
    ): Prisma__UserClient<
      $Result.GetResult<
        Prisma.$UserPayload<ExtArgs>,
        T,
        "delete",
        GlobalOmitOptions
      >,
      never,
      ExtArgs,
      GlobalOmitOptions
    >;

    /**
     * Update one User.
     * @param {UserUpdateArgs} args - Arguments to update one User.
     * @example
     * // Update one User
     * const user = await prisma.user.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     *
     */
    update<T extends UserUpdateArgs>(
      args: SelectSubset<T, UserUpdateArgs<ExtArgs>>,
    ): Prisma__UserClient<
      $Result.GetResult<
        Prisma.$UserPayload<ExtArgs>,
        T,
        "update",
        GlobalOmitOptions
      >,
      never,
      ExtArgs,
      GlobalOmitOptions
    >;

    /**
     * Delete zero or more Users.
     * @param {UserDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.user.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     *
     */
    deleteMany<T extends UserDeleteManyArgs>(
      args?: SelectSubset<T, UserDeleteManyArgs<ExtArgs>>,
    ): Prisma.PrismaPromise<BatchPayload>;

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     *
     */
    updateMany<T extends UserUpdateManyArgs>(
      args: SelectSubset<T, UserUpdateManyArgs<ExtArgs>>,
    ): Prisma.PrismaPromise<BatchPayload>;

    /**
     * Update zero or more Users and returns the data updated in the database.
     * @param {UserUpdateManyAndReturnArgs} args - Arguments to update many Users.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *
     * // Update zero or more Users and only return the `id`
     * const userWithIdOnly = await prisma.user.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     *
     */
    updateManyAndReturn<T extends UserUpdateManyAndReturnArgs>(
      args: SelectSubset<T, UserUpdateManyAndReturnArgs<ExtArgs>>,
    ): Prisma.PrismaPromise<
      $Result.GetResult<
        Prisma.$UserPayload<ExtArgs>,
        T,
        "updateManyAndReturn",
        GlobalOmitOptions
      >
    >;

    /**
     * Create or update one User.
     * @param {UserUpsertArgs} args - Arguments to update or create a User.
     * @example
     * // Update or create a User
     * const user = await prisma.user.upsert({
     *   create: {
     *     // ... data to create a User
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User we want to update
     *   }
     * })
     */
    upsert<T extends UserUpsertArgs>(
      args: SelectSubset<T, UserUpsertArgs<ExtArgs>>,
    ): Prisma__UserClient<
      $Result.GetResult<
        Prisma.$UserPayload<ExtArgs>,
        T,
        "upsert",
        GlobalOmitOptions
      >,
      never,
      ExtArgs,
      GlobalOmitOptions
    >;

    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.user.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
     **/
    count<T extends UserCountArgs>(
      args?: Subset<T, UserCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<"select", any>
        ? T["select"] extends true
          ? number
          : GetScalarType<T["select"], UserCountAggregateOutputType>
        : number
    >;

    /**
     * Allows you to perform aggregations operations on a User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
     **/
    aggregate<T extends UserAggregateArgs>(
      args: Subset<T, UserAggregateArgs>,
    ): Prisma.PrismaPromise<GetUserAggregateType<T>>;

    /**
     * Group by User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     *
     **/
    groupBy<
      T extends UserGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<"skip", Keys<T>>,
        Extends<"take", Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserGroupByArgs["orderBy"] }
        : { orderBy?: UserGroupByArgs["orderBy"] },
      OrderFields extends ExcludeUnderscoreKeys<
        Keys<MaybeTupleToUnion<T["orderBy"]>>
      >,
      ByFields extends MaybeTupleToUnion<T["by"]>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T["having"]>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T["by"] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
        ? `Error: "by" must not be empty.`
        : HavingValid extends False
          ? {
              [P in HavingFields]: P extends ByFields
                ? never
                : P extends string
                  ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
                  : [
                      Error,
                      "Field ",
                      P,
                      ` in "having" needs to be provided in "by"`,
                    ];
            }[HavingFields]
          : "take" extends Keys<T>
            ? "orderBy" extends Keys<T>
              ? ByValid extends True
                ? {}
                : {
                    [P in OrderFields]: P extends ByFields
                      ? never
                      : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
                  }[OrderFields]
              : 'Error: If you provide "take", you also need to provide "orderBy"'
            : "skip" extends Keys<T>
              ? "orderBy" extends Keys<T>
                ? ByValid extends True
                  ? {}
                  : {
                      [P in OrderFields]: P extends ByFields
                        ? never
                        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
                    }[OrderFields]
                : 'Error: If you provide "skip", you also need to provide "orderBy"'
              : ByValid extends True
                ? {}
                : {
                    [P in OrderFields]: P extends ByFields
                      ? never
                      : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
                  }[OrderFields],
    >(
      args: SubsetIntersection<T, UserGroupByArgs, OrderByArg> & InputErrors,
    ): {} extends InputErrors
      ? GetUserGroupByPayload<T>
      : Prisma.PrismaPromise<InputErrors>;
    /**
     * Fields of the User model
     */
    readonly fields: UserFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for User.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserClient<
    T,
    Null = never,
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
    GlobalOmitOptions = {},
  > extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise";
    assignedTasks<T extends User$assignedTasksArgs<ExtArgs> = {}>(
      args?: Subset<T, User$assignedTasksArgs<ExtArgs>>,
    ): Prisma.PrismaPromise<
      | $Result.GetResult<
          Prisma.$TaskPayload<ExtArgs>,
          T,
          "findMany",
          GlobalOmitOptions
        >
      | Null
    >;
    createdTasks<T extends User$createdTasksArgs<ExtArgs> = {}>(
      args?: Subset<T, User$createdTasksArgs<ExtArgs>>,
    ): Prisma.PrismaPromise<
      | $Result.GetResult<
          Prisma.$TaskPayload<ExtArgs>,
          T,
          "findMany",
          GlobalOmitOptions
        >
      | Null
    >;
    ownedMilestones<T extends User$ownedMilestonesArgs<ExtArgs> = {}>(
      args?: Subset<T, User$ownedMilestonesArgs<ExtArgs>>,
    ): Prisma.PrismaPromise<
      | $Result.GetResult<
          Prisma.$MilestonePayload<ExtArgs>,
          T,
          "findMany",
          GlobalOmitOptions
        >
      | Null
    >;
    ownedSprints<T extends User$ownedSprintsArgs<ExtArgs> = {}>(
      args?: Subset<T, User$ownedSprintsArgs<ExtArgs>>,
    ): Prisma.PrismaPromise<
      | $Result.GetResult<
          Prisma.$SprintPayload<ExtArgs>,
          T,
          "findMany",
          GlobalOmitOptions
        >
      | Null
    >;
    workspaces<T extends User$workspacesArgs<ExtArgs> = {}>(
      args?: Subset<T, User$workspacesArgs<ExtArgs>>,
    ): Prisma.PrismaPromise<
      | $Result.GetResult<
          Prisma.$WorkspaceMemberPayload<ExtArgs>,
          T,
          "findMany",
          GlobalOmitOptions
        >
      | Null
    >;
    notifications<T extends User$notificationsArgs<ExtArgs> = {}>(
      args?: Subset<T, User$notificationsArgs<ExtArgs>>,
    ): Prisma.PrismaPromise<
      | $Result.GetResult<
          Prisma.$NotificationPayload<ExtArgs>,
          T,
          "findMany",
          GlobalOmitOptions
        >
      | Null
    >;
    activities<T extends User$activitiesArgs<ExtArgs> = {}>(
      args?: Subset<T, User$activitiesArgs<ExtArgs>>,
    ): Prisma.PrismaPromise<
      | $Result.GetResult<
          Prisma.$ActivityPayload<ExtArgs>,
          T,
          "findMany",
          GlobalOmitOptions
        >
      | Null
    >;
    rooms<T extends User$roomsArgs<ExtArgs> = {}>(
      args?: Subset<T, User$roomsArgs<ExtArgs>>,
    ): Prisma.PrismaPromise<
      | $Result.GetResult<
          Prisma.$RoomPayload<ExtArgs>,
          T,
          "findMany",
          GlobalOmitOptions
        >
      | Null
    >;
    messages<T extends User$messagesArgs<ExtArgs> = {}>(
      args?: Subset<T, User$messagesArgs<ExtArgs>>,
    ): Prisma.PrismaPromise<
      | $Result.GetResult<
          Prisma.$ChatMessagePayload<ExtArgs>,
          T,
          "findMany",
          GlobalOmitOptions
        >
      | Null
    >;
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(
      onfulfilled?:
        | ((value: T) => TResult1 | PromiseLike<TResult1>)
        | undefined
        | null,
      onrejected?:
        | ((reason: any) => TResult2 | PromiseLike<TResult2>)
        | undefined
        | null,
    ): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(
      onrejected?:
        | ((reason: any) => TResult | PromiseLike<TResult>)
        | undefined
        | null,
    ): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }

  /**
   * Fields of the User model
   */
  interface UserFieldRefs {
    readonly id: FieldRef<"User", "String">;
    readonly email: FieldRef<"User", "String">;
    readonly name: FieldRef<"User", "String">;
    readonly role: FieldRef<"User", "UserRole">;
    readonly createdAt: FieldRef<"User", "DateTime">;
    readonly updatedAt: FieldRef<"User", "DateTime">;
  }

  // Custom InputTypes
  /**
   * User findUnique
   */
  export type UserFindUniqueArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null;
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null;
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null;
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput;
  };

  /**
   * User findUniqueOrThrow
   */
  export type UserFindUniqueOrThrowArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null;
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null;
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null;
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput;
  };

  /**
   * User findFirst
   */
  export type UserFindFirstArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null;
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null;
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null;
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     *
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[];
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     *
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     *
     * Take `±n` Users from the position of the cursor.
     */
    take?: number;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     *
     * Skip the first `n` Users.
     */
    skip?: number;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     *
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[];
  };

  /**
   * User findFirstOrThrow
   */
  export type UserFindFirstOrThrowArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null;
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null;
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null;
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     *
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[];
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     *
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     *
     * Take `±n` Users from the position of the cursor.
     */
    take?: number;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     *
     * Skip the first `n` Users.
     */
    skip?: number;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     *
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[];
  };

  /**
   * User findMany
   */
  export type UserFindManyArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null;
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null;
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null;
    /**
     * Filter, which Users to fetch.
     */
    where?: UserWhereInput;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     *
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[];
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     *
     * Sets the position for listing Users.
     */
    cursor?: UserWhereUniqueInput;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     *
     * Take `±n` Users from the position of the cursor.
     */
    take?: number;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     *
     * Skip the first `n` Users.
     */
    skip?: number;
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[];
  };

  /**
   * User create
   */
  export type UserCreateArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null;
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null;
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null;
    /**
     * The data needed to create a User.
     */
    data?: XOR<UserCreateInput, UserUncheckedCreateInput>;
  };

  /**
   * User createMany
   */
  export type UserCreateManyArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[];
    skipDuplicates?: boolean;
  };

  /**
   * User createManyAndReturn
   */
  export type UserCreateManyAndReturnArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelectCreateManyAndReturn<ExtArgs> | null;
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null;
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[];
    skipDuplicates?: boolean;
  };

  /**
   * User update
   */
  export type UserUpdateArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null;
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null;
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null;
    /**
     * The data needed to update a User.
     */
    data: XOR<UserUpdateInput, UserUncheckedUpdateInput>;
    /**
     * Choose, which User to update.
     */
    where: UserWhereUniqueInput;
  };

  /**
   * User updateMany
   */
  export type UserUpdateManyArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>;
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput;
    /**
     * Limit how many Users to update.
     */
    limit?: number;
  };

  /**
   * User updateManyAndReturn
   */
  export type UserUpdateManyAndReturnArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelectUpdateManyAndReturn<ExtArgs> | null;
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null;
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>;
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput;
    /**
     * Limit how many Users to update.
     */
    limit?: number;
  };

  /**
   * User upsert
   */
  export type UserUpsertArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null;
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null;
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null;
    /**
     * The filter to search for the User to update in case it exists.
     */
    where: UserWhereUniqueInput;
    /**
     * In case the User found by the `where` argument doesn't exist, create a new User with this data.
     */
    create: XOR<UserCreateInput, UserUncheckedCreateInput>;
    /**
     * In case the User was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserUpdateInput, UserUncheckedUpdateInput>;
  };

  /**
   * User delete
   */
  export type UserDeleteArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null;
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null;
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null;
    /**
     * Filter which User to delete.
     */
    where: UserWhereUniqueInput;
  };

  /**
   * User deleteMany
   */
  export type UserDeleteManyArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * Filter which Users to delete
     */
    where?: UserWhereInput;
    /**
     * Limit how many Users to delete.
     */
    limit?: number;
  };

  /**
   * User.assignedTasks
   */
  export type User$assignedTasksArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * Select specific fields to fetch from the Task
     */
    select?: TaskSelect<ExtArgs> | null;
    /**
     * Omit specific fields from the Task
     */
    omit?: TaskOmit<ExtArgs> | null;
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TaskInclude<ExtArgs> | null;
    where?: TaskWhereInput;
    orderBy?: TaskOrderByWithRelationInput | TaskOrderByWithRelationInput[];
    cursor?: TaskWhereUniqueInput;
    take?: number;
    skip?: number;
    distinct?: TaskScalarFieldEnum | TaskScalarFieldEnum[];
  };

  /**
   * User.createdTasks
   */
  export type User$createdTasksArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * Select specific fields to fetch from the Task
     */
    select?: TaskSelect<ExtArgs> | null;
    /**
     * Omit specific fields from the Task
     */
    omit?: TaskOmit<ExtArgs> | null;
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TaskInclude<ExtArgs> | null;
    where?: TaskWhereInput;
    orderBy?: TaskOrderByWithRelationInput | TaskOrderByWithRelationInput[];
    cursor?: TaskWhereUniqueInput;
    take?: number;
    skip?: number;
    distinct?: TaskScalarFieldEnum | TaskScalarFieldEnum[];
  };

  /**
   * User.ownedMilestones
   */
  export type User$ownedMilestonesArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * Select specific fields to fetch from the Milestone
     */
    select?: MilestoneSelect<ExtArgs> | null;
    /**
     * Omit specific fields from the Milestone
     */
    omit?: MilestoneOmit<ExtArgs> | null;
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MilestoneInclude<ExtArgs> | null;
    where?: MilestoneWhereInput;
    orderBy?:
      | MilestoneOrderByWithRelationInput
      | MilestoneOrderByWithRelationInput[];
    cursor?: MilestoneWhereUniqueInput;
    take?: number;
    skip?: number;
    distinct?: MilestoneScalarFieldEnum | MilestoneScalarFieldEnum[];
  };

  /**
   * User.ownedSprints
   */
  export type User$ownedSprintsArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * Select specific fields to fetch from the Sprint
     */
    select?: SprintSelect<ExtArgs> | null;
    /**
     * Omit specific fields from the Sprint
     */
    omit?: SprintOmit<ExtArgs> | null;
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SprintInclude<ExtArgs> | null;
    where?: SprintWhereInput;
    orderBy?: SprintOrderByWithRelationInput | SprintOrderByWithRelationInput[];
    cursor?: SprintWhereUniqueInput;
    take?: number;
    skip?: number;
    distinct?: SprintScalarFieldEnum | SprintScalarFieldEnum[];
  };

  /**
   * User.workspaces
   */
  export type User$workspacesArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * Select specific fields to fetch from the WorkspaceMember
     */
    select?: WorkspaceMemberSelect<ExtArgs> | null;
    /**
     * Omit specific fields from the WorkspaceMember
     */
    omit?: WorkspaceMemberOmit<ExtArgs> | null;
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkspaceMemberInclude<ExtArgs> | null;
    where?: WorkspaceMemberWhereInput;
    orderBy?:
      | WorkspaceMemberOrderByWithRelationInput
      | WorkspaceMemberOrderByWithRelationInput[];
    cursor?: WorkspaceMemberWhereUniqueInput;
    take?: number;
    skip?: number;
    distinct?:
      | WorkspaceMemberScalarFieldEnum
      | WorkspaceMemberScalarFieldEnum[];
  };

  /**
   * User.notifications
   */
  export type User$notificationsArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null;
    /**
     * Omit specific fields from the Notification
     */
    omit?: NotificationOmit<ExtArgs> | null;
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationInclude<ExtArgs> | null;
    where?: NotificationWhereInput;
    orderBy?:
      | NotificationOrderByWithRelationInput
      | NotificationOrderByWithRelationInput[];
    cursor?: NotificationWhereUniqueInput;
    take?: number;
    skip?: number;
    distinct?: NotificationScalarFieldEnum | NotificationScalarFieldEnum[];
  };

  /**
   * User.activities
   */
  export type User$activitiesArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * Select specific fields to fetch from the Activity
     */
    select?: ActivitySelect<ExtArgs> | null;
    /**
     * Omit specific fields from the Activity
     */
    omit?: ActivityOmit<ExtArgs> | null;
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ActivityInclude<ExtArgs> | null;
    where?: ActivityWhereInput;
    orderBy?:
      | ActivityOrderByWithRelationInput
      | ActivityOrderByWithRelationInput[];
    cursor?: ActivityWhereUniqueInput;
    take?: number;
    skip?: number;
    distinct?: ActivityScalarFieldEnum | ActivityScalarFieldEnum[];
  };

  /**
   * User.rooms
   */
  export type User$roomsArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * Select specific fields to fetch from the Room
     */
    select?: RoomSelect<ExtArgs> | null;
    /**
     * Omit specific fields from the Room
     */
    omit?: RoomOmit<ExtArgs> | null;
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RoomInclude<ExtArgs> | null;
    where?: RoomWhereInput;
    orderBy?: RoomOrderByWithRelationInput | RoomOrderByWithRelationInput[];
    cursor?: RoomWhereUniqueInput;
    take?: number;
    skip?: number;
    distinct?: RoomScalarFieldEnum | RoomScalarFieldEnum[];
  };

  /**
   * User.messages
   */
  export type User$messagesArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * Select specific fields to fetch from the ChatMessage
     */
    select?: ChatMessageSelect<ExtArgs> | null;
    /**
     * Omit specific fields from the ChatMessage
     */
    omit?: ChatMessageOmit<ExtArgs> | null;
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChatMessageInclude<ExtArgs> | null;
    where?: ChatMessageWhereInput;
    orderBy?:
      | ChatMessageOrderByWithRelationInput
      | ChatMessageOrderByWithRelationInput[];
    cursor?: ChatMessageWhereUniqueInput;
    take?: number;
    skip?: number;
    distinct?: ChatMessageScalarFieldEnum | ChatMessageScalarFieldEnum[];
  };

  /**
   * User without action
   */
  export type UserDefaultArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null;
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null;
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null;
  };

  /**
   * Model Room
   */

  export type AggregateRoom = {
    _count: RoomCountAggregateOutputType | null;
    _min: RoomMinAggregateOutputType | null;
    _max: RoomMaxAggregateOutputType | null;
  };

  export type RoomMinAggregateOutputType = {
    id: string | null;
    name: string | null;
    ownerId: string | null;
    createdAt: Date | null;
  };

  export type RoomMaxAggregateOutputType = {
    id: string | null;
    name: string | null;
    ownerId: string | null;
    createdAt: Date | null;
  };

  export type RoomCountAggregateOutputType = {
    id: number;
    name: number;
    ownerId: number;
    createdAt: number;
    whiteboardData: number;
    _all: number;
  };

  export type RoomMinAggregateInputType = {
    id?: true;
    name?: true;
    ownerId?: true;
    createdAt?: true;
  };

  export type RoomMaxAggregateInputType = {
    id?: true;
    name?: true;
    ownerId?: true;
    createdAt?: true;
  };

  export type RoomCountAggregateInputType = {
    id?: true;
    name?: true;
    ownerId?: true;
    createdAt?: true;
    whiteboardData?: true;
    _all?: true;
  };

  export type RoomAggregateArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * Filter which Room to aggregate.
     */
    where?: RoomWhereInput;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     *
     * Determine the order of Rooms to fetch.
     */
    orderBy?: RoomOrderByWithRelationInput | RoomOrderByWithRelationInput[];
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     *
     * Sets the start position
     */
    cursor?: RoomWhereUniqueInput;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     *
     * Take `±n` Rooms from the position of the cursor.
     */
    take?: number;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     *
     * Skip the first `n` Rooms.
     */
    skip?: number;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     *
     * Count returned Rooms
     **/
    _count?: true | RoomCountAggregateInputType;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     *
     * Select which fields to find the minimum value
     **/
    _min?: RoomMinAggregateInputType;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     *
     * Select which fields to find the maximum value
     **/
    _max?: RoomMaxAggregateInputType;
  };

  export type GetRoomAggregateType<T extends RoomAggregateArgs> = {
    [P in keyof T & keyof AggregateRoom]: P extends "_count" | "count"
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateRoom[P]>
      : GetScalarType<T[P], AggregateRoom[P]>;
  };

  export type RoomGroupByArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    where?: RoomWhereInput;
    orderBy?:
      | RoomOrderByWithAggregationInput
      | RoomOrderByWithAggregationInput[];
    by: RoomScalarFieldEnum[] | RoomScalarFieldEnum;
    having?: RoomScalarWhereWithAggregatesInput;
    take?: number;
    skip?: number;
    _count?: RoomCountAggregateInputType | true;
    _min?: RoomMinAggregateInputType;
    _max?: RoomMaxAggregateInputType;
  };

  export type RoomGroupByOutputType = {
    id: string;
    name: string;
    ownerId: string;
    createdAt: Date;
    whiteboardData: JsonValue | null;
    _count: RoomCountAggregateOutputType | null;
    _min: RoomMinAggregateOutputType | null;
    _max: RoomMaxAggregateOutputType | null;
  };

  type GetRoomGroupByPayload<T extends RoomGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<RoomGroupByOutputType, T["by"]> & {
        [P in keyof T & keyof RoomGroupByOutputType]: P extends "_count"
          ? T[P] extends boolean
            ? number
            : GetScalarType<T[P], RoomGroupByOutputType[P]>
          : GetScalarType<T[P], RoomGroupByOutputType[P]>;
      }
    >
  >;

  export type RoomSelect<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = $Extensions.GetSelect<
    {
      id?: boolean;
      name?: boolean;
      ownerId?: boolean;
      createdAt?: boolean;
      whiteboardData?: boolean;
      owner?: boolean | UserDefaultArgs<ExtArgs>;
      chatMessages?: boolean | Room$chatMessagesArgs<ExtArgs>;
      _count?: boolean | RoomCountOutputTypeDefaultArgs<ExtArgs>;
    },
    ExtArgs["result"]["room"]
  >;

  export type RoomSelectCreateManyAndReturn<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = $Extensions.GetSelect<
    {
      id?: boolean;
      name?: boolean;
      ownerId?: boolean;
      createdAt?: boolean;
      whiteboardData?: boolean;
      owner?: boolean | UserDefaultArgs<ExtArgs>;
    },
    ExtArgs["result"]["room"]
  >;

  export type RoomSelectUpdateManyAndReturn<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = $Extensions.GetSelect<
    {
      id?: boolean;
      name?: boolean;
      ownerId?: boolean;
      createdAt?: boolean;
      whiteboardData?: boolean;
      owner?: boolean | UserDefaultArgs<ExtArgs>;
    },
    ExtArgs["result"]["room"]
  >;

  export type RoomSelectScalar = {
    id?: boolean;
    name?: boolean;
    ownerId?: boolean;
    createdAt?: boolean;
    whiteboardData?: boolean;
  };

  export type RoomOmit<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = $Extensions.GetOmit<
    "id" | "name" | "ownerId" | "createdAt" | "whiteboardData",
    ExtArgs["result"]["room"]
  >;
  export type RoomInclude<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    owner?: boolean | UserDefaultArgs<ExtArgs>;
    chatMessages?: boolean | Room$chatMessagesArgs<ExtArgs>;
    _count?: boolean | RoomCountOutputTypeDefaultArgs<ExtArgs>;
  };
  export type RoomIncludeCreateManyAndReturn<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    owner?: boolean | UserDefaultArgs<ExtArgs>;
  };
  export type RoomIncludeUpdateManyAndReturn<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    owner?: boolean | UserDefaultArgs<ExtArgs>;
  };

  export type $RoomPayload<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    name: "Room";
    objects: {
      owner: Prisma.$UserPayload<ExtArgs>;
      chatMessages: Prisma.$ChatMessagePayload<ExtArgs>[];
    };
    scalars: $Extensions.GetPayloadResult<
      {
        id: string;
        name: string;
        ownerId: string;
        createdAt: Date;
        whiteboardData: Prisma.JsonValue | null;
      },
      ExtArgs["result"]["room"]
    >;
    composites: {};
  };

  type RoomGetPayload<S extends boolean | null | undefined | RoomDefaultArgs> =
    $Result.GetResult<Prisma.$RoomPayload, S>;

  type RoomCountArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = Omit<RoomFindManyArgs, "select" | "include" | "distinct" | "omit"> & {
    select?: RoomCountAggregateInputType | true;
  };

  export interface RoomDelegate<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
    GlobalOmitOptions = {},
  > {
    [K: symbol]: {
      types: Prisma.TypeMap<ExtArgs>["model"]["Room"];
      meta: { name: "Room" };
    };
    /**
     * Find zero or one Room that matches the filter.
     * @param {RoomFindUniqueArgs} args - Arguments to find a Room
     * @example
     * // Get one Room
     * const room = await prisma.room.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends RoomFindUniqueArgs>(
      args: SelectSubset<T, RoomFindUniqueArgs<ExtArgs>>,
    ): Prisma__RoomClient<
      $Result.GetResult<
        Prisma.$RoomPayload<ExtArgs>,
        T,
        "findUnique",
        GlobalOmitOptions
      > | null,
      null,
      ExtArgs,
      GlobalOmitOptions
    >;

    /**
     * Find one Room that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {RoomFindUniqueOrThrowArgs} args - Arguments to find a Room
     * @example
     * // Get one Room
     * const room = await prisma.room.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends RoomFindUniqueOrThrowArgs>(
      args: SelectSubset<T, RoomFindUniqueOrThrowArgs<ExtArgs>>,
    ): Prisma__RoomClient<
      $Result.GetResult<
        Prisma.$RoomPayload<ExtArgs>,
        T,
        "findUniqueOrThrow",
        GlobalOmitOptions
      >,
      never,
      ExtArgs,
      GlobalOmitOptions
    >;

    /**
     * Find the first Room that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RoomFindFirstArgs} args - Arguments to find a Room
     * @example
     * // Get one Room
     * const room = await prisma.room.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends RoomFindFirstArgs>(
      args?: SelectSubset<T, RoomFindFirstArgs<ExtArgs>>,
    ): Prisma__RoomClient<
      $Result.GetResult<
        Prisma.$RoomPayload<ExtArgs>,
        T,
        "findFirst",
        GlobalOmitOptions
      > | null,
      null,
      ExtArgs,
      GlobalOmitOptions
    >;

    /**
     * Find the first Room that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RoomFindFirstOrThrowArgs} args - Arguments to find a Room
     * @example
     * // Get one Room
     * const room = await prisma.room.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends RoomFindFirstOrThrowArgs>(
      args?: SelectSubset<T, RoomFindFirstOrThrowArgs<ExtArgs>>,
    ): Prisma__RoomClient<
      $Result.GetResult<
        Prisma.$RoomPayload<ExtArgs>,
        T,
        "findFirstOrThrow",
        GlobalOmitOptions
      >,
      never,
      ExtArgs,
      GlobalOmitOptions
    >;

    /**
     * Find zero or more Rooms that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RoomFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Rooms
     * const rooms = await prisma.room.findMany()
     *
     * // Get first 10 Rooms
     * const rooms = await prisma.room.findMany({ take: 10 })
     *
     * // Only select the `id`
     * const roomWithIdOnly = await prisma.room.findMany({ select: { id: true } })
     *
     */
    findMany<T extends RoomFindManyArgs>(
      args?: SelectSubset<T, RoomFindManyArgs<ExtArgs>>,
    ): Prisma.PrismaPromise<
      $Result.GetResult<
        Prisma.$RoomPayload<ExtArgs>,
        T,
        "findMany",
        GlobalOmitOptions
      >
    >;

    /**
     * Create a Room.
     * @param {RoomCreateArgs} args - Arguments to create a Room.
     * @example
     * // Create one Room
     * const Room = await prisma.room.create({
     *   data: {
     *     // ... data to create a Room
     *   }
     * })
     *
     */
    create<T extends RoomCreateArgs>(
      args: SelectSubset<T, RoomCreateArgs<ExtArgs>>,
    ): Prisma__RoomClient<
      $Result.GetResult<
        Prisma.$RoomPayload<ExtArgs>,
        T,
        "create",
        GlobalOmitOptions
      >,
      never,
      ExtArgs,
      GlobalOmitOptions
    >;

    /**
     * Create many Rooms.
     * @param {RoomCreateManyArgs} args - Arguments to create many Rooms.
     * @example
     * // Create many Rooms
     * const room = await prisma.room.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *
     */
    createMany<T extends RoomCreateManyArgs>(
      args?: SelectSubset<T, RoomCreateManyArgs<ExtArgs>>,
    ): Prisma.PrismaPromise<BatchPayload>;

    /**
     * Create many Rooms and returns the data saved in the database.
     * @param {RoomCreateManyAndReturnArgs} args - Arguments to create many Rooms.
     * @example
     * // Create many Rooms
     * const room = await prisma.room.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *
     * // Create many Rooms and only return the `id`
     * const roomWithIdOnly = await prisma.room.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     *
     */
    createManyAndReturn<T extends RoomCreateManyAndReturnArgs>(
      args?: SelectSubset<T, RoomCreateManyAndReturnArgs<ExtArgs>>,
    ): Prisma.PrismaPromise<
      $Result.GetResult<
        Prisma.$RoomPayload<ExtArgs>,
        T,
        "createManyAndReturn",
        GlobalOmitOptions
      >
    >;

    /**
     * Delete a Room.
     * @param {RoomDeleteArgs} args - Arguments to delete one Room.
     * @example
     * // Delete one Room
     * const Room = await prisma.room.delete({
     *   where: {
     *     // ... filter to delete one Room
     *   }
     * })
     *
     */
    delete<T extends RoomDeleteArgs>(
      args: SelectSubset<T, RoomDeleteArgs<ExtArgs>>,
    ): Prisma__RoomClient<
      $Result.GetResult<
        Prisma.$RoomPayload<ExtArgs>,
        T,
        "delete",
        GlobalOmitOptions
      >,
      never,
      ExtArgs,
      GlobalOmitOptions
    >;

    /**
     * Update one Room.
     * @param {RoomUpdateArgs} args - Arguments to update one Room.
     * @example
     * // Update one Room
     * const room = await prisma.room.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     *
     */
    update<T extends RoomUpdateArgs>(
      args: SelectSubset<T, RoomUpdateArgs<ExtArgs>>,
    ): Prisma__RoomClient<
      $Result.GetResult<
        Prisma.$RoomPayload<ExtArgs>,
        T,
        "update",
        GlobalOmitOptions
      >,
      never,
      ExtArgs,
      GlobalOmitOptions
    >;

    /**
     * Delete zero or more Rooms.
     * @param {RoomDeleteManyArgs} args - Arguments to filter Rooms to delete.
     * @example
     * // Delete a few Rooms
     * const { count } = await prisma.room.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     *
     */
    deleteMany<T extends RoomDeleteManyArgs>(
      args?: SelectSubset<T, RoomDeleteManyArgs<ExtArgs>>,
    ): Prisma.PrismaPromise<BatchPayload>;

    /**
     * Update zero or more Rooms.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RoomUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Rooms
     * const room = await prisma.room.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     *
     */
    updateMany<T extends RoomUpdateManyArgs>(
      args: SelectSubset<T, RoomUpdateManyArgs<ExtArgs>>,
    ): Prisma.PrismaPromise<BatchPayload>;

    /**
     * Update zero or more Rooms and returns the data updated in the database.
     * @param {RoomUpdateManyAndReturnArgs} args - Arguments to update many Rooms.
     * @example
     * // Update many Rooms
     * const room = await prisma.room.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *
     * // Update zero or more Rooms and only return the `id`
     * const roomWithIdOnly = await prisma.room.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     *
     */
    updateManyAndReturn<T extends RoomUpdateManyAndReturnArgs>(
      args: SelectSubset<T, RoomUpdateManyAndReturnArgs<ExtArgs>>,
    ): Prisma.PrismaPromise<
      $Result.GetResult<
        Prisma.$RoomPayload<ExtArgs>,
        T,
        "updateManyAndReturn",
        GlobalOmitOptions
      >
    >;

    /**
     * Create or update one Room.
     * @param {RoomUpsertArgs} args - Arguments to update or create a Room.
     * @example
     * // Update or create a Room
     * const room = await prisma.room.upsert({
     *   create: {
     *     // ... data to create a Room
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Room we want to update
     *   }
     * })
     */
    upsert<T extends RoomUpsertArgs>(
      args: SelectSubset<T, RoomUpsertArgs<ExtArgs>>,
    ): Prisma__RoomClient<
      $Result.GetResult<
        Prisma.$RoomPayload<ExtArgs>,
        T,
        "upsert",
        GlobalOmitOptions
      >,
      never,
      ExtArgs,
      GlobalOmitOptions
    >;

    /**
     * Count the number of Rooms.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RoomCountArgs} args - Arguments to filter Rooms to count.
     * @example
     * // Count the number of Rooms
     * const count = await prisma.room.count({
     *   where: {
     *     // ... the filter for the Rooms we want to count
     *   }
     * })
     **/
    count<T extends RoomCountArgs>(
      args?: Subset<T, RoomCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<"select", any>
        ? T["select"] extends true
          ? number
          : GetScalarType<T["select"], RoomCountAggregateOutputType>
        : number
    >;

    /**
     * Allows you to perform aggregations operations on a Room.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RoomAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
     **/
    aggregate<T extends RoomAggregateArgs>(
      args: Subset<T, RoomAggregateArgs>,
    ): Prisma.PrismaPromise<GetRoomAggregateType<T>>;

    /**
     * Group by Room.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RoomGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     *
     **/
    groupBy<
      T extends RoomGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<"skip", Keys<T>>,
        Extends<"take", Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: RoomGroupByArgs["orderBy"] }
        : { orderBy?: RoomGroupByArgs["orderBy"] },
      OrderFields extends ExcludeUnderscoreKeys<
        Keys<MaybeTupleToUnion<T["orderBy"]>>
      >,
      ByFields extends MaybeTupleToUnion<T["by"]>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T["having"]>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T["by"] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
        ? `Error: "by" must not be empty.`
        : HavingValid extends False
          ? {
              [P in HavingFields]: P extends ByFields
                ? never
                : P extends string
                  ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
                  : [
                      Error,
                      "Field ",
                      P,
                      ` in "having" needs to be provided in "by"`,
                    ];
            }[HavingFields]
          : "take" extends Keys<T>
            ? "orderBy" extends Keys<T>
              ? ByValid extends True
                ? {}
                : {
                    [P in OrderFields]: P extends ByFields
                      ? never
                      : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
                  }[OrderFields]
              : 'Error: If you provide "take", you also need to provide "orderBy"'
            : "skip" extends Keys<T>
              ? "orderBy" extends Keys<T>
                ? ByValid extends True
                  ? {}
                  : {
                      [P in OrderFields]: P extends ByFields
                        ? never
                        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
                    }[OrderFields]
                : 'Error: If you provide "skip", you also need to provide "orderBy"'
              : ByValid extends True
                ? {}
                : {
                    [P in OrderFields]: P extends ByFields
                      ? never
                      : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
                  }[OrderFields],
    >(
      args: SubsetIntersection<T, RoomGroupByArgs, OrderByArg> & InputErrors,
    ): {} extends InputErrors
      ? GetRoomGroupByPayload<T>
      : Prisma.PrismaPromise<InputErrors>;
    /**
     * Fields of the Room model
     */
    readonly fields: RoomFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Room.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__RoomClient<
    T,
    Null = never,
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
    GlobalOmitOptions = {},
  > extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise";
    owner<T extends UserDefaultArgs<ExtArgs> = {}>(
      args?: Subset<T, UserDefaultArgs<ExtArgs>>,
    ): Prisma__UserClient<
      | $Result.GetResult<
          Prisma.$UserPayload<ExtArgs>,
          T,
          "findUniqueOrThrow",
          GlobalOmitOptions
        >
      | Null,
      Null,
      ExtArgs,
      GlobalOmitOptions
    >;
    chatMessages<T extends Room$chatMessagesArgs<ExtArgs> = {}>(
      args?: Subset<T, Room$chatMessagesArgs<ExtArgs>>,
    ): Prisma.PrismaPromise<
      | $Result.GetResult<
          Prisma.$ChatMessagePayload<ExtArgs>,
          T,
          "findMany",
          GlobalOmitOptions
        >
      | Null
    >;
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(
      onfulfilled?:
        | ((value: T) => TResult1 | PromiseLike<TResult1>)
        | undefined
        | null,
      onrejected?:
        | ((reason: any) => TResult2 | PromiseLike<TResult2>)
        | undefined
        | null,
    ): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(
      onrejected?:
        | ((reason: any) => TResult | PromiseLike<TResult>)
        | undefined
        | null,
    ): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }

  /**
   * Fields of the Room model
   */
  interface RoomFieldRefs {
    readonly id: FieldRef<"Room", "String">;
    readonly name: FieldRef<"Room", "String">;
    readonly ownerId: FieldRef<"Room", "String">;
    readonly createdAt: FieldRef<"Room", "DateTime">;
    readonly whiteboardData: FieldRef<"Room", "Json">;
  }

  // Custom InputTypes
  /**
   * Room findUnique
   */
  export type RoomFindUniqueArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * Select specific fields to fetch from the Room
     */
    select?: RoomSelect<ExtArgs> | null;
    /**
     * Omit specific fields from the Room
     */
    omit?: RoomOmit<ExtArgs> | null;
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RoomInclude<ExtArgs> | null;
    /**
     * Filter, which Room to fetch.
     */
    where: RoomWhereUniqueInput;
  };

  /**
   * Room findUniqueOrThrow
   */
  export type RoomFindUniqueOrThrowArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * Select specific fields to fetch from the Room
     */
    select?: RoomSelect<ExtArgs> | null;
    /**
     * Omit specific fields from the Room
     */
    omit?: RoomOmit<ExtArgs> | null;
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RoomInclude<ExtArgs> | null;
    /**
     * Filter, which Room to fetch.
     */
    where: RoomWhereUniqueInput;
  };

  /**
   * Room findFirst
   */
  export type RoomFindFirstArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * Select specific fields to fetch from the Room
     */
    select?: RoomSelect<ExtArgs> | null;
    /**
     * Omit specific fields from the Room
     */
    omit?: RoomOmit<ExtArgs> | null;
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RoomInclude<ExtArgs> | null;
    /**
     * Filter, which Room to fetch.
     */
    where?: RoomWhereInput;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     *
     * Determine the order of Rooms to fetch.
     */
    orderBy?: RoomOrderByWithRelationInput | RoomOrderByWithRelationInput[];
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     *
     * Sets the position for searching for Rooms.
     */
    cursor?: RoomWhereUniqueInput;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     *
     * Take `±n` Rooms from the position of the cursor.
     */
    take?: number;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     *
     * Skip the first `n` Rooms.
     */
    skip?: number;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     *
     * Filter by unique combinations of Rooms.
     */
    distinct?: RoomScalarFieldEnum | RoomScalarFieldEnum[];
  };

  /**
   * Room findFirstOrThrow
   */
  export type RoomFindFirstOrThrowArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * Select specific fields to fetch from the Room
     */
    select?: RoomSelect<ExtArgs> | null;
    /**
     * Omit specific fields from the Room
     */
    omit?: RoomOmit<ExtArgs> | null;
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RoomInclude<ExtArgs> | null;
    /**
     * Filter, which Room to fetch.
     */
    where?: RoomWhereInput;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     *
     * Determine the order of Rooms to fetch.
     */
    orderBy?: RoomOrderByWithRelationInput | RoomOrderByWithRelationInput[];
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     *
     * Sets the position for searching for Rooms.
     */
    cursor?: RoomWhereUniqueInput;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     *
     * Take `±n` Rooms from the position of the cursor.
     */
    take?: number;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     *
     * Skip the first `n` Rooms.
     */
    skip?: number;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     *
     * Filter by unique combinations of Rooms.
     */
    distinct?: RoomScalarFieldEnum | RoomScalarFieldEnum[];
  };

  /**
   * Room findMany
   */
  export type RoomFindManyArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * Select specific fields to fetch from the Room
     */
    select?: RoomSelect<ExtArgs> | null;
    /**
     * Omit specific fields from the Room
     */
    omit?: RoomOmit<ExtArgs> | null;
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RoomInclude<ExtArgs> | null;
    /**
     * Filter, which Rooms to fetch.
     */
    where?: RoomWhereInput;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     *
     * Determine the order of Rooms to fetch.
     */
    orderBy?: RoomOrderByWithRelationInput | RoomOrderByWithRelationInput[];
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     *
     * Sets the position for listing Rooms.
     */
    cursor?: RoomWhereUniqueInput;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     *
     * Take `±n` Rooms from the position of the cursor.
     */
    take?: number;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     *
     * Skip the first `n` Rooms.
     */
    skip?: number;
    distinct?: RoomScalarFieldEnum | RoomScalarFieldEnum[];
  };

  /**
   * Room create
   */
  export type RoomCreateArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * Select specific fields to fetch from the Room
     */
    select?: RoomSelect<ExtArgs> | null;
    /**
     * Omit specific fields from the Room
     */
    omit?: RoomOmit<ExtArgs> | null;
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RoomInclude<ExtArgs> | null;
    /**
     * The data needed to create a Room.
     */
    data: XOR<RoomCreateInput, RoomUncheckedCreateInput>;
  };

  /**
   * Room createMany
   */
  export type RoomCreateManyArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * The data used to create many Rooms.
     */
    data: RoomCreateManyInput | RoomCreateManyInput[];
    skipDuplicates?: boolean;
  };

  /**
   * Room createManyAndReturn
   */
  export type RoomCreateManyAndReturnArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * Select specific fields to fetch from the Room
     */
    select?: RoomSelectCreateManyAndReturn<ExtArgs> | null;
    /**
     * Omit specific fields from the Room
     */
    omit?: RoomOmit<ExtArgs> | null;
    /**
     * The data used to create many Rooms.
     */
    data: RoomCreateManyInput | RoomCreateManyInput[];
    skipDuplicates?: boolean;
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RoomIncludeCreateManyAndReturn<ExtArgs> | null;
  };

  /**
   * Room update
   */
  export type RoomUpdateArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * Select specific fields to fetch from the Room
     */
    select?: RoomSelect<ExtArgs> | null;
    /**
     * Omit specific fields from the Room
     */
    omit?: RoomOmit<ExtArgs> | null;
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RoomInclude<ExtArgs> | null;
    /**
     * The data needed to update a Room.
     */
    data: XOR<RoomUpdateInput, RoomUncheckedUpdateInput>;
    /**
     * Choose, which Room to update.
     */
    where: RoomWhereUniqueInput;
  };

  /**
   * Room updateMany
   */
  export type RoomUpdateManyArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * The data used to update Rooms.
     */
    data: XOR<RoomUpdateManyMutationInput, RoomUncheckedUpdateManyInput>;
    /**
     * Filter which Rooms to update
     */
    where?: RoomWhereInput;
    /**
     * Limit how many Rooms to update.
     */
    limit?: number;
  };

  /**
   * Room updateManyAndReturn
   */
  export type RoomUpdateManyAndReturnArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * Select specific fields to fetch from the Room
     */
    select?: RoomSelectUpdateManyAndReturn<ExtArgs> | null;
    /**
     * Omit specific fields from the Room
     */
    omit?: RoomOmit<ExtArgs> | null;
    /**
     * The data used to update Rooms.
     */
    data: XOR<RoomUpdateManyMutationInput, RoomUncheckedUpdateManyInput>;
    /**
     * Filter which Rooms to update
     */
    where?: RoomWhereInput;
    /**
     * Limit how many Rooms to update.
     */
    limit?: number;
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RoomIncludeUpdateManyAndReturn<ExtArgs> | null;
  };

  /**
   * Room upsert
   */
  export type RoomUpsertArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * Select specific fields to fetch from the Room
     */
    select?: RoomSelect<ExtArgs> | null;
    /**
     * Omit specific fields from the Room
     */
    omit?: RoomOmit<ExtArgs> | null;
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RoomInclude<ExtArgs> | null;
    /**
     * The filter to search for the Room to update in case it exists.
     */
    where: RoomWhereUniqueInput;
    /**
     * In case the Room found by the `where` argument doesn't exist, create a new Room with this data.
     */
    create: XOR<RoomCreateInput, RoomUncheckedCreateInput>;
    /**
     * In case the Room was found with the provided `where` argument, update it with this data.
     */
    update: XOR<RoomUpdateInput, RoomUncheckedUpdateInput>;
  };

  /**
   * Room delete
   */
  export type RoomDeleteArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * Select specific fields to fetch from the Room
     */
    select?: RoomSelect<ExtArgs> | null;
    /**
     * Omit specific fields from the Room
     */
    omit?: RoomOmit<ExtArgs> | null;
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RoomInclude<ExtArgs> | null;
    /**
     * Filter which Room to delete.
     */
    where: RoomWhereUniqueInput;
  };

  /**
   * Room deleteMany
   */
  export type RoomDeleteManyArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * Filter which Rooms to delete
     */
    where?: RoomWhereInput;
    /**
     * Limit how many Rooms to delete.
     */
    limit?: number;
  };

  /**
   * Room.chatMessages
   */
  export type Room$chatMessagesArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * Select specific fields to fetch from the ChatMessage
     */
    select?: ChatMessageSelect<ExtArgs> | null;
    /**
     * Omit specific fields from the ChatMessage
     */
    omit?: ChatMessageOmit<ExtArgs> | null;
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChatMessageInclude<ExtArgs> | null;
    where?: ChatMessageWhereInput;
    orderBy?:
      | ChatMessageOrderByWithRelationInput
      | ChatMessageOrderByWithRelationInput[];
    cursor?: ChatMessageWhereUniqueInput;
    take?: number;
    skip?: number;
    distinct?: ChatMessageScalarFieldEnum | ChatMessageScalarFieldEnum[];
  };

  /**
   * Room without action
   */
  export type RoomDefaultArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * Select specific fields to fetch from the Room
     */
    select?: RoomSelect<ExtArgs> | null;
    /**
     * Omit specific fields from the Room
     */
    omit?: RoomOmit<ExtArgs> | null;
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RoomInclude<ExtArgs> | null;
  };

  /**
   * Model ChatMessage
   */

  export type AggregateChatMessage = {
    _count: ChatMessageCountAggregateOutputType | null;
    _min: ChatMessageMinAggregateOutputType | null;
    _max: ChatMessageMaxAggregateOutputType | null;
  };

  export type ChatMessageMinAggregateOutputType = {
    id: string | null;
    roomName: string | null;
    userId: string | null;
    message: string | null;
    createdAt: Date | null;
  };

  export type ChatMessageMaxAggregateOutputType = {
    id: string | null;
    roomName: string | null;
    userId: string | null;
    message: string | null;
    createdAt: Date | null;
  };

  export type ChatMessageCountAggregateOutputType = {
    id: number;
    roomName: number;
    userId: number;
    message: number;
    createdAt: number;
    _all: number;
  };

  export type ChatMessageMinAggregateInputType = {
    id?: true;
    roomName?: true;
    userId?: true;
    message?: true;
    createdAt?: true;
  };

  export type ChatMessageMaxAggregateInputType = {
    id?: true;
    roomName?: true;
    userId?: true;
    message?: true;
    createdAt?: true;
  };

  export type ChatMessageCountAggregateInputType = {
    id?: true;
    roomName?: true;
    userId?: true;
    message?: true;
    createdAt?: true;
    _all?: true;
  };

  export type ChatMessageAggregateArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * Filter which ChatMessage to aggregate.
     */
    where?: ChatMessageWhereInput;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     *
     * Determine the order of ChatMessages to fetch.
     */
    orderBy?:
      | ChatMessageOrderByWithRelationInput
      | ChatMessageOrderByWithRelationInput[];
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     *
     * Sets the start position
     */
    cursor?: ChatMessageWhereUniqueInput;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     *
     * Take `±n` ChatMessages from the position of the cursor.
     */
    take?: number;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     *
     * Skip the first `n` ChatMessages.
     */
    skip?: number;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     *
     * Count returned ChatMessages
     **/
    _count?: true | ChatMessageCountAggregateInputType;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     *
     * Select which fields to find the minimum value
     **/
    _min?: ChatMessageMinAggregateInputType;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     *
     * Select which fields to find the maximum value
     **/
    _max?: ChatMessageMaxAggregateInputType;
  };

  export type GetChatMessageAggregateType<T extends ChatMessageAggregateArgs> =
    {
      [P in keyof T & keyof AggregateChatMessage]: P extends "_count" | "count"
        ? T[P] extends true
          ? number
          : GetScalarType<T[P], AggregateChatMessage[P]>
        : GetScalarType<T[P], AggregateChatMessage[P]>;
    };

  export type ChatMessageGroupByArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    where?: ChatMessageWhereInput;
    orderBy?:
      | ChatMessageOrderByWithAggregationInput
      | ChatMessageOrderByWithAggregationInput[];
    by: ChatMessageScalarFieldEnum[] | ChatMessageScalarFieldEnum;
    having?: ChatMessageScalarWhereWithAggregatesInput;
    take?: number;
    skip?: number;
    _count?: ChatMessageCountAggregateInputType | true;
    _min?: ChatMessageMinAggregateInputType;
    _max?: ChatMessageMaxAggregateInputType;
  };

  export type ChatMessageGroupByOutputType = {
    id: string;
    roomName: string;
    userId: string;
    message: string;
    createdAt: Date;
    _count: ChatMessageCountAggregateOutputType | null;
    _min: ChatMessageMinAggregateOutputType | null;
    _max: ChatMessageMaxAggregateOutputType | null;
  };

  type GetChatMessageGroupByPayload<T extends ChatMessageGroupByArgs> =
    Prisma.PrismaPromise<
      Array<
        PickEnumerable<ChatMessageGroupByOutputType, T["by"]> & {
          [P in keyof T &
            keyof ChatMessageGroupByOutputType]: P extends "_count"
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ChatMessageGroupByOutputType[P]>
            : GetScalarType<T[P], ChatMessageGroupByOutputType[P]>;
        }
      >
    >;

  export type ChatMessageSelect<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = $Extensions.GetSelect<
    {
      id?: boolean;
      roomName?: boolean;
      userId?: boolean;
      message?: boolean;
      createdAt?: boolean;
      room?: boolean | RoomDefaultArgs<ExtArgs>;
      user?: boolean | UserDefaultArgs<ExtArgs>;
    },
    ExtArgs["result"]["chatMessage"]
  >;

  export type ChatMessageSelectCreateManyAndReturn<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = $Extensions.GetSelect<
    {
      id?: boolean;
      roomName?: boolean;
      userId?: boolean;
      message?: boolean;
      createdAt?: boolean;
      room?: boolean | RoomDefaultArgs<ExtArgs>;
      user?: boolean | UserDefaultArgs<ExtArgs>;
    },
    ExtArgs["result"]["chatMessage"]
  >;

  export type ChatMessageSelectUpdateManyAndReturn<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = $Extensions.GetSelect<
    {
      id?: boolean;
      roomName?: boolean;
      userId?: boolean;
      message?: boolean;
      createdAt?: boolean;
      room?: boolean | RoomDefaultArgs<ExtArgs>;
      user?: boolean | UserDefaultArgs<ExtArgs>;
    },
    ExtArgs["result"]["chatMessage"]
  >;

  export type ChatMessageSelectScalar = {
    id?: boolean;
    roomName?: boolean;
    userId?: boolean;
    message?: boolean;
    createdAt?: boolean;
  };

  export type ChatMessageOmit<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = $Extensions.GetOmit<
    "id" | "roomName" | "userId" | "message" | "createdAt",
    ExtArgs["result"]["chatMessage"]
  >;
  export type ChatMessageInclude<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    room?: boolean | RoomDefaultArgs<ExtArgs>;
    user?: boolean | UserDefaultArgs<ExtArgs>;
  };
  export type ChatMessageIncludeCreateManyAndReturn<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    room?: boolean | RoomDefaultArgs<ExtArgs>;
    user?: boolean | UserDefaultArgs<ExtArgs>;
  };
  export type ChatMessageIncludeUpdateManyAndReturn<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    room?: boolean | RoomDefaultArgs<ExtArgs>;
    user?: boolean | UserDefaultArgs<ExtArgs>;
  };

  export type $ChatMessagePayload<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    name: "ChatMessage";
    objects: {
      room: Prisma.$RoomPayload<ExtArgs>;
      user: Prisma.$UserPayload<ExtArgs>;
    };
    scalars: $Extensions.GetPayloadResult<
      {
        id: string;
        roomName: string;
        userId: string;
        message: string;
        createdAt: Date;
      },
      ExtArgs["result"]["chatMessage"]
    >;
    composites: {};
  };

  type ChatMessageGetPayload<
    S extends boolean | null | undefined | ChatMessageDefaultArgs,
  > = $Result.GetResult<Prisma.$ChatMessagePayload, S>;

  type ChatMessageCountArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = Omit<
    ChatMessageFindManyArgs,
    "select" | "include" | "distinct" | "omit"
  > & {
    select?: ChatMessageCountAggregateInputType | true;
  };

  export interface ChatMessageDelegate<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
    GlobalOmitOptions = {},
  > {
    [K: symbol]: {
      types: Prisma.TypeMap<ExtArgs>["model"]["ChatMessage"];
      meta: { name: "ChatMessage" };
    };
    /**
     * Find zero or one ChatMessage that matches the filter.
     * @param {ChatMessageFindUniqueArgs} args - Arguments to find a ChatMessage
     * @example
     * // Get one ChatMessage
     * const chatMessage = await prisma.chatMessage.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ChatMessageFindUniqueArgs>(
      args: SelectSubset<T, ChatMessageFindUniqueArgs<ExtArgs>>,
    ): Prisma__ChatMessageClient<
      $Result.GetResult<
        Prisma.$ChatMessagePayload<ExtArgs>,
        T,
        "findUnique",
        GlobalOmitOptions
      > | null,
      null,
      ExtArgs,
      GlobalOmitOptions
    >;

    /**
     * Find one ChatMessage that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {ChatMessageFindUniqueOrThrowArgs} args - Arguments to find a ChatMessage
     * @example
     * // Get one ChatMessage
     * const chatMessage = await prisma.chatMessage.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ChatMessageFindUniqueOrThrowArgs>(
      args: SelectSubset<T, ChatMessageFindUniqueOrThrowArgs<ExtArgs>>,
    ): Prisma__ChatMessageClient<
      $Result.GetResult<
        Prisma.$ChatMessagePayload<ExtArgs>,
        T,
        "findUniqueOrThrow",
        GlobalOmitOptions
      >,
      never,
      ExtArgs,
      GlobalOmitOptions
    >;

    /**
     * Find the first ChatMessage that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChatMessageFindFirstArgs} args - Arguments to find a ChatMessage
     * @example
     * // Get one ChatMessage
     * const chatMessage = await prisma.chatMessage.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ChatMessageFindFirstArgs>(
      args?: SelectSubset<T, ChatMessageFindFirstArgs<ExtArgs>>,
    ): Prisma__ChatMessageClient<
      $Result.GetResult<
        Prisma.$ChatMessagePayload<ExtArgs>,
        T,
        "findFirst",
        GlobalOmitOptions
      > | null,
      null,
      ExtArgs,
      GlobalOmitOptions
    >;

    /**
     * Find the first ChatMessage that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChatMessageFindFirstOrThrowArgs} args - Arguments to find a ChatMessage
     * @example
     * // Get one ChatMessage
     * const chatMessage = await prisma.chatMessage.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ChatMessageFindFirstOrThrowArgs>(
      args?: SelectSubset<T, ChatMessageFindFirstOrThrowArgs<ExtArgs>>,
    ): Prisma__ChatMessageClient<
      $Result.GetResult<
        Prisma.$ChatMessagePayload<ExtArgs>,
        T,
        "findFirstOrThrow",
        GlobalOmitOptions
      >,
      never,
      ExtArgs,
      GlobalOmitOptions
    >;

    /**
     * Find zero or more ChatMessages that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChatMessageFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ChatMessages
     * const chatMessages = await prisma.chatMessage.findMany()
     *
     * // Get first 10 ChatMessages
     * const chatMessages = await prisma.chatMessage.findMany({ take: 10 })
     *
     * // Only select the `id`
     * const chatMessageWithIdOnly = await prisma.chatMessage.findMany({ select: { id: true } })
     *
     */
    findMany<T extends ChatMessageFindManyArgs>(
      args?: SelectSubset<T, ChatMessageFindManyArgs<ExtArgs>>,
    ): Prisma.PrismaPromise<
      $Result.GetResult<
        Prisma.$ChatMessagePayload<ExtArgs>,
        T,
        "findMany",
        GlobalOmitOptions
      >
    >;

    /**
     * Create a ChatMessage.
     * @param {ChatMessageCreateArgs} args - Arguments to create a ChatMessage.
     * @example
     * // Create one ChatMessage
     * const ChatMessage = await prisma.chatMessage.create({
     *   data: {
     *     // ... data to create a ChatMessage
     *   }
     * })
     *
     */
    create<T extends ChatMessageCreateArgs>(
      args: SelectSubset<T, ChatMessageCreateArgs<ExtArgs>>,
    ): Prisma__ChatMessageClient<
      $Result.GetResult<
        Prisma.$ChatMessagePayload<ExtArgs>,
        T,
        "create",
        GlobalOmitOptions
      >,
      never,
      ExtArgs,
      GlobalOmitOptions
    >;

    /**
     * Create many ChatMessages.
     * @param {ChatMessageCreateManyArgs} args - Arguments to create many ChatMessages.
     * @example
     * // Create many ChatMessages
     * const chatMessage = await prisma.chatMessage.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *
     */
    createMany<T extends ChatMessageCreateManyArgs>(
      args?: SelectSubset<T, ChatMessageCreateManyArgs<ExtArgs>>,
    ): Prisma.PrismaPromise<BatchPayload>;

    /**
     * Create many ChatMessages and returns the data saved in the database.
     * @param {ChatMessageCreateManyAndReturnArgs} args - Arguments to create many ChatMessages.
     * @example
     * // Create many ChatMessages
     * const chatMessage = await prisma.chatMessage.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *
     * // Create many ChatMessages and only return the `id`
     * const chatMessageWithIdOnly = await prisma.chatMessage.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     *
     */
    createManyAndReturn<T extends ChatMessageCreateManyAndReturnArgs>(
      args?: SelectSubset<T, ChatMessageCreateManyAndReturnArgs<ExtArgs>>,
    ): Prisma.PrismaPromise<
      $Result.GetResult<
        Prisma.$ChatMessagePayload<ExtArgs>,
        T,
        "createManyAndReturn",
        GlobalOmitOptions
      >
    >;

    /**
     * Delete a ChatMessage.
     * @param {ChatMessageDeleteArgs} args - Arguments to delete one ChatMessage.
     * @example
     * // Delete one ChatMessage
     * const ChatMessage = await prisma.chatMessage.delete({
     *   where: {
     *     // ... filter to delete one ChatMessage
     *   }
     * })
     *
     */
    delete<T extends ChatMessageDeleteArgs>(
      args: SelectSubset<T, ChatMessageDeleteArgs<ExtArgs>>,
    ): Prisma__ChatMessageClient<
      $Result.GetResult<
        Prisma.$ChatMessagePayload<ExtArgs>,
        T,
        "delete",
        GlobalOmitOptions
      >,
      never,
      ExtArgs,
      GlobalOmitOptions
    >;

    /**
     * Update one ChatMessage.
     * @param {ChatMessageUpdateArgs} args - Arguments to update one ChatMessage.
     * @example
     * // Update one ChatMessage
     * const chatMessage = await prisma.chatMessage.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     *
     */
    update<T extends ChatMessageUpdateArgs>(
      args: SelectSubset<T, ChatMessageUpdateArgs<ExtArgs>>,
    ): Prisma__ChatMessageClient<
      $Result.GetResult<
        Prisma.$ChatMessagePayload<ExtArgs>,
        T,
        "update",
        GlobalOmitOptions
      >,
      never,
      ExtArgs,
      GlobalOmitOptions
    >;

    /**
     * Delete zero or more ChatMessages.
     * @param {ChatMessageDeleteManyArgs} args - Arguments to filter ChatMessages to delete.
     * @example
     * // Delete a few ChatMessages
     * const { count } = await prisma.chatMessage.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     *
     */
    deleteMany<T extends ChatMessageDeleteManyArgs>(
      args?: SelectSubset<T, ChatMessageDeleteManyArgs<ExtArgs>>,
    ): Prisma.PrismaPromise<BatchPayload>;

    /**
     * Update zero or more ChatMessages.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChatMessageUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ChatMessages
     * const chatMessage = await prisma.chatMessage.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     *
     */
    updateMany<T extends ChatMessageUpdateManyArgs>(
      args: SelectSubset<T, ChatMessageUpdateManyArgs<ExtArgs>>,
    ): Prisma.PrismaPromise<BatchPayload>;

    /**
     * Update zero or more ChatMessages and returns the data updated in the database.
     * @param {ChatMessageUpdateManyAndReturnArgs} args - Arguments to update many ChatMessages.
     * @example
     * // Update many ChatMessages
     * const chatMessage = await prisma.chatMessage.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *
     * // Update zero or more ChatMessages and only return the `id`
     * const chatMessageWithIdOnly = await prisma.chatMessage.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     *
     */
    updateManyAndReturn<T extends ChatMessageUpdateManyAndReturnArgs>(
      args: SelectSubset<T, ChatMessageUpdateManyAndReturnArgs<ExtArgs>>,
    ): Prisma.PrismaPromise<
      $Result.GetResult<
        Prisma.$ChatMessagePayload<ExtArgs>,
        T,
        "updateManyAndReturn",
        GlobalOmitOptions
      >
    >;

    /**
     * Create or update one ChatMessage.
     * @param {ChatMessageUpsertArgs} args - Arguments to update or create a ChatMessage.
     * @example
     * // Update or create a ChatMessage
     * const chatMessage = await prisma.chatMessage.upsert({
     *   create: {
     *     // ... data to create a ChatMessage
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ChatMessage we want to update
     *   }
     * })
     */
    upsert<T extends ChatMessageUpsertArgs>(
      args: SelectSubset<T, ChatMessageUpsertArgs<ExtArgs>>,
    ): Prisma__ChatMessageClient<
      $Result.GetResult<
        Prisma.$ChatMessagePayload<ExtArgs>,
        T,
        "upsert",
        GlobalOmitOptions
      >,
      never,
      ExtArgs,
      GlobalOmitOptions
    >;

    /**
     * Count the number of ChatMessages.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChatMessageCountArgs} args - Arguments to filter ChatMessages to count.
     * @example
     * // Count the number of ChatMessages
     * const count = await prisma.chatMessage.count({
     *   where: {
     *     // ... the filter for the ChatMessages we want to count
     *   }
     * })
     **/
    count<T extends ChatMessageCountArgs>(
      args?: Subset<T, ChatMessageCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<"select", any>
        ? T["select"] extends true
          ? number
          : GetScalarType<T["select"], ChatMessageCountAggregateOutputType>
        : number
    >;

    /**
     * Allows you to perform aggregations operations on a ChatMessage.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChatMessageAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
     **/
    aggregate<T extends ChatMessageAggregateArgs>(
      args: Subset<T, ChatMessageAggregateArgs>,
    ): Prisma.PrismaPromise<GetChatMessageAggregateType<T>>;

    /**
     * Group by ChatMessage.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChatMessageGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     *
     **/
    groupBy<
      T extends ChatMessageGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<"skip", Keys<T>>,
        Extends<"take", Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ChatMessageGroupByArgs["orderBy"] }
        : { orderBy?: ChatMessageGroupByArgs["orderBy"] },
      OrderFields extends ExcludeUnderscoreKeys<
        Keys<MaybeTupleToUnion<T["orderBy"]>>
      >,
      ByFields extends MaybeTupleToUnion<T["by"]>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T["having"]>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T["by"] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
        ? `Error: "by" must not be empty.`
        : HavingValid extends False
          ? {
              [P in HavingFields]: P extends ByFields
                ? never
                : P extends string
                  ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
                  : [
                      Error,
                      "Field ",
                      P,
                      ` in "having" needs to be provided in "by"`,
                    ];
            }[HavingFields]
          : "take" extends Keys<T>
            ? "orderBy" extends Keys<T>
              ? ByValid extends True
                ? {}
                : {
                    [P in OrderFields]: P extends ByFields
                      ? never
                      : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
                  }[OrderFields]
              : 'Error: If you provide "take", you also need to provide "orderBy"'
            : "skip" extends Keys<T>
              ? "orderBy" extends Keys<T>
                ? ByValid extends True
                  ? {}
                  : {
                      [P in OrderFields]: P extends ByFields
                        ? never
                        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
                    }[OrderFields]
                : 'Error: If you provide "skip", you also need to provide "orderBy"'
              : ByValid extends True
                ? {}
                : {
                    [P in OrderFields]: P extends ByFields
                      ? never
                      : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
                  }[OrderFields],
    >(
      args: SubsetIntersection<T, ChatMessageGroupByArgs, OrderByArg> &
        InputErrors,
    ): {} extends InputErrors
      ? GetChatMessageGroupByPayload<T>
      : Prisma.PrismaPromise<InputErrors>;
    /**
     * Fields of the ChatMessage model
     */
    readonly fields: ChatMessageFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for ChatMessage.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ChatMessageClient<
    T,
    Null = never,
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
    GlobalOmitOptions = {},
  > extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise";
    room<T extends RoomDefaultArgs<ExtArgs> = {}>(
      args?: Subset<T, RoomDefaultArgs<ExtArgs>>,
    ): Prisma__RoomClient<
      | $Result.GetResult<
          Prisma.$RoomPayload<ExtArgs>,
          T,
          "findUniqueOrThrow",
          GlobalOmitOptions
        >
      | Null,
      Null,
      ExtArgs,
      GlobalOmitOptions
    >;
    user<T extends UserDefaultArgs<ExtArgs> = {}>(
      args?: Subset<T, UserDefaultArgs<ExtArgs>>,
    ): Prisma__UserClient<
      | $Result.GetResult<
          Prisma.$UserPayload<ExtArgs>,
          T,
          "findUniqueOrThrow",
          GlobalOmitOptions
        >
      | Null,
      Null,
      ExtArgs,
      GlobalOmitOptions
    >;
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(
      onfulfilled?:
        | ((value: T) => TResult1 | PromiseLike<TResult1>)
        | undefined
        | null,
      onrejected?:
        | ((reason: any) => TResult2 | PromiseLike<TResult2>)
        | undefined
        | null,
    ): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(
      onrejected?:
        | ((reason: any) => TResult | PromiseLike<TResult>)
        | undefined
        | null,
    ): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }

  /**
   * Fields of the ChatMessage model
   */
  interface ChatMessageFieldRefs {
    readonly id: FieldRef<"ChatMessage", "String">;
    readonly roomName: FieldRef<"ChatMessage", "String">;
    readonly userId: FieldRef<"ChatMessage", "String">;
    readonly message: FieldRef<"ChatMessage", "String">;
    readonly createdAt: FieldRef<"ChatMessage", "DateTime">;
  }

  // Custom InputTypes
  /**
   * ChatMessage findUnique
   */
  export type ChatMessageFindUniqueArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * Select specific fields to fetch from the ChatMessage
     */
    select?: ChatMessageSelect<ExtArgs> | null;
    /**
     * Omit specific fields from the ChatMessage
     */
    omit?: ChatMessageOmit<ExtArgs> | null;
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChatMessageInclude<ExtArgs> | null;
    /**
     * Filter, which ChatMessage to fetch.
     */
    where: ChatMessageWhereUniqueInput;
  };

  /**
   * ChatMessage findUniqueOrThrow
   */
  export type ChatMessageFindUniqueOrThrowArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * Select specific fields to fetch from the ChatMessage
     */
    select?: ChatMessageSelect<ExtArgs> | null;
    /**
     * Omit specific fields from the ChatMessage
     */
    omit?: ChatMessageOmit<ExtArgs> | null;
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChatMessageInclude<ExtArgs> | null;
    /**
     * Filter, which ChatMessage to fetch.
     */
    where: ChatMessageWhereUniqueInput;
  };

  /**
   * ChatMessage findFirst
   */
  export type ChatMessageFindFirstArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * Select specific fields to fetch from the ChatMessage
     */
    select?: ChatMessageSelect<ExtArgs> | null;
    /**
     * Omit specific fields from the ChatMessage
     */
    omit?: ChatMessageOmit<ExtArgs> | null;
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChatMessageInclude<ExtArgs> | null;
    /**
     * Filter, which ChatMessage to fetch.
     */
    where?: ChatMessageWhereInput;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     *
     * Determine the order of ChatMessages to fetch.
     */
    orderBy?:
      | ChatMessageOrderByWithRelationInput
      | ChatMessageOrderByWithRelationInput[];
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     *
     * Sets the position for searching for ChatMessages.
     */
    cursor?: ChatMessageWhereUniqueInput;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     *
     * Take `±n` ChatMessages from the position of the cursor.
     */
    take?: number;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     *
     * Skip the first `n` ChatMessages.
     */
    skip?: number;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     *
     * Filter by unique combinations of ChatMessages.
     */
    distinct?: ChatMessageScalarFieldEnum | ChatMessageScalarFieldEnum[];
  };

  /**
   * ChatMessage findFirstOrThrow
   */
  export type ChatMessageFindFirstOrThrowArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * Select specific fields to fetch from the ChatMessage
     */
    select?: ChatMessageSelect<ExtArgs> | null;
    /**
     * Omit specific fields from the ChatMessage
     */
    omit?: ChatMessageOmit<ExtArgs> | null;
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChatMessageInclude<ExtArgs> | null;
    /**
     * Filter, which ChatMessage to fetch.
     */
    where?: ChatMessageWhereInput;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     *
     * Determine the order of ChatMessages to fetch.
     */
    orderBy?:
      | ChatMessageOrderByWithRelationInput
      | ChatMessageOrderByWithRelationInput[];
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     *
     * Sets the position for searching for ChatMessages.
     */
    cursor?: ChatMessageWhereUniqueInput;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     *
     * Take `±n` ChatMessages from the position of the cursor.
     */
    take?: number;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     *
     * Skip the first `n` ChatMessages.
     */
    skip?: number;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     *
     * Filter by unique combinations of ChatMessages.
     */
    distinct?: ChatMessageScalarFieldEnum | ChatMessageScalarFieldEnum[];
  };

  /**
   * ChatMessage findMany
   */
  export type ChatMessageFindManyArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * Select specific fields to fetch from the ChatMessage
     */
    select?: ChatMessageSelect<ExtArgs> | null;
    /**
     * Omit specific fields from the ChatMessage
     */
    omit?: ChatMessageOmit<ExtArgs> | null;
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChatMessageInclude<ExtArgs> | null;
    /**
     * Filter, which ChatMessages to fetch.
     */
    where?: ChatMessageWhereInput;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     *
     * Determine the order of ChatMessages to fetch.
     */
    orderBy?:
      | ChatMessageOrderByWithRelationInput
      | ChatMessageOrderByWithRelationInput[];
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     *
     * Sets the position for listing ChatMessages.
     */
    cursor?: ChatMessageWhereUniqueInput;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     *
     * Take `±n` ChatMessages from the position of the cursor.
     */
    take?: number;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     *
     * Skip the first `n` ChatMessages.
     */
    skip?: number;
    distinct?: ChatMessageScalarFieldEnum | ChatMessageScalarFieldEnum[];
  };

  /**
   * ChatMessage create
   */
  export type ChatMessageCreateArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * Select specific fields to fetch from the ChatMessage
     */
    select?: ChatMessageSelect<ExtArgs> | null;
    /**
     * Omit specific fields from the ChatMessage
     */
    omit?: ChatMessageOmit<ExtArgs> | null;
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChatMessageInclude<ExtArgs> | null;
    /**
     * The data needed to create a ChatMessage.
     */
    data: XOR<ChatMessageCreateInput, ChatMessageUncheckedCreateInput>;
  };

  /**
   * ChatMessage createMany
   */
  export type ChatMessageCreateManyArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * The data used to create many ChatMessages.
     */
    data: ChatMessageCreateManyInput | ChatMessageCreateManyInput[];
    skipDuplicates?: boolean;
  };

  /**
   * ChatMessage createManyAndReturn
   */
  export type ChatMessageCreateManyAndReturnArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * Select specific fields to fetch from the ChatMessage
     */
    select?: ChatMessageSelectCreateManyAndReturn<ExtArgs> | null;
    /**
     * Omit specific fields from the ChatMessage
     */
    omit?: ChatMessageOmit<ExtArgs> | null;
    /**
     * The data used to create many ChatMessages.
     */
    data: ChatMessageCreateManyInput | ChatMessageCreateManyInput[];
    skipDuplicates?: boolean;
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChatMessageIncludeCreateManyAndReturn<ExtArgs> | null;
  };

  /**
   * ChatMessage update
   */
  export type ChatMessageUpdateArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * Select specific fields to fetch from the ChatMessage
     */
    select?: ChatMessageSelect<ExtArgs> | null;
    /**
     * Omit specific fields from the ChatMessage
     */
    omit?: ChatMessageOmit<ExtArgs> | null;
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChatMessageInclude<ExtArgs> | null;
    /**
     * The data needed to update a ChatMessage.
     */
    data: XOR<ChatMessageUpdateInput, ChatMessageUncheckedUpdateInput>;
    /**
     * Choose, which ChatMessage to update.
     */
    where: ChatMessageWhereUniqueInput;
  };

  /**
   * ChatMessage updateMany
   */
  export type ChatMessageUpdateManyArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * The data used to update ChatMessages.
     */
    data: XOR<
      ChatMessageUpdateManyMutationInput,
      ChatMessageUncheckedUpdateManyInput
    >;
    /**
     * Filter which ChatMessages to update
     */
    where?: ChatMessageWhereInput;
    /**
     * Limit how many ChatMessages to update.
     */
    limit?: number;
  };

  /**
   * ChatMessage updateManyAndReturn
   */
  export type ChatMessageUpdateManyAndReturnArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * Select specific fields to fetch from the ChatMessage
     */
    select?: ChatMessageSelectUpdateManyAndReturn<ExtArgs> | null;
    /**
     * Omit specific fields from the ChatMessage
     */
    omit?: ChatMessageOmit<ExtArgs> | null;
    /**
     * The data used to update ChatMessages.
     */
    data: XOR<
      ChatMessageUpdateManyMutationInput,
      ChatMessageUncheckedUpdateManyInput
    >;
    /**
     * Filter which ChatMessages to update
     */
    where?: ChatMessageWhereInput;
    /**
     * Limit how many ChatMessages to update.
     */
    limit?: number;
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChatMessageIncludeUpdateManyAndReturn<ExtArgs> | null;
  };

  /**
   * ChatMessage upsert
   */
  export type ChatMessageUpsertArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * Select specific fields to fetch from the ChatMessage
     */
    select?: ChatMessageSelect<ExtArgs> | null;
    /**
     * Omit specific fields from the ChatMessage
     */
    omit?: ChatMessageOmit<ExtArgs> | null;
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChatMessageInclude<ExtArgs> | null;
    /**
     * The filter to search for the ChatMessage to update in case it exists.
     */
    where: ChatMessageWhereUniqueInput;
    /**
     * In case the ChatMessage found by the `where` argument doesn't exist, create a new ChatMessage with this data.
     */
    create: XOR<ChatMessageCreateInput, ChatMessageUncheckedCreateInput>;
    /**
     * In case the ChatMessage was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ChatMessageUpdateInput, ChatMessageUncheckedUpdateInput>;
  };

  /**
   * ChatMessage delete
   */
  export type ChatMessageDeleteArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * Select specific fields to fetch from the ChatMessage
     */
    select?: ChatMessageSelect<ExtArgs> | null;
    /**
     * Omit specific fields from the ChatMessage
     */
    omit?: ChatMessageOmit<ExtArgs> | null;
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChatMessageInclude<ExtArgs> | null;
    /**
     * Filter which ChatMessage to delete.
     */
    where: ChatMessageWhereUniqueInput;
  };

  /**
   * ChatMessage deleteMany
   */
  export type ChatMessageDeleteManyArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * Filter which ChatMessages to delete
     */
    where?: ChatMessageWhereInput;
    /**
     * Limit how many ChatMessages to delete.
     */
    limit?: number;
  };

  /**
   * ChatMessage without action
   */
  export type ChatMessageDefaultArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * Select specific fields to fetch from the ChatMessage
     */
    select?: ChatMessageSelect<ExtArgs> | null;
    /**
     * Omit specific fields from the ChatMessage
     */
    omit?: ChatMessageOmit<ExtArgs> | null;
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChatMessageInclude<ExtArgs> | null;
  };

  /**
   * Model Workspace
   */

  export type AggregateWorkspace = {
    _count: WorkspaceCountAggregateOutputType | null;
    _min: WorkspaceMinAggregateOutputType | null;
    _max: WorkspaceMaxAggregateOutputType | null;
  };

  export type WorkspaceMinAggregateOutputType = {
    id: string | null;
    name: string | null;
    createdAt: Date | null;
    updatedAt: Date | null;
  };

  export type WorkspaceMaxAggregateOutputType = {
    id: string | null;
    name: string | null;
    createdAt: Date | null;
    updatedAt: Date | null;
  };

  export type WorkspaceCountAggregateOutputType = {
    id: number;
    name: number;
    createdAt: number;
    updatedAt: number;
    _all: number;
  };

  export type WorkspaceMinAggregateInputType = {
    id?: true;
    name?: true;
    createdAt?: true;
    updatedAt?: true;
  };

  export type WorkspaceMaxAggregateInputType = {
    id?: true;
    name?: true;
    createdAt?: true;
    updatedAt?: true;
  };

  export type WorkspaceCountAggregateInputType = {
    id?: true;
    name?: true;
    createdAt?: true;
    updatedAt?: true;
    _all?: true;
  };

  export type WorkspaceAggregateArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * Filter which Workspace to aggregate.
     */
    where?: WorkspaceWhereInput;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     *
     * Determine the order of Workspaces to fetch.
     */
    orderBy?:
      | WorkspaceOrderByWithRelationInput
      | WorkspaceOrderByWithRelationInput[];
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     *
     * Sets the start position
     */
    cursor?: WorkspaceWhereUniqueInput;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     *
     * Take `±n` Workspaces from the position of the cursor.
     */
    take?: number;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     *
     * Skip the first `n` Workspaces.
     */
    skip?: number;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     *
     * Count returned Workspaces
     **/
    _count?: true | WorkspaceCountAggregateInputType;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     *
     * Select which fields to find the minimum value
     **/
    _min?: WorkspaceMinAggregateInputType;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     *
     * Select which fields to find the maximum value
     **/
    _max?: WorkspaceMaxAggregateInputType;
  };

  export type GetWorkspaceAggregateType<T extends WorkspaceAggregateArgs> = {
    [P in keyof T & keyof AggregateWorkspace]: P extends "_count" | "count"
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateWorkspace[P]>
      : GetScalarType<T[P], AggregateWorkspace[P]>;
  };

  export type WorkspaceGroupByArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    where?: WorkspaceWhereInput;
    orderBy?:
      | WorkspaceOrderByWithAggregationInput
      | WorkspaceOrderByWithAggregationInput[];
    by: WorkspaceScalarFieldEnum[] | WorkspaceScalarFieldEnum;
    having?: WorkspaceScalarWhereWithAggregatesInput;
    take?: number;
    skip?: number;
    _count?: WorkspaceCountAggregateInputType | true;
    _min?: WorkspaceMinAggregateInputType;
    _max?: WorkspaceMaxAggregateInputType;
  };

  export type WorkspaceGroupByOutputType = {
    id: string;
    name: string;
    createdAt: Date;
    updatedAt: Date;
    _count: WorkspaceCountAggregateOutputType | null;
    _min: WorkspaceMinAggregateOutputType | null;
    _max: WorkspaceMaxAggregateOutputType | null;
  };

  type GetWorkspaceGroupByPayload<T extends WorkspaceGroupByArgs> =
    Prisma.PrismaPromise<
      Array<
        PickEnumerable<WorkspaceGroupByOutputType, T["by"]> & {
          [P in keyof T & keyof WorkspaceGroupByOutputType]: P extends "_count"
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], WorkspaceGroupByOutputType[P]>
            : GetScalarType<T[P], WorkspaceGroupByOutputType[P]>;
        }
      >
    >;

  export type WorkspaceSelect<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = $Extensions.GetSelect<
    {
      id?: boolean;
      name?: boolean;
      createdAt?: boolean;
      updatedAt?: boolean;
      members?: boolean | Workspace$membersArgs<ExtArgs>;
      projects?: boolean | Workspace$projectsArgs<ExtArgs>;
      _count?: boolean | WorkspaceCountOutputTypeDefaultArgs<ExtArgs>;
    },
    ExtArgs["result"]["workspace"]
  >;

  export type WorkspaceSelectCreateManyAndReturn<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = $Extensions.GetSelect<
    {
      id?: boolean;
      name?: boolean;
      createdAt?: boolean;
      updatedAt?: boolean;
    },
    ExtArgs["result"]["workspace"]
  >;

  export type WorkspaceSelectUpdateManyAndReturn<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = $Extensions.GetSelect<
    {
      id?: boolean;
      name?: boolean;
      createdAt?: boolean;
      updatedAt?: boolean;
    },
    ExtArgs["result"]["workspace"]
  >;

  export type WorkspaceSelectScalar = {
    id?: boolean;
    name?: boolean;
    createdAt?: boolean;
    updatedAt?: boolean;
  };

  export type WorkspaceOmit<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = $Extensions.GetOmit<
    "id" | "name" | "createdAt" | "updatedAt",
    ExtArgs["result"]["workspace"]
  >;
  export type WorkspaceInclude<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    members?: boolean | Workspace$membersArgs<ExtArgs>;
    projects?: boolean | Workspace$projectsArgs<ExtArgs>;
    _count?: boolean | WorkspaceCountOutputTypeDefaultArgs<ExtArgs>;
  };
  export type WorkspaceIncludeCreateManyAndReturn<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {};
  export type WorkspaceIncludeUpdateManyAndReturn<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {};

  export type $WorkspacePayload<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    name: "Workspace";
    objects: {
      members: Prisma.$WorkspaceMemberPayload<ExtArgs>[];
      projects: Prisma.$ProjectPayload<ExtArgs>[];
    };
    scalars: $Extensions.GetPayloadResult<
      {
        id: string;
        name: string;
        createdAt: Date;
        updatedAt: Date;
      },
      ExtArgs["result"]["workspace"]
    >;
    composites: {};
  };

  type WorkspaceGetPayload<
    S extends boolean | null | undefined | WorkspaceDefaultArgs,
  > = $Result.GetResult<Prisma.$WorkspacePayload, S>;

  type WorkspaceCountArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = Omit<
    WorkspaceFindManyArgs,
    "select" | "include" | "distinct" | "omit"
  > & {
    select?: WorkspaceCountAggregateInputType | true;
  };

  export interface WorkspaceDelegate<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
    GlobalOmitOptions = {},
  > {
    [K: symbol]: {
      types: Prisma.TypeMap<ExtArgs>["model"]["Workspace"];
      meta: { name: "Workspace" };
    };
    /**
     * Find zero or one Workspace that matches the filter.
     * @param {WorkspaceFindUniqueArgs} args - Arguments to find a Workspace
     * @example
     * // Get one Workspace
     * const workspace = await prisma.workspace.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends WorkspaceFindUniqueArgs>(
      args: SelectSubset<T, WorkspaceFindUniqueArgs<ExtArgs>>,
    ): Prisma__WorkspaceClient<
      $Result.GetResult<
        Prisma.$WorkspacePayload<ExtArgs>,
        T,
        "findUnique",
        GlobalOmitOptions
      > | null,
      null,
      ExtArgs,
      GlobalOmitOptions
    >;

    /**
     * Find one Workspace that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {WorkspaceFindUniqueOrThrowArgs} args - Arguments to find a Workspace
     * @example
     * // Get one Workspace
     * const workspace = await prisma.workspace.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends WorkspaceFindUniqueOrThrowArgs>(
      args: SelectSubset<T, WorkspaceFindUniqueOrThrowArgs<ExtArgs>>,
    ): Prisma__WorkspaceClient<
      $Result.GetResult<
        Prisma.$WorkspacePayload<ExtArgs>,
        T,
        "findUniqueOrThrow",
        GlobalOmitOptions
      >,
      never,
      ExtArgs,
      GlobalOmitOptions
    >;

    /**
     * Find the first Workspace that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WorkspaceFindFirstArgs} args - Arguments to find a Workspace
     * @example
     * // Get one Workspace
     * const workspace = await prisma.workspace.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends WorkspaceFindFirstArgs>(
      args?: SelectSubset<T, WorkspaceFindFirstArgs<ExtArgs>>,
    ): Prisma__WorkspaceClient<
      $Result.GetResult<
        Prisma.$WorkspacePayload<ExtArgs>,
        T,
        "findFirst",
        GlobalOmitOptions
      > | null,
      null,
      ExtArgs,
      GlobalOmitOptions
    >;

    /**
     * Find the first Workspace that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WorkspaceFindFirstOrThrowArgs} args - Arguments to find a Workspace
     * @example
     * // Get one Workspace
     * const workspace = await prisma.workspace.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends WorkspaceFindFirstOrThrowArgs>(
      args?: SelectSubset<T, WorkspaceFindFirstOrThrowArgs<ExtArgs>>,
    ): Prisma__WorkspaceClient<
      $Result.GetResult<
        Prisma.$WorkspacePayload<ExtArgs>,
        T,
        "findFirstOrThrow",
        GlobalOmitOptions
      >,
      never,
      ExtArgs,
      GlobalOmitOptions
    >;

    /**
     * Find zero or more Workspaces that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WorkspaceFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Workspaces
     * const workspaces = await prisma.workspace.findMany()
     *
     * // Get first 10 Workspaces
     * const workspaces = await prisma.workspace.findMany({ take: 10 })
     *
     * // Only select the `id`
     * const workspaceWithIdOnly = await prisma.workspace.findMany({ select: { id: true } })
     *
     */
    findMany<T extends WorkspaceFindManyArgs>(
      args?: SelectSubset<T, WorkspaceFindManyArgs<ExtArgs>>,
    ): Prisma.PrismaPromise<
      $Result.GetResult<
        Prisma.$WorkspacePayload<ExtArgs>,
        T,
        "findMany",
        GlobalOmitOptions
      >
    >;

    /**
     * Create a Workspace.
     * @param {WorkspaceCreateArgs} args - Arguments to create a Workspace.
     * @example
     * // Create one Workspace
     * const Workspace = await prisma.workspace.create({
     *   data: {
     *     // ... data to create a Workspace
     *   }
     * })
     *
     */
    create<T extends WorkspaceCreateArgs>(
      args: SelectSubset<T, WorkspaceCreateArgs<ExtArgs>>,
    ): Prisma__WorkspaceClient<
      $Result.GetResult<
        Prisma.$WorkspacePayload<ExtArgs>,
        T,
        "create",
        GlobalOmitOptions
      >,
      never,
      ExtArgs,
      GlobalOmitOptions
    >;

    /**
     * Create many Workspaces.
     * @param {WorkspaceCreateManyArgs} args - Arguments to create many Workspaces.
     * @example
     * // Create many Workspaces
     * const workspace = await prisma.workspace.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *
     */
    createMany<T extends WorkspaceCreateManyArgs>(
      args?: SelectSubset<T, WorkspaceCreateManyArgs<ExtArgs>>,
    ): Prisma.PrismaPromise<BatchPayload>;

    /**
     * Create many Workspaces and returns the data saved in the database.
     * @param {WorkspaceCreateManyAndReturnArgs} args - Arguments to create many Workspaces.
     * @example
     * // Create many Workspaces
     * const workspace = await prisma.workspace.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *
     * // Create many Workspaces and only return the `id`
     * const workspaceWithIdOnly = await prisma.workspace.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     *
     */
    createManyAndReturn<T extends WorkspaceCreateManyAndReturnArgs>(
      args?: SelectSubset<T, WorkspaceCreateManyAndReturnArgs<ExtArgs>>,
    ): Prisma.PrismaPromise<
      $Result.GetResult<
        Prisma.$WorkspacePayload<ExtArgs>,
        T,
        "createManyAndReturn",
        GlobalOmitOptions
      >
    >;

    /**
     * Delete a Workspace.
     * @param {WorkspaceDeleteArgs} args - Arguments to delete one Workspace.
     * @example
     * // Delete one Workspace
     * const Workspace = await prisma.workspace.delete({
     *   where: {
     *     // ... filter to delete one Workspace
     *   }
     * })
     *
     */
    delete<T extends WorkspaceDeleteArgs>(
      args: SelectSubset<T, WorkspaceDeleteArgs<ExtArgs>>,
    ): Prisma__WorkspaceClient<
      $Result.GetResult<
        Prisma.$WorkspacePayload<ExtArgs>,
        T,
        "delete",
        GlobalOmitOptions
      >,
      never,
      ExtArgs,
      GlobalOmitOptions
    >;

    /**
     * Update one Workspace.
     * @param {WorkspaceUpdateArgs} args - Arguments to update one Workspace.
     * @example
     * // Update one Workspace
     * const workspace = await prisma.workspace.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     *
     */
    update<T extends WorkspaceUpdateArgs>(
      args: SelectSubset<T, WorkspaceUpdateArgs<ExtArgs>>,
    ): Prisma__WorkspaceClient<
      $Result.GetResult<
        Prisma.$WorkspacePayload<ExtArgs>,
        T,
        "update",
        GlobalOmitOptions
      >,
      never,
      ExtArgs,
      GlobalOmitOptions
    >;

    /**
     * Delete zero or more Workspaces.
     * @param {WorkspaceDeleteManyArgs} args - Arguments to filter Workspaces to delete.
     * @example
     * // Delete a few Workspaces
     * const { count } = await prisma.workspace.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     *
     */
    deleteMany<T extends WorkspaceDeleteManyArgs>(
      args?: SelectSubset<T, WorkspaceDeleteManyArgs<ExtArgs>>,
    ): Prisma.PrismaPromise<BatchPayload>;

    /**
     * Update zero or more Workspaces.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WorkspaceUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Workspaces
     * const workspace = await prisma.workspace.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     *
     */
    updateMany<T extends WorkspaceUpdateManyArgs>(
      args: SelectSubset<T, WorkspaceUpdateManyArgs<ExtArgs>>,
    ): Prisma.PrismaPromise<BatchPayload>;

    /**
     * Update zero or more Workspaces and returns the data updated in the database.
     * @param {WorkspaceUpdateManyAndReturnArgs} args - Arguments to update many Workspaces.
     * @example
     * // Update many Workspaces
     * const workspace = await prisma.workspace.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *
     * // Update zero or more Workspaces and only return the `id`
     * const workspaceWithIdOnly = await prisma.workspace.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     *
     */
    updateManyAndReturn<T extends WorkspaceUpdateManyAndReturnArgs>(
      args: SelectSubset<T, WorkspaceUpdateManyAndReturnArgs<ExtArgs>>,
    ): Prisma.PrismaPromise<
      $Result.GetResult<
        Prisma.$WorkspacePayload<ExtArgs>,
        T,
        "updateManyAndReturn",
        GlobalOmitOptions
      >
    >;

    /**
     * Create or update one Workspace.
     * @param {WorkspaceUpsertArgs} args - Arguments to update or create a Workspace.
     * @example
     * // Update or create a Workspace
     * const workspace = await prisma.workspace.upsert({
     *   create: {
     *     // ... data to create a Workspace
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Workspace we want to update
     *   }
     * })
     */
    upsert<T extends WorkspaceUpsertArgs>(
      args: SelectSubset<T, WorkspaceUpsertArgs<ExtArgs>>,
    ): Prisma__WorkspaceClient<
      $Result.GetResult<
        Prisma.$WorkspacePayload<ExtArgs>,
        T,
        "upsert",
        GlobalOmitOptions
      >,
      never,
      ExtArgs,
      GlobalOmitOptions
    >;

    /**
     * Count the number of Workspaces.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WorkspaceCountArgs} args - Arguments to filter Workspaces to count.
     * @example
     * // Count the number of Workspaces
     * const count = await prisma.workspace.count({
     *   where: {
     *     // ... the filter for the Workspaces we want to count
     *   }
     * })
     **/
    count<T extends WorkspaceCountArgs>(
      args?: Subset<T, WorkspaceCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<"select", any>
        ? T["select"] extends true
          ? number
          : GetScalarType<T["select"], WorkspaceCountAggregateOutputType>
        : number
    >;

    /**
     * Allows you to perform aggregations operations on a Workspace.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WorkspaceAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
     **/
    aggregate<T extends WorkspaceAggregateArgs>(
      args: Subset<T, WorkspaceAggregateArgs>,
    ): Prisma.PrismaPromise<GetWorkspaceAggregateType<T>>;

    /**
     * Group by Workspace.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WorkspaceGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     *
     **/
    groupBy<
      T extends WorkspaceGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<"skip", Keys<T>>,
        Extends<"take", Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: WorkspaceGroupByArgs["orderBy"] }
        : { orderBy?: WorkspaceGroupByArgs["orderBy"] },
      OrderFields extends ExcludeUnderscoreKeys<
        Keys<MaybeTupleToUnion<T["orderBy"]>>
      >,
      ByFields extends MaybeTupleToUnion<T["by"]>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T["having"]>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T["by"] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
        ? `Error: "by" must not be empty.`
        : HavingValid extends False
          ? {
              [P in HavingFields]: P extends ByFields
                ? never
                : P extends string
                  ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
                  : [
                      Error,
                      "Field ",
                      P,
                      ` in "having" needs to be provided in "by"`,
                    ];
            }[HavingFields]
          : "take" extends Keys<T>
            ? "orderBy" extends Keys<T>
              ? ByValid extends True
                ? {}
                : {
                    [P in OrderFields]: P extends ByFields
                      ? never
                      : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
                  }[OrderFields]
              : 'Error: If you provide "take", you also need to provide "orderBy"'
            : "skip" extends Keys<T>
              ? "orderBy" extends Keys<T>
                ? ByValid extends True
                  ? {}
                  : {
                      [P in OrderFields]: P extends ByFields
                        ? never
                        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
                    }[OrderFields]
                : 'Error: If you provide "skip", you also need to provide "orderBy"'
              : ByValid extends True
                ? {}
                : {
                    [P in OrderFields]: P extends ByFields
                      ? never
                      : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
                  }[OrderFields],
    >(
      args: SubsetIntersection<T, WorkspaceGroupByArgs, OrderByArg> &
        InputErrors,
    ): {} extends InputErrors
      ? GetWorkspaceGroupByPayload<T>
      : Prisma.PrismaPromise<InputErrors>;
    /**
     * Fields of the Workspace model
     */
    readonly fields: WorkspaceFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Workspace.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__WorkspaceClient<
    T,
    Null = never,
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
    GlobalOmitOptions = {},
  > extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise";
    members<T extends Workspace$membersArgs<ExtArgs> = {}>(
      args?: Subset<T, Workspace$membersArgs<ExtArgs>>,
    ): Prisma.PrismaPromise<
      | $Result.GetResult<
          Prisma.$WorkspaceMemberPayload<ExtArgs>,
          T,
          "findMany",
          GlobalOmitOptions
        >
      | Null
    >;
    projects<T extends Workspace$projectsArgs<ExtArgs> = {}>(
      args?: Subset<T, Workspace$projectsArgs<ExtArgs>>,
    ): Prisma.PrismaPromise<
      | $Result.GetResult<
          Prisma.$ProjectPayload<ExtArgs>,
          T,
          "findMany",
          GlobalOmitOptions
        >
      | Null
    >;
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(
      onfulfilled?:
        | ((value: T) => TResult1 | PromiseLike<TResult1>)
        | undefined
        | null,
      onrejected?:
        | ((reason: any) => TResult2 | PromiseLike<TResult2>)
        | undefined
        | null,
    ): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(
      onrejected?:
        | ((reason: any) => TResult | PromiseLike<TResult>)
        | undefined
        | null,
    ): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }

  /**
   * Fields of the Workspace model
   */
  interface WorkspaceFieldRefs {
    readonly id: FieldRef<"Workspace", "String">;
    readonly name: FieldRef<"Workspace", "String">;
    readonly createdAt: FieldRef<"Workspace", "DateTime">;
    readonly updatedAt: FieldRef<"Workspace", "DateTime">;
  }

  // Custom InputTypes
  /**
   * Workspace findUnique
   */
  export type WorkspaceFindUniqueArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * Select specific fields to fetch from the Workspace
     */
    select?: WorkspaceSelect<ExtArgs> | null;
    /**
     * Omit specific fields from the Workspace
     */
    omit?: WorkspaceOmit<ExtArgs> | null;
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkspaceInclude<ExtArgs> | null;
    /**
     * Filter, which Workspace to fetch.
     */
    where: WorkspaceWhereUniqueInput;
  };

  /**
   * Workspace findUniqueOrThrow
   */
  export type WorkspaceFindUniqueOrThrowArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * Select specific fields to fetch from the Workspace
     */
    select?: WorkspaceSelect<ExtArgs> | null;
    /**
     * Omit specific fields from the Workspace
     */
    omit?: WorkspaceOmit<ExtArgs> | null;
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkspaceInclude<ExtArgs> | null;
    /**
     * Filter, which Workspace to fetch.
     */
    where: WorkspaceWhereUniqueInput;
  };

  /**
   * Workspace findFirst
   */
  export type WorkspaceFindFirstArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * Select specific fields to fetch from the Workspace
     */
    select?: WorkspaceSelect<ExtArgs> | null;
    /**
     * Omit specific fields from the Workspace
     */
    omit?: WorkspaceOmit<ExtArgs> | null;
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkspaceInclude<ExtArgs> | null;
    /**
     * Filter, which Workspace to fetch.
     */
    where?: WorkspaceWhereInput;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     *
     * Determine the order of Workspaces to fetch.
     */
    orderBy?:
      | WorkspaceOrderByWithRelationInput
      | WorkspaceOrderByWithRelationInput[];
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     *
     * Sets the position for searching for Workspaces.
     */
    cursor?: WorkspaceWhereUniqueInput;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     *
     * Take `±n` Workspaces from the position of the cursor.
     */
    take?: number;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     *
     * Skip the first `n` Workspaces.
     */
    skip?: number;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     *
     * Filter by unique combinations of Workspaces.
     */
    distinct?: WorkspaceScalarFieldEnum | WorkspaceScalarFieldEnum[];
  };

  /**
   * Workspace findFirstOrThrow
   */
  export type WorkspaceFindFirstOrThrowArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * Select specific fields to fetch from the Workspace
     */
    select?: WorkspaceSelect<ExtArgs> | null;
    /**
     * Omit specific fields from the Workspace
     */
    omit?: WorkspaceOmit<ExtArgs> | null;
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkspaceInclude<ExtArgs> | null;
    /**
     * Filter, which Workspace to fetch.
     */
    where?: WorkspaceWhereInput;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     *
     * Determine the order of Workspaces to fetch.
     */
    orderBy?:
      | WorkspaceOrderByWithRelationInput
      | WorkspaceOrderByWithRelationInput[];
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     *
     * Sets the position for searching for Workspaces.
     */
    cursor?: WorkspaceWhereUniqueInput;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     *
     * Take `±n` Workspaces from the position of the cursor.
     */
    take?: number;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     *
     * Skip the first `n` Workspaces.
     */
    skip?: number;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     *
     * Filter by unique combinations of Workspaces.
     */
    distinct?: WorkspaceScalarFieldEnum | WorkspaceScalarFieldEnum[];
  };

  /**
   * Workspace findMany
   */
  export type WorkspaceFindManyArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * Select specific fields to fetch from the Workspace
     */
    select?: WorkspaceSelect<ExtArgs> | null;
    /**
     * Omit specific fields from the Workspace
     */
    omit?: WorkspaceOmit<ExtArgs> | null;
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkspaceInclude<ExtArgs> | null;
    /**
     * Filter, which Workspaces to fetch.
     */
    where?: WorkspaceWhereInput;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     *
     * Determine the order of Workspaces to fetch.
     */
    orderBy?:
      | WorkspaceOrderByWithRelationInput
      | WorkspaceOrderByWithRelationInput[];
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     *
     * Sets the position for listing Workspaces.
     */
    cursor?: WorkspaceWhereUniqueInput;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     *
     * Take `±n` Workspaces from the position of the cursor.
     */
    take?: number;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     *
     * Skip the first `n` Workspaces.
     */
    skip?: number;
    distinct?: WorkspaceScalarFieldEnum | WorkspaceScalarFieldEnum[];
  };

  /**
   * Workspace create
   */
  export type WorkspaceCreateArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * Select specific fields to fetch from the Workspace
     */
    select?: WorkspaceSelect<ExtArgs> | null;
    /**
     * Omit specific fields from the Workspace
     */
    omit?: WorkspaceOmit<ExtArgs> | null;
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkspaceInclude<ExtArgs> | null;
    /**
     * The data needed to create a Workspace.
     */
    data: XOR<WorkspaceCreateInput, WorkspaceUncheckedCreateInput>;
  };

  /**
   * Workspace createMany
   */
  export type WorkspaceCreateManyArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * The data used to create many Workspaces.
     */
    data: WorkspaceCreateManyInput | WorkspaceCreateManyInput[];
    skipDuplicates?: boolean;
  };

  /**
   * Workspace createManyAndReturn
   */
  export type WorkspaceCreateManyAndReturnArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * Select specific fields to fetch from the Workspace
     */
    select?: WorkspaceSelectCreateManyAndReturn<ExtArgs> | null;
    /**
     * Omit specific fields from the Workspace
     */
    omit?: WorkspaceOmit<ExtArgs> | null;
    /**
     * The data used to create many Workspaces.
     */
    data: WorkspaceCreateManyInput | WorkspaceCreateManyInput[];
    skipDuplicates?: boolean;
  };

  /**
   * Workspace update
   */
  export type WorkspaceUpdateArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * Select specific fields to fetch from the Workspace
     */
    select?: WorkspaceSelect<ExtArgs> | null;
    /**
     * Omit specific fields from the Workspace
     */
    omit?: WorkspaceOmit<ExtArgs> | null;
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkspaceInclude<ExtArgs> | null;
    /**
     * The data needed to update a Workspace.
     */
    data: XOR<WorkspaceUpdateInput, WorkspaceUncheckedUpdateInput>;
    /**
     * Choose, which Workspace to update.
     */
    where: WorkspaceWhereUniqueInput;
  };

  /**
   * Workspace updateMany
   */
  export type WorkspaceUpdateManyArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * The data used to update Workspaces.
     */
    data: XOR<
      WorkspaceUpdateManyMutationInput,
      WorkspaceUncheckedUpdateManyInput
    >;
    /**
     * Filter which Workspaces to update
     */
    where?: WorkspaceWhereInput;
    /**
     * Limit how many Workspaces to update.
     */
    limit?: number;
  };

  /**
   * Workspace updateManyAndReturn
   */
  export type WorkspaceUpdateManyAndReturnArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * Select specific fields to fetch from the Workspace
     */
    select?: WorkspaceSelectUpdateManyAndReturn<ExtArgs> | null;
    /**
     * Omit specific fields from the Workspace
     */
    omit?: WorkspaceOmit<ExtArgs> | null;
    /**
     * The data used to update Workspaces.
     */
    data: XOR<
      WorkspaceUpdateManyMutationInput,
      WorkspaceUncheckedUpdateManyInput
    >;
    /**
     * Filter which Workspaces to update
     */
    where?: WorkspaceWhereInput;
    /**
     * Limit how many Workspaces to update.
     */
    limit?: number;
  };

  /**
   * Workspace upsert
   */
  export type WorkspaceUpsertArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * Select specific fields to fetch from the Workspace
     */
    select?: WorkspaceSelect<ExtArgs> | null;
    /**
     * Omit specific fields from the Workspace
     */
    omit?: WorkspaceOmit<ExtArgs> | null;
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkspaceInclude<ExtArgs> | null;
    /**
     * The filter to search for the Workspace to update in case it exists.
     */
    where: WorkspaceWhereUniqueInput;
    /**
     * In case the Workspace found by the `where` argument doesn't exist, create a new Workspace with this data.
     */
    create: XOR<WorkspaceCreateInput, WorkspaceUncheckedCreateInput>;
    /**
     * In case the Workspace was found with the provided `where` argument, update it with this data.
     */
    update: XOR<WorkspaceUpdateInput, WorkspaceUncheckedUpdateInput>;
  };

  /**
   * Workspace delete
   */
  export type WorkspaceDeleteArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * Select specific fields to fetch from the Workspace
     */
    select?: WorkspaceSelect<ExtArgs> | null;
    /**
     * Omit specific fields from the Workspace
     */
    omit?: WorkspaceOmit<ExtArgs> | null;
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkspaceInclude<ExtArgs> | null;
    /**
     * Filter which Workspace to delete.
     */
    where: WorkspaceWhereUniqueInput;
  };

  /**
   * Workspace deleteMany
   */
  export type WorkspaceDeleteManyArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * Filter which Workspaces to delete
     */
    where?: WorkspaceWhereInput;
    /**
     * Limit how many Workspaces to delete.
     */
    limit?: number;
  };

  /**
   * Workspace.members
   */
  export type Workspace$membersArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * Select specific fields to fetch from the WorkspaceMember
     */
    select?: WorkspaceMemberSelect<ExtArgs> | null;
    /**
     * Omit specific fields from the WorkspaceMember
     */
    omit?: WorkspaceMemberOmit<ExtArgs> | null;
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkspaceMemberInclude<ExtArgs> | null;
    where?: WorkspaceMemberWhereInput;
    orderBy?:
      | WorkspaceMemberOrderByWithRelationInput
      | WorkspaceMemberOrderByWithRelationInput[];
    cursor?: WorkspaceMemberWhereUniqueInput;
    take?: number;
    skip?: number;
    distinct?:
      | WorkspaceMemberScalarFieldEnum
      | WorkspaceMemberScalarFieldEnum[];
  };

  /**
   * Workspace.projects
   */
  export type Workspace$projectsArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * Select specific fields to fetch from the Project
     */
    select?: ProjectSelect<ExtArgs> | null;
    /**
     * Omit specific fields from the Project
     */
    omit?: ProjectOmit<ExtArgs> | null;
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProjectInclude<ExtArgs> | null;
    where?: ProjectWhereInput;
    orderBy?:
      | ProjectOrderByWithRelationInput
      | ProjectOrderByWithRelationInput[];
    cursor?: ProjectWhereUniqueInput;
    take?: number;
    skip?: number;
    distinct?: ProjectScalarFieldEnum | ProjectScalarFieldEnum[];
  };

  /**
   * Workspace without action
   */
  export type WorkspaceDefaultArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * Select specific fields to fetch from the Workspace
     */
    select?: WorkspaceSelect<ExtArgs> | null;
    /**
     * Omit specific fields from the Workspace
     */
    omit?: WorkspaceOmit<ExtArgs> | null;
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkspaceInclude<ExtArgs> | null;
  };

  /**
   * Model WorkspaceMember
   */

  export type AggregateWorkspaceMember = {
    _count: WorkspaceMemberCountAggregateOutputType | null;
    _min: WorkspaceMemberMinAggregateOutputType | null;
    _max: WorkspaceMemberMaxAggregateOutputType | null;
  };

  export type WorkspaceMemberMinAggregateOutputType = {
    id: string | null;
    workspaceId: string | null;
    userId: string | null;
    role: $Enums.UserRole | null;
    joinedAt: Date | null;
  };

  export type WorkspaceMemberMaxAggregateOutputType = {
    id: string | null;
    workspaceId: string | null;
    userId: string | null;
    role: $Enums.UserRole | null;
    joinedAt: Date | null;
  };

  export type WorkspaceMemberCountAggregateOutputType = {
    id: number;
    workspaceId: number;
    userId: number;
    role: number;
    joinedAt: number;
    _all: number;
  };

  export type WorkspaceMemberMinAggregateInputType = {
    id?: true;
    workspaceId?: true;
    userId?: true;
    role?: true;
    joinedAt?: true;
  };

  export type WorkspaceMemberMaxAggregateInputType = {
    id?: true;
    workspaceId?: true;
    userId?: true;
    role?: true;
    joinedAt?: true;
  };

  export type WorkspaceMemberCountAggregateInputType = {
    id?: true;
    workspaceId?: true;
    userId?: true;
    role?: true;
    joinedAt?: true;
    _all?: true;
  };

  export type WorkspaceMemberAggregateArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * Filter which WorkspaceMember to aggregate.
     */
    where?: WorkspaceMemberWhereInput;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     *
     * Determine the order of WorkspaceMembers to fetch.
     */
    orderBy?:
      | WorkspaceMemberOrderByWithRelationInput
      | WorkspaceMemberOrderByWithRelationInput[];
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     *
     * Sets the start position
     */
    cursor?: WorkspaceMemberWhereUniqueInput;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     *
     * Take `±n` WorkspaceMembers from the position of the cursor.
     */
    take?: number;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     *
     * Skip the first `n` WorkspaceMembers.
     */
    skip?: number;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     *
     * Count returned WorkspaceMembers
     **/
    _count?: true | WorkspaceMemberCountAggregateInputType;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     *
     * Select which fields to find the minimum value
     **/
    _min?: WorkspaceMemberMinAggregateInputType;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     *
     * Select which fields to find the maximum value
     **/
    _max?: WorkspaceMemberMaxAggregateInputType;
  };

  export type GetWorkspaceMemberAggregateType<
    T extends WorkspaceMemberAggregateArgs,
  > = {
    [P in keyof T & keyof AggregateWorkspaceMember]: P extends
      | "_count"
      | "count"
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateWorkspaceMember[P]>
      : GetScalarType<T[P], AggregateWorkspaceMember[P]>;
  };

  export type WorkspaceMemberGroupByArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    where?: WorkspaceMemberWhereInput;
    orderBy?:
      | WorkspaceMemberOrderByWithAggregationInput
      | WorkspaceMemberOrderByWithAggregationInput[];
    by: WorkspaceMemberScalarFieldEnum[] | WorkspaceMemberScalarFieldEnum;
    having?: WorkspaceMemberScalarWhereWithAggregatesInput;
    take?: number;
    skip?: number;
    _count?: WorkspaceMemberCountAggregateInputType | true;
    _min?: WorkspaceMemberMinAggregateInputType;
    _max?: WorkspaceMemberMaxAggregateInputType;
  };

  export type WorkspaceMemberGroupByOutputType = {
    id: string;
    workspaceId: string;
    userId: string;
    role: $Enums.UserRole;
    joinedAt: Date;
    _count: WorkspaceMemberCountAggregateOutputType | null;
    _min: WorkspaceMemberMinAggregateOutputType | null;
    _max: WorkspaceMemberMaxAggregateOutputType | null;
  };

  type GetWorkspaceMemberGroupByPayload<T extends WorkspaceMemberGroupByArgs> =
    Prisma.PrismaPromise<
      Array<
        PickEnumerable<WorkspaceMemberGroupByOutputType, T["by"]> & {
          [P in keyof T &
            keyof WorkspaceMemberGroupByOutputType]: P extends "_count"
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], WorkspaceMemberGroupByOutputType[P]>
            : GetScalarType<T[P], WorkspaceMemberGroupByOutputType[P]>;
        }
      >
    >;

  export type WorkspaceMemberSelect<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = $Extensions.GetSelect<
    {
      id?: boolean;
      workspaceId?: boolean;
      userId?: boolean;
      role?: boolean;
      joinedAt?: boolean;
      workspace?: boolean | WorkspaceDefaultArgs<ExtArgs>;
      user?: boolean | UserDefaultArgs<ExtArgs>;
    },
    ExtArgs["result"]["workspaceMember"]
  >;

  export type WorkspaceMemberSelectCreateManyAndReturn<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = $Extensions.GetSelect<
    {
      id?: boolean;
      workspaceId?: boolean;
      userId?: boolean;
      role?: boolean;
      joinedAt?: boolean;
      workspace?: boolean | WorkspaceDefaultArgs<ExtArgs>;
      user?: boolean | UserDefaultArgs<ExtArgs>;
    },
    ExtArgs["result"]["workspaceMember"]
  >;

  export type WorkspaceMemberSelectUpdateManyAndReturn<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = $Extensions.GetSelect<
    {
      id?: boolean;
      workspaceId?: boolean;
      userId?: boolean;
      role?: boolean;
      joinedAt?: boolean;
      workspace?: boolean | WorkspaceDefaultArgs<ExtArgs>;
      user?: boolean | UserDefaultArgs<ExtArgs>;
    },
    ExtArgs["result"]["workspaceMember"]
  >;

  export type WorkspaceMemberSelectScalar = {
    id?: boolean;
    workspaceId?: boolean;
    userId?: boolean;
    role?: boolean;
    joinedAt?: boolean;
  };

  export type WorkspaceMemberOmit<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = $Extensions.GetOmit<
    "id" | "workspaceId" | "userId" | "role" | "joinedAt",
    ExtArgs["result"]["workspaceMember"]
  >;
  export type WorkspaceMemberInclude<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    workspace?: boolean | WorkspaceDefaultArgs<ExtArgs>;
    user?: boolean | UserDefaultArgs<ExtArgs>;
  };
  export type WorkspaceMemberIncludeCreateManyAndReturn<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    workspace?: boolean | WorkspaceDefaultArgs<ExtArgs>;
    user?: boolean | UserDefaultArgs<ExtArgs>;
  };
  export type WorkspaceMemberIncludeUpdateManyAndReturn<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    workspace?: boolean | WorkspaceDefaultArgs<ExtArgs>;
    user?: boolean | UserDefaultArgs<ExtArgs>;
  };

  export type $WorkspaceMemberPayload<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    name: "WorkspaceMember";
    objects: {
      workspace: Prisma.$WorkspacePayload<ExtArgs>;
      user: Prisma.$UserPayload<ExtArgs>;
    };
    scalars: $Extensions.GetPayloadResult<
      {
        id: string;
        workspaceId: string;
        userId: string;
        role: $Enums.UserRole;
        joinedAt: Date;
      },
      ExtArgs["result"]["workspaceMember"]
    >;
    composites: {};
  };

  type WorkspaceMemberGetPayload<
    S extends boolean | null | undefined | WorkspaceMemberDefaultArgs,
  > = $Result.GetResult<Prisma.$WorkspaceMemberPayload, S>;

  type WorkspaceMemberCountArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = Omit<
    WorkspaceMemberFindManyArgs,
    "select" | "include" | "distinct" | "omit"
  > & {
    select?: WorkspaceMemberCountAggregateInputType | true;
  };

  export interface WorkspaceMemberDelegate<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
    GlobalOmitOptions = {},
  > {
    [K: symbol]: {
      types: Prisma.TypeMap<ExtArgs>["model"]["WorkspaceMember"];
      meta: { name: "WorkspaceMember" };
    };
    /**
     * Find zero or one WorkspaceMember that matches the filter.
     * @param {WorkspaceMemberFindUniqueArgs} args - Arguments to find a WorkspaceMember
     * @example
     * // Get one WorkspaceMember
     * const workspaceMember = await prisma.workspaceMember.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends WorkspaceMemberFindUniqueArgs>(
      args: SelectSubset<T, WorkspaceMemberFindUniqueArgs<ExtArgs>>,
    ): Prisma__WorkspaceMemberClient<
      $Result.GetResult<
        Prisma.$WorkspaceMemberPayload<ExtArgs>,
        T,
        "findUnique",
        GlobalOmitOptions
      > | null,
      null,
      ExtArgs,
      GlobalOmitOptions
    >;

    /**
     * Find one WorkspaceMember that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {WorkspaceMemberFindUniqueOrThrowArgs} args - Arguments to find a WorkspaceMember
     * @example
     * // Get one WorkspaceMember
     * const workspaceMember = await prisma.workspaceMember.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends WorkspaceMemberFindUniqueOrThrowArgs>(
      args: SelectSubset<T, WorkspaceMemberFindUniqueOrThrowArgs<ExtArgs>>,
    ): Prisma__WorkspaceMemberClient<
      $Result.GetResult<
        Prisma.$WorkspaceMemberPayload<ExtArgs>,
        T,
        "findUniqueOrThrow",
        GlobalOmitOptions
      >,
      never,
      ExtArgs,
      GlobalOmitOptions
    >;

    /**
     * Find the first WorkspaceMember that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WorkspaceMemberFindFirstArgs} args - Arguments to find a WorkspaceMember
     * @example
     * // Get one WorkspaceMember
     * const workspaceMember = await prisma.workspaceMember.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends WorkspaceMemberFindFirstArgs>(
      args?: SelectSubset<T, WorkspaceMemberFindFirstArgs<ExtArgs>>,
    ): Prisma__WorkspaceMemberClient<
      $Result.GetResult<
        Prisma.$WorkspaceMemberPayload<ExtArgs>,
        T,
        "findFirst",
        GlobalOmitOptions
      > | null,
      null,
      ExtArgs,
      GlobalOmitOptions
    >;

    /**
     * Find the first WorkspaceMember that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WorkspaceMemberFindFirstOrThrowArgs} args - Arguments to find a WorkspaceMember
     * @example
     * // Get one WorkspaceMember
     * const workspaceMember = await prisma.workspaceMember.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends WorkspaceMemberFindFirstOrThrowArgs>(
      args?: SelectSubset<T, WorkspaceMemberFindFirstOrThrowArgs<ExtArgs>>,
    ): Prisma__WorkspaceMemberClient<
      $Result.GetResult<
        Prisma.$WorkspaceMemberPayload<ExtArgs>,
        T,
        "findFirstOrThrow",
        GlobalOmitOptions
      >,
      never,
      ExtArgs,
      GlobalOmitOptions
    >;

    /**
     * Find zero or more WorkspaceMembers that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WorkspaceMemberFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all WorkspaceMembers
     * const workspaceMembers = await prisma.workspaceMember.findMany()
     *
     * // Get first 10 WorkspaceMembers
     * const workspaceMembers = await prisma.workspaceMember.findMany({ take: 10 })
     *
     * // Only select the `id`
     * const workspaceMemberWithIdOnly = await prisma.workspaceMember.findMany({ select: { id: true } })
     *
     */
    findMany<T extends WorkspaceMemberFindManyArgs>(
      args?: SelectSubset<T, WorkspaceMemberFindManyArgs<ExtArgs>>,
    ): Prisma.PrismaPromise<
      $Result.GetResult<
        Prisma.$WorkspaceMemberPayload<ExtArgs>,
        T,
        "findMany",
        GlobalOmitOptions
      >
    >;

    /**
     * Create a WorkspaceMember.
     * @param {WorkspaceMemberCreateArgs} args - Arguments to create a WorkspaceMember.
     * @example
     * // Create one WorkspaceMember
     * const WorkspaceMember = await prisma.workspaceMember.create({
     *   data: {
     *     // ... data to create a WorkspaceMember
     *   }
     * })
     *
     */
    create<T extends WorkspaceMemberCreateArgs>(
      args: SelectSubset<T, WorkspaceMemberCreateArgs<ExtArgs>>,
    ): Prisma__WorkspaceMemberClient<
      $Result.GetResult<
        Prisma.$WorkspaceMemberPayload<ExtArgs>,
        T,
        "create",
        GlobalOmitOptions
      >,
      never,
      ExtArgs,
      GlobalOmitOptions
    >;

    /**
     * Create many WorkspaceMembers.
     * @param {WorkspaceMemberCreateManyArgs} args - Arguments to create many WorkspaceMembers.
     * @example
     * // Create many WorkspaceMembers
     * const workspaceMember = await prisma.workspaceMember.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *
     */
    createMany<T extends WorkspaceMemberCreateManyArgs>(
      args?: SelectSubset<T, WorkspaceMemberCreateManyArgs<ExtArgs>>,
    ): Prisma.PrismaPromise<BatchPayload>;

    /**
     * Create many WorkspaceMembers and returns the data saved in the database.
     * @param {WorkspaceMemberCreateManyAndReturnArgs} args - Arguments to create many WorkspaceMembers.
     * @example
     * // Create many WorkspaceMembers
     * const workspaceMember = await prisma.workspaceMember.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *
     * // Create many WorkspaceMembers and only return the `id`
     * const workspaceMemberWithIdOnly = await prisma.workspaceMember.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     *
     */
    createManyAndReturn<T extends WorkspaceMemberCreateManyAndReturnArgs>(
      args?: SelectSubset<T, WorkspaceMemberCreateManyAndReturnArgs<ExtArgs>>,
    ): Prisma.PrismaPromise<
      $Result.GetResult<
        Prisma.$WorkspaceMemberPayload<ExtArgs>,
        T,
        "createManyAndReturn",
        GlobalOmitOptions
      >
    >;

    /**
     * Delete a WorkspaceMember.
     * @param {WorkspaceMemberDeleteArgs} args - Arguments to delete one WorkspaceMember.
     * @example
     * // Delete one WorkspaceMember
     * const WorkspaceMember = await prisma.workspaceMember.delete({
     *   where: {
     *     // ... filter to delete one WorkspaceMember
     *   }
     * })
     *
     */
    delete<T extends WorkspaceMemberDeleteArgs>(
      args: SelectSubset<T, WorkspaceMemberDeleteArgs<ExtArgs>>,
    ): Prisma__WorkspaceMemberClient<
      $Result.GetResult<
        Prisma.$WorkspaceMemberPayload<ExtArgs>,
        T,
        "delete",
        GlobalOmitOptions
      >,
      never,
      ExtArgs,
      GlobalOmitOptions
    >;

    /**
     * Update one WorkspaceMember.
     * @param {WorkspaceMemberUpdateArgs} args - Arguments to update one WorkspaceMember.
     * @example
     * // Update one WorkspaceMember
     * const workspaceMember = await prisma.workspaceMember.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     *
     */
    update<T extends WorkspaceMemberUpdateArgs>(
      args: SelectSubset<T, WorkspaceMemberUpdateArgs<ExtArgs>>,
    ): Prisma__WorkspaceMemberClient<
      $Result.GetResult<
        Prisma.$WorkspaceMemberPayload<ExtArgs>,
        T,
        "update",
        GlobalOmitOptions
      >,
      never,
      ExtArgs,
      GlobalOmitOptions
    >;

    /**
     * Delete zero or more WorkspaceMembers.
     * @param {WorkspaceMemberDeleteManyArgs} args - Arguments to filter WorkspaceMembers to delete.
     * @example
     * // Delete a few WorkspaceMembers
     * const { count } = await prisma.workspaceMember.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     *
     */
    deleteMany<T extends WorkspaceMemberDeleteManyArgs>(
      args?: SelectSubset<T, WorkspaceMemberDeleteManyArgs<ExtArgs>>,
    ): Prisma.PrismaPromise<BatchPayload>;

    /**
     * Update zero or more WorkspaceMembers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WorkspaceMemberUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many WorkspaceMembers
     * const workspaceMember = await prisma.workspaceMember.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     *
     */
    updateMany<T extends WorkspaceMemberUpdateManyArgs>(
      args: SelectSubset<T, WorkspaceMemberUpdateManyArgs<ExtArgs>>,
    ): Prisma.PrismaPromise<BatchPayload>;

    /**
     * Update zero or more WorkspaceMembers and returns the data updated in the database.
     * @param {WorkspaceMemberUpdateManyAndReturnArgs} args - Arguments to update many WorkspaceMembers.
     * @example
     * // Update many WorkspaceMembers
     * const workspaceMember = await prisma.workspaceMember.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *
     * // Update zero or more WorkspaceMembers and only return the `id`
     * const workspaceMemberWithIdOnly = await prisma.workspaceMember.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     *
     */
    updateManyAndReturn<T extends WorkspaceMemberUpdateManyAndReturnArgs>(
      args: SelectSubset<T, WorkspaceMemberUpdateManyAndReturnArgs<ExtArgs>>,
    ): Prisma.PrismaPromise<
      $Result.GetResult<
        Prisma.$WorkspaceMemberPayload<ExtArgs>,
        T,
        "updateManyAndReturn",
        GlobalOmitOptions
      >
    >;

    /**
     * Create or update one WorkspaceMember.
     * @param {WorkspaceMemberUpsertArgs} args - Arguments to update or create a WorkspaceMember.
     * @example
     * // Update or create a WorkspaceMember
     * const workspaceMember = await prisma.workspaceMember.upsert({
     *   create: {
     *     // ... data to create a WorkspaceMember
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the WorkspaceMember we want to update
     *   }
     * })
     */
    upsert<T extends WorkspaceMemberUpsertArgs>(
      args: SelectSubset<T, WorkspaceMemberUpsertArgs<ExtArgs>>,
    ): Prisma__WorkspaceMemberClient<
      $Result.GetResult<
        Prisma.$WorkspaceMemberPayload<ExtArgs>,
        T,
        "upsert",
        GlobalOmitOptions
      >,
      never,
      ExtArgs,
      GlobalOmitOptions
    >;

    /**
     * Count the number of WorkspaceMembers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WorkspaceMemberCountArgs} args - Arguments to filter WorkspaceMembers to count.
     * @example
     * // Count the number of WorkspaceMembers
     * const count = await prisma.workspaceMember.count({
     *   where: {
     *     // ... the filter for the WorkspaceMembers we want to count
     *   }
     * })
     **/
    count<T extends WorkspaceMemberCountArgs>(
      args?: Subset<T, WorkspaceMemberCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<"select", any>
        ? T["select"] extends true
          ? number
          : GetScalarType<T["select"], WorkspaceMemberCountAggregateOutputType>
        : number
    >;

    /**
     * Allows you to perform aggregations operations on a WorkspaceMember.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WorkspaceMemberAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
     **/
    aggregate<T extends WorkspaceMemberAggregateArgs>(
      args: Subset<T, WorkspaceMemberAggregateArgs>,
    ): Prisma.PrismaPromise<GetWorkspaceMemberAggregateType<T>>;

    /**
     * Group by WorkspaceMember.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WorkspaceMemberGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     *
     **/
    groupBy<
      T extends WorkspaceMemberGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<"skip", Keys<T>>,
        Extends<"take", Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: WorkspaceMemberGroupByArgs["orderBy"] }
        : { orderBy?: WorkspaceMemberGroupByArgs["orderBy"] },
      OrderFields extends ExcludeUnderscoreKeys<
        Keys<MaybeTupleToUnion<T["orderBy"]>>
      >,
      ByFields extends MaybeTupleToUnion<T["by"]>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T["having"]>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T["by"] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
        ? `Error: "by" must not be empty.`
        : HavingValid extends False
          ? {
              [P in HavingFields]: P extends ByFields
                ? never
                : P extends string
                  ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
                  : [
                      Error,
                      "Field ",
                      P,
                      ` in "having" needs to be provided in "by"`,
                    ];
            }[HavingFields]
          : "take" extends Keys<T>
            ? "orderBy" extends Keys<T>
              ? ByValid extends True
                ? {}
                : {
                    [P in OrderFields]: P extends ByFields
                      ? never
                      : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
                  }[OrderFields]
              : 'Error: If you provide "take", you also need to provide "orderBy"'
            : "skip" extends Keys<T>
              ? "orderBy" extends Keys<T>
                ? ByValid extends True
                  ? {}
                  : {
                      [P in OrderFields]: P extends ByFields
                        ? never
                        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
                    }[OrderFields]
                : 'Error: If you provide "skip", you also need to provide "orderBy"'
              : ByValid extends True
                ? {}
                : {
                    [P in OrderFields]: P extends ByFields
                      ? never
                      : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
                  }[OrderFields],
    >(
      args: SubsetIntersection<T, WorkspaceMemberGroupByArgs, OrderByArg> &
        InputErrors,
    ): {} extends InputErrors
      ? GetWorkspaceMemberGroupByPayload<T>
      : Prisma.PrismaPromise<InputErrors>;
    /**
     * Fields of the WorkspaceMember model
     */
    readonly fields: WorkspaceMemberFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for WorkspaceMember.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__WorkspaceMemberClient<
    T,
    Null = never,
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
    GlobalOmitOptions = {},
  > extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise";
    workspace<T extends WorkspaceDefaultArgs<ExtArgs> = {}>(
      args?: Subset<T, WorkspaceDefaultArgs<ExtArgs>>,
    ): Prisma__WorkspaceClient<
      | $Result.GetResult<
          Prisma.$WorkspacePayload<ExtArgs>,
          T,
          "findUniqueOrThrow",
          GlobalOmitOptions
        >
      | Null,
      Null,
      ExtArgs,
      GlobalOmitOptions
    >;
    user<T extends UserDefaultArgs<ExtArgs> = {}>(
      args?: Subset<T, UserDefaultArgs<ExtArgs>>,
    ): Prisma__UserClient<
      | $Result.GetResult<
          Prisma.$UserPayload<ExtArgs>,
          T,
          "findUniqueOrThrow",
          GlobalOmitOptions
        >
      | Null,
      Null,
      ExtArgs,
      GlobalOmitOptions
    >;
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(
      onfulfilled?:
        | ((value: T) => TResult1 | PromiseLike<TResult1>)
        | undefined
        | null,
      onrejected?:
        | ((reason: any) => TResult2 | PromiseLike<TResult2>)
        | undefined
        | null,
    ): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(
      onrejected?:
        | ((reason: any) => TResult | PromiseLike<TResult>)
        | undefined
        | null,
    ): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }

  /**
   * Fields of the WorkspaceMember model
   */
  interface WorkspaceMemberFieldRefs {
    readonly id: FieldRef<"WorkspaceMember", "String">;
    readonly workspaceId: FieldRef<"WorkspaceMember", "String">;
    readonly userId: FieldRef<"WorkspaceMember", "String">;
    readonly role: FieldRef<"WorkspaceMember", "UserRole">;
    readonly joinedAt: FieldRef<"WorkspaceMember", "DateTime">;
  }

  // Custom InputTypes
  /**
   * WorkspaceMember findUnique
   */
  export type WorkspaceMemberFindUniqueArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * Select specific fields to fetch from the WorkspaceMember
     */
    select?: WorkspaceMemberSelect<ExtArgs> | null;
    /**
     * Omit specific fields from the WorkspaceMember
     */
    omit?: WorkspaceMemberOmit<ExtArgs> | null;
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkspaceMemberInclude<ExtArgs> | null;
    /**
     * Filter, which WorkspaceMember to fetch.
     */
    where: WorkspaceMemberWhereUniqueInput;
  };

  /**
   * WorkspaceMember findUniqueOrThrow
   */
  export type WorkspaceMemberFindUniqueOrThrowArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * Select specific fields to fetch from the WorkspaceMember
     */
    select?: WorkspaceMemberSelect<ExtArgs> | null;
    /**
     * Omit specific fields from the WorkspaceMember
     */
    omit?: WorkspaceMemberOmit<ExtArgs> | null;
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkspaceMemberInclude<ExtArgs> | null;
    /**
     * Filter, which WorkspaceMember to fetch.
     */
    where: WorkspaceMemberWhereUniqueInput;
  };

  /**
   * WorkspaceMember findFirst
   */
  export type WorkspaceMemberFindFirstArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * Select specific fields to fetch from the WorkspaceMember
     */
    select?: WorkspaceMemberSelect<ExtArgs> | null;
    /**
     * Omit specific fields from the WorkspaceMember
     */
    omit?: WorkspaceMemberOmit<ExtArgs> | null;
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkspaceMemberInclude<ExtArgs> | null;
    /**
     * Filter, which WorkspaceMember to fetch.
     */
    where?: WorkspaceMemberWhereInput;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     *
     * Determine the order of WorkspaceMembers to fetch.
     */
    orderBy?:
      | WorkspaceMemberOrderByWithRelationInput
      | WorkspaceMemberOrderByWithRelationInput[];
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     *
     * Sets the position for searching for WorkspaceMembers.
     */
    cursor?: WorkspaceMemberWhereUniqueInput;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     *
     * Take `±n` WorkspaceMembers from the position of the cursor.
     */
    take?: number;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     *
     * Skip the first `n` WorkspaceMembers.
     */
    skip?: number;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     *
     * Filter by unique combinations of WorkspaceMembers.
     */
    distinct?:
      | WorkspaceMemberScalarFieldEnum
      | WorkspaceMemberScalarFieldEnum[];
  };

  /**
   * WorkspaceMember findFirstOrThrow
   */
  export type WorkspaceMemberFindFirstOrThrowArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * Select specific fields to fetch from the WorkspaceMember
     */
    select?: WorkspaceMemberSelect<ExtArgs> | null;
    /**
     * Omit specific fields from the WorkspaceMember
     */
    omit?: WorkspaceMemberOmit<ExtArgs> | null;
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkspaceMemberInclude<ExtArgs> | null;
    /**
     * Filter, which WorkspaceMember to fetch.
     */
    where?: WorkspaceMemberWhereInput;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     *
     * Determine the order of WorkspaceMembers to fetch.
     */
    orderBy?:
      | WorkspaceMemberOrderByWithRelationInput
      | WorkspaceMemberOrderByWithRelationInput[];
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     *
     * Sets the position for searching for WorkspaceMembers.
     */
    cursor?: WorkspaceMemberWhereUniqueInput;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     *
     * Take `±n` WorkspaceMembers from the position of the cursor.
     */
    take?: number;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     *
     * Skip the first `n` WorkspaceMembers.
     */
    skip?: number;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     *
     * Filter by unique combinations of WorkspaceMembers.
     */
    distinct?:
      | WorkspaceMemberScalarFieldEnum
      | WorkspaceMemberScalarFieldEnum[];
  };

  /**
   * WorkspaceMember findMany
   */
  export type WorkspaceMemberFindManyArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * Select specific fields to fetch from the WorkspaceMember
     */
    select?: WorkspaceMemberSelect<ExtArgs> | null;
    /**
     * Omit specific fields from the WorkspaceMember
     */
    omit?: WorkspaceMemberOmit<ExtArgs> | null;
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkspaceMemberInclude<ExtArgs> | null;
    /**
     * Filter, which WorkspaceMembers to fetch.
     */
    where?: WorkspaceMemberWhereInput;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     *
     * Determine the order of WorkspaceMembers to fetch.
     */
    orderBy?:
      | WorkspaceMemberOrderByWithRelationInput
      | WorkspaceMemberOrderByWithRelationInput[];
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     *
     * Sets the position for listing WorkspaceMembers.
     */
    cursor?: WorkspaceMemberWhereUniqueInput;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     *
     * Take `±n` WorkspaceMembers from the position of the cursor.
     */
    take?: number;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     *
     * Skip the first `n` WorkspaceMembers.
     */
    skip?: number;
    distinct?:
      | WorkspaceMemberScalarFieldEnum
      | WorkspaceMemberScalarFieldEnum[];
  };

  /**
   * WorkspaceMember create
   */
  export type WorkspaceMemberCreateArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * Select specific fields to fetch from the WorkspaceMember
     */
    select?: WorkspaceMemberSelect<ExtArgs> | null;
    /**
     * Omit specific fields from the WorkspaceMember
     */
    omit?: WorkspaceMemberOmit<ExtArgs> | null;
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkspaceMemberInclude<ExtArgs> | null;
    /**
     * The data needed to create a WorkspaceMember.
     */
    data: XOR<WorkspaceMemberCreateInput, WorkspaceMemberUncheckedCreateInput>;
  };

  /**
   * WorkspaceMember createMany
   */
  export type WorkspaceMemberCreateManyArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * The data used to create many WorkspaceMembers.
     */
    data: WorkspaceMemberCreateManyInput | WorkspaceMemberCreateManyInput[];
    skipDuplicates?: boolean;
  };

  /**
   * WorkspaceMember createManyAndReturn
   */
  export type WorkspaceMemberCreateManyAndReturnArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * Select specific fields to fetch from the WorkspaceMember
     */
    select?: WorkspaceMemberSelectCreateManyAndReturn<ExtArgs> | null;
    /**
     * Omit specific fields from the WorkspaceMember
     */
    omit?: WorkspaceMemberOmit<ExtArgs> | null;
    /**
     * The data used to create many WorkspaceMembers.
     */
    data: WorkspaceMemberCreateManyInput | WorkspaceMemberCreateManyInput[];
    skipDuplicates?: boolean;
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkspaceMemberIncludeCreateManyAndReturn<ExtArgs> | null;
  };

  /**
   * WorkspaceMember update
   */
  export type WorkspaceMemberUpdateArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * Select specific fields to fetch from the WorkspaceMember
     */
    select?: WorkspaceMemberSelect<ExtArgs> | null;
    /**
     * Omit specific fields from the WorkspaceMember
     */
    omit?: WorkspaceMemberOmit<ExtArgs> | null;
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkspaceMemberInclude<ExtArgs> | null;
    /**
     * The data needed to update a WorkspaceMember.
     */
    data: XOR<WorkspaceMemberUpdateInput, WorkspaceMemberUncheckedUpdateInput>;
    /**
     * Choose, which WorkspaceMember to update.
     */
    where: WorkspaceMemberWhereUniqueInput;
  };

  /**
   * WorkspaceMember updateMany
   */
  export type WorkspaceMemberUpdateManyArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * The data used to update WorkspaceMembers.
     */
    data: XOR<
      WorkspaceMemberUpdateManyMutationInput,
      WorkspaceMemberUncheckedUpdateManyInput
    >;
    /**
     * Filter which WorkspaceMembers to update
     */
    where?: WorkspaceMemberWhereInput;
    /**
     * Limit how many WorkspaceMembers to update.
     */
    limit?: number;
  };

  /**
   * WorkspaceMember updateManyAndReturn
   */
  export type WorkspaceMemberUpdateManyAndReturnArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * Select specific fields to fetch from the WorkspaceMember
     */
    select?: WorkspaceMemberSelectUpdateManyAndReturn<ExtArgs> | null;
    /**
     * Omit specific fields from the WorkspaceMember
     */
    omit?: WorkspaceMemberOmit<ExtArgs> | null;
    /**
     * The data used to update WorkspaceMembers.
     */
    data: XOR<
      WorkspaceMemberUpdateManyMutationInput,
      WorkspaceMemberUncheckedUpdateManyInput
    >;
    /**
     * Filter which WorkspaceMembers to update
     */
    where?: WorkspaceMemberWhereInput;
    /**
     * Limit how many WorkspaceMembers to update.
     */
    limit?: number;
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkspaceMemberIncludeUpdateManyAndReturn<ExtArgs> | null;
  };

  /**
   * WorkspaceMember upsert
   */
  export type WorkspaceMemberUpsertArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * Select specific fields to fetch from the WorkspaceMember
     */
    select?: WorkspaceMemberSelect<ExtArgs> | null;
    /**
     * Omit specific fields from the WorkspaceMember
     */
    omit?: WorkspaceMemberOmit<ExtArgs> | null;
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkspaceMemberInclude<ExtArgs> | null;
    /**
     * The filter to search for the WorkspaceMember to update in case it exists.
     */
    where: WorkspaceMemberWhereUniqueInput;
    /**
     * In case the WorkspaceMember found by the `where` argument doesn't exist, create a new WorkspaceMember with this data.
     */
    create: XOR<
      WorkspaceMemberCreateInput,
      WorkspaceMemberUncheckedCreateInput
    >;
    /**
     * In case the WorkspaceMember was found with the provided `where` argument, update it with this data.
     */
    update: XOR<
      WorkspaceMemberUpdateInput,
      WorkspaceMemberUncheckedUpdateInput
    >;
  };

  /**
   * WorkspaceMember delete
   */
  export type WorkspaceMemberDeleteArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * Select specific fields to fetch from the WorkspaceMember
     */
    select?: WorkspaceMemberSelect<ExtArgs> | null;
    /**
     * Omit specific fields from the WorkspaceMember
     */
    omit?: WorkspaceMemberOmit<ExtArgs> | null;
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkspaceMemberInclude<ExtArgs> | null;
    /**
     * Filter which WorkspaceMember to delete.
     */
    where: WorkspaceMemberWhereUniqueInput;
  };

  /**
   * WorkspaceMember deleteMany
   */
  export type WorkspaceMemberDeleteManyArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * Filter which WorkspaceMembers to delete
     */
    where?: WorkspaceMemberWhereInput;
    /**
     * Limit how many WorkspaceMembers to delete.
     */
    limit?: number;
  };

  /**
   * WorkspaceMember without action
   */
  export type WorkspaceMemberDefaultArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * Select specific fields to fetch from the WorkspaceMember
     */
    select?: WorkspaceMemberSelect<ExtArgs> | null;
    /**
     * Omit specific fields from the WorkspaceMember
     */
    omit?: WorkspaceMemberOmit<ExtArgs> | null;
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkspaceMemberInclude<ExtArgs> | null;
  };

  /**
   * Model Project
   */

  export type AggregateProject = {
    _count: ProjectCountAggregateOutputType | null;
    _avg: ProjectAvgAggregateOutputType | null;
    _sum: ProjectSumAggregateOutputType | null;
    _min: ProjectMinAggregateOutputType | null;
    _max: ProjectMaxAggregateOutputType | null;
  };

  export type ProjectAvgAggregateOutputType = {
    progress: number | null;
  };

  export type ProjectSumAggregateOutputType = {
    progress: number | null;
  };

  export type ProjectMinAggregateOutputType = {
    id: string | null;
    name: string | null;
    description: string | null;
    key: string | null;
    status: $Enums.ProjectStatus | null;
    progress: number | null;
    createdAt: Date | null;
    updatedAt: Date | null;
    workspaceId: string | null;
  };

  export type ProjectMaxAggregateOutputType = {
    id: string | null;
    name: string | null;
    description: string | null;
    key: string | null;
    status: $Enums.ProjectStatus | null;
    progress: number | null;
    createdAt: Date | null;
    updatedAt: Date | null;
    workspaceId: string | null;
  };

  export type ProjectCountAggregateOutputType = {
    id: number;
    name: number;
    description: number;
    key: number;
    status: number;
    progress: number;
    createdAt: number;
    updatedAt: number;
    workspaceId: number;
    _all: number;
  };

  export type ProjectAvgAggregateInputType = {
    progress?: true;
  };

  export type ProjectSumAggregateInputType = {
    progress?: true;
  };

  export type ProjectMinAggregateInputType = {
    id?: true;
    name?: true;
    description?: true;
    key?: true;
    status?: true;
    progress?: true;
    createdAt?: true;
    updatedAt?: true;
    workspaceId?: true;
  };

  export type ProjectMaxAggregateInputType = {
    id?: true;
    name?: true;
    description?: true;
    key?: true;
    status?: true;
    progress?: true;
    createdAt?: true;
    updatedAt?: true;
    workspaceId?: true;
  };

  export type ProjectCountAggregateInputType = {
    id?: true;
    name?: true;
    description?: true;
    key?: true;
    status?: true;
    progress?: true;
    createdAt?: true;
    updatedAt?: true;
    workspaceId?: true;
    _all?: true;
  };

  export type ProjectAggregateArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * Filter which Project to aggregate.
     */
    where?: ProjectWhereInput;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     *
     * Determine the order of Projects to fetch.
     */
    orderBy?:
      | ProjectOrderByWithRelationInput
      | ProjectOrderByWithRelationInput[];
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     *
     * Sets the start position
     */
    cursor?: ProjectWhereUniqueInput;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     *
     * Take `±n` Projects from the position of the cursor.
     */
    take?: number;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     *
     * Skip the first `n` Projects.
     */
    skip?: number;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     *
     * Count returned Projects
     **/
    _count?: true | ProjectCountAggregateInputType;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     *
     * Select which fields to average
     **/
    _avg?: ProjectAvgAggregateInputType;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     *
     * Select which fields to sum
     **/
    _sum?: ProjectSumAggregateInputType;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     *
     * Select which fields to find the minimum value
     **/
    _min?: ProjectMinAggregateInputType;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     *
     * Select which fields to find the maximum value
     **/
    _max?: ProjectMaxAggregateInputType;
  };

  export type GetProjectAggregateType<T extends ProjectAggregateArgs> = {
    [P in keyof T & keyof AggregateProject]: P extends "_count" | "count"
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateProject[P]>
      : GetScalarType<T[P], AggregateProject[P]>;
  };

  export type ProjectGroupByArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    where?: ProjectWhereInput;
    orderBy?:
      | ProjectOrderByWithAggregationInput
      | ProjectOrderByWithAggregationInput[];
    by: ProjectScalarFieldEnum[] | ProjectScalarFieldEnum;
    having?: ProjectScalarWhereWithAggregatesInput;
    take?: number;
    skip?: number;
    _count?: ProjectCountAggregateInputType | true;
    _avg?: ProjectAvgAggregateInputType;
    _sum?: ProjectSumAggregateInputType;
    _min?: ProjectMinAggregateInputType;
    _max?: ProjectMaxAggregateInputType;
  };

  export type ProjectGroupByOutputType = {
    id: string;
    name: string;
    description: string | null;
    key: string;
    status: $Enums.ProjectStatus;
    progress: number;
    createdAt: Date;
    updatedAt: Date;
    workspaceId: string;
    _count: ProjectCountAggregateOutputType | null;
    _avg: ProjectAvgAggregateOutputType | null;
    _sum: ProjectSumAggregateOutputType | null;
    _min: ProjectMinAggregateOutputType | null;
    _max: ProjectMaxAggregateOutputType | null;
  };

  type GetProjectGroupByPayload<T extends ProjectGroupByArgs> =
    Prisma.PrismaPromise<
      Array<
        PickEnumerable<ProjectGroupByOutputType, T["by"]> & {
          [P in keyof T & keyof ProjectGroupByOutputType]: P extends "_count"
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ProjectGroupByOutputType[P]>
            : GetScalarType<T[P], ProjectGroupByOutputType[P]>;
        }
      >
    >;

  export type ProjectSelect<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = $Extensions.GetSelect<
    {
      id?: boolean;
      name?: boolean;
      description?: boolean;
      key?: boolean;
      status?: boolean;
      progress?: boolean;
      createdAt?: boolean;
      updatedAt?: boolean;
      workspaceId?: boolean;
      workspace?: boolean | WorkspaceDefaultArgs<ExtArgs>;
      tasks?: boolean | Project$tasksArgs<ExtArgs>;
      sprints?: boolean | Project$sprintsArgs<ExtArgs>;
      milestones?: boolean | Project$milestonesArgs<ExtArgs>;
      _count?: boolean | ProjectCountOutputTypeDefaultArgs<ExtArgs>;
    },
    ExtArgs["result"]["project"]
  >;

  export type ProjectSelectCreateManyAndReturn<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = $Extensions.GetSelect<
    {
      id?: boolean;
      name?: boolean;
      description?: boolean;
      key?: boolean;
      status?: boolean;
      progress?: boolean;
      createdAt?: boolean;
      updatedAt?: boolean;
      workspaceId?: boolean;
      workspace?: boolean | WorkspaceDefaultArgs<ExtArgs>;
    },
    ExtArgs["result"]["project"]
  >;

  export type ProjectSelectUpdateManyAndReturn<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = $Extensions.GetSelect<
    {
      id?: boolean;
      name?: boolean;
      description?: boolean;
      key?: boolean;
      status?: boolean;
      progress?: boolean;
      createdAt?: boolean;
      updatedAt?: boolean;
      workspaceId?: boolean;
      workspace?: boolean | WorkspaceDefaultArgs<ExtArgs>;
    },
    ExtArgs["result"]["project"]
  >;

  export type ProjectSelectScalar = {
    id?: boolean;
    name?: boolean;
    description?: boolean;
    key?: boolean;
    status?: boolean;
    progress?: boolean;
    createdAt?: boolean;
    updatedAt?: boolean;
    workspaceId?: boolean;
  };

  export type ProjectOmit<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = $Extensions.GetOmit<
    | "id"
    | "name"
    | "description"
    | "key"
    | "status"
    | "progress"
    | "createdAt"
    | "updatedAt"
    | "workspaceId",
    ExtArgs["result"]["project"]
  >;
  export type ProjectInclude<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    workspace?: boolean | WorkspaceDefaultArgs<ExtArgs>;
    tasks?: boolean | Project$tasksArgs<ExtArgs>;
    sprints?: boolean | Project$sprintsArgs<ExtArgs>;
    milestones?: boolean | Project$milestonesArgs<ExtArgs>;
    _count?: boolean | ProjectCountOutputTypeDefaultArgs<ExtArgs>;
  };
  export type ProjectIncludeCreateManyAndReturn<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    workspace?: boolean | WorkspaceDefaultArgs<ExtArgs>;
  };
  export type ProjectIncludeUpdateManyAndReturn<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    workspace?: boolean | WorkspaceDefaultArgs<ExtArgs>;
  };

  export type $ProjectPayload<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    name: "Project";
    objects: {
      workspace: Prisma.$WorkspacePayload<ExtArgs>;
      tasks: Prisma.$TaskPayload<ExtArgs>[];
      sprints: Prisma.$SprintPayload<ExtArgs>[];
      milestones: Prisma.$MilestonePayload<ExtArgs>[];
    };
    scalars: $Extensions.GetPayloadResult<
      {
        id: string;
        name: string;
        description: string | null;
        key: string;
        status: $Enums.ProjectStatus;
        progress: number;
        createdAt: Date;
        updatedAt: Date;
        workspaceId: string;
      },
      ExtArgs["result"]["project"]
    >;
    composites: {};
  };

  type ProjectGetPayload<
    S extends boolean | null | undefined | ProjectDefaultArgs,
  > = $Result.GetResult<Prisma.$ProjectPayload, S>;

  type ProjectCountArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = Omit<ProjectFindManyArgs, "select" | "include" | "distinct" | "omit"> & {
    select?: ProjectCountAggregateInputType | true;
  };

  export interface ProjectDelegate<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
    GlobalOmitOptions = {},
  > {
    [K: symbol]: {
      types: Prisma.TypeMap<ExtArgs>["model"]["Project"];
      meta: { name: "Project" };
    };
    /**
     * Find zero or one Project that matches the filter.
     * @param {ProjectFindUniqueArgs} args - Arguments to find a Project
     * @example
     * // Get one Project
     * const project = await prisma.project.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ProjectFindUniqueArgs>(
      args: SelectSubset<T, ProjectFindUniqueArgs<ExtArgs>>,
    ): Prisma__ProjectClient<
      $Result.GetResult<
        Prisma.$ProjectPayload<ExtArgs>,
        T,
        "findUnique",
        GlobalOmitOptions
      > | null,
      null,
      ExtArgs,
      GlobalOmitOptions
    >;

    /**
     * Find one Project that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {ProjectFindUniqueOrThrowArgs} args - Arguments to find a Project
     * @example
     * // Get one Project
     * const project = await prisma.project.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ProjectFindUniqueOrThrowArgs>(
      args: SelectSubset<T, ProjectFindUniqueOrThrowArgs<ExtArgs>>,
    ): Prisma__ProjectClient<
      $Result.GetResult<
        Prisma.$ProjectPayload<ExtArgs>,
        T,
        "findUniqueOrThrow",
        GlobalOmitOptions
      >,
      never,
      ExtArgs,
      GlobalOmitOptions
    >;

    /**
     * Find the first Project that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProjectFindFirstArgs} args - Arguments to find a Project
     * @example
     * // Get one Project
     * const project = await prisma.project.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ProjectFindFirstArgs>(
      args?: SelectSubset<T, ProjectFindFirstArgs<ExtArgs>>,
    ): Prisma__ProjectClient<
      $Result.GetResult<
        Prisma.$ProjectPayload<ExtArgs>,
        T,
        "findFirst",
        GlobalOmitOptions
      > | null,
      null,
      ExtArgs,
      GlobalOmitOptions
    >;

    /**
     * Find the first Project that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProjectFindFirstOrThrowArgs} args - Arguments to find a Project
     * @example
     * // Get one Project
     * const project = await prisma.project.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ProjectFindFirstOrThrowArgs>(
      args?: SelectSubset<T, ProjectFindFirstOrThrowArgs<ExtArgs>>,
    ): Prisma__ProjectClient<
      $Result.GetResult<
        Prisma.$ProjectPayload<ExtArgs>,
        T,
        "findFirstOrThrow",
        GlobalOmitOptions
      >,
      never,
      ExtArgs,
      GlobalOmitOptions
    >;

    /**
     * Find zero or more Projects that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProjectFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Projects
     * const projects = await prisma.project.findMany()
     *
     * // Get first 10 Projects
     * const projects = await prisma.project.findMany({ take: 10 })
     *
     * // Only select the `id`
     * const projectWithIdOnly = await prisma.project.findMany({ select: { id: true } })
     *
     */
    findMany<T extends ProjectFindManyArgs>(
      args?: SelectSubset<T, ProjectFindManyArgs<ExtArgs>>,
    ): Prisma.PrismaPromise<
      $Result.GetResult<
        Prisma.$ProjectPayload<ExtArgs>,
        T,
        "findMany",
        GlobalOmitOptions
      >
    >;

    /**
     * Create a Project.
     * @param {ProjectCreateArgs} args - Arguments to create a Project.
     * @example
     * // Create one Project
     * const Project = await prisma.project.create({
     *   data: {
     *     // ... data to create a Project
     *   }
     * })
     *
     */
    create<T extends ProjectCreateArgs>(
      args: SelectSubset<T, ProjectCreateArgs<ExtArgs>>,
    ): Prisma__ProjectClient<
      $Result.GetResult<
        Prisma.$ProjectPayload<ExtArgs>,
        T,
        "create",
        GlobalOmitOptions
      >,
      never,
      ExtArgs,
      GlobalOmitOptions
    >;

    /**
     * Create many Projects.
     * @param {ProjectCreateManyArgs} args - Arguments to create many Projects.
     * @example
     * // Create many Projects
     * const project = await prisma.project.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *
     */
    createMany<T extends ProjectCreateManyArgs>(
      args?: SelectSubset<T, ProjectCreateManyArgs<ExtArgs>>,
    ): Prisma.PrismaPromise<BatchPayload>;

    /**
     * Create many Projects and returns the data saved in the database.
     * @param {ProjectCreateManyAndReturnArgs} args - Arguments to create many Projects.
     * @example
     * // Create many Projects
     * const project = await prisma.project.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *
     * // Create many Projects and only return the `id`
     * const projectWithIdOnly = await prisma.project.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     *
     */
    createManyAndReturn<T extends ProjectCreateManyAndReturnArgs>(
      args?: SelectSubset<T, ProjectCreateManyAndReturnArgs<ExtArgs>>,
    ): Prisma.PrismaPromise<
      $Result.GetResult<
        Prisma.$ProjectPayload<ExtArgs>,
        T,
        "createManyAndReturn",
        GlobalOmitOptions
      >
    >;

    /**
     * Delete a Project.
     * @param {ProjectDeleteArgs} args - Arguments to delete one Project.
     * @example
     * // Delete one Project
     * const Project = await prisma.project.delete({
     *   where: {
     *     // ... filter to delete one Project
     *   }
     * })
     *
     */
    delete<T extends ProjectDeleteArgs>(
      args: SelectSubset<T, ProjectDeleteArgs<ExtArgs>>,
    ): Prisma__ProjectClient<
      $Result.GetResult<
        Prisma.$ProjectPayload<ExtArgs>,
        T,
        "delete",
        GlobalOmitOptions
      >,
      never,
      ExtArgs,
      GlobalOmitOptions
    >;

    /**
     * Update one Project.
     * @param {ProjectUpdateArgs} args - Arguments to update one Project.
     * @example
     * // Update one Project
     * const project = await prisma.project.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     *
     */
    update<T extends ProjectUpdateArgs>(
      args: SelectSubset<T, ProjectUpdateArgs<ExtArgs>>,
    ): Prisma__ProjectClient<
      $Result.GetResult<
        Prisma.$ProjectPayload<ExtArgs>,
        T,
        "update",
        GlobalOmitOptions
      >,
      never,
      ExtArgs,
      GlobalOmitOptions
    >;

    /**
     * Delete zero or more Projects.
     * @param {ProjectDeleteManyArgs} args - Arguments to filter Projects to delete.
     * @example
     * // Delete a few Projects
     * const { count } = await prisma.project.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     *
     */
    deleteMany<T extends ProjectDeleteManyArgs>(
      args?: SelectSubset<T, ProjectDeleteManyArgs<ExtArgs>>,
    ): Prisma.PrismaPromise<BatchPayload>;

    /**
     * Update zero or more Projects.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProjectUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Projects
     * const project = await prisma.project.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     *
     */
    updateMany<T extends ProjectUpdateManyArgs>(
      args: SelectSubset<T, ProjectUpdateManyArgs<ExtArgs>>,
    ): Prisma.PrismaPromise<BatchPayload>;

    /**
     * Update zero or more Projects and returns the data updated in the database.
     * @param {ProjectUpdateManyAndReturnArgs} args - Arguments to update many Projects.
     * @example
     * // Update many Projects
     * const project = await prisma.project.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *
     * // Update zero or more Projects and only return the `id`
     * const projectWithIdOnly = await prisma.project.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     *
     */
    updateManyAndReturn<T extends ProjectUpdateManyAndReturnArgs>(
      args: SelectSubset<T, ProjectUpdateManyAndReturnArgs<ExtArgs>>,
    ): Prisma.PrismaPromise<
      $Result.GetResult<
        Prisma.$ProjectPayload<ExtArgs>,
        T,
        "updateManyAndReturn",
        GlobalOmitOptions
      >
    >;

    /**
     * Create or update one Project.
     * @param {ProjectUpsertArgs} args - Arguments to update or create a Project.
     * @example
     * // Update or create a Project
     * const project = await prisma.project.upsert({
     *   create: {
     *     // ... data to create a Project
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Project we want to update
     *   }
     * })
     */
    upsert<T extends ProjectUpsertArgs>(
      args: SelectSubset<T, ProjectUpsertArgs<ExtArgs>>,
    ): Prisma__ProjectClient<
      $Result.GetResult<
        Prisma.$ProjectPayload<ExtArgs>,
        T,
        "upsert",
        GlobalOmitOptions
      >,
      never,
      ExtArgs,
      GlobalOmitOptions
    >;

    /**
     * Count the number of Projects.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProjectCountArgs} args - Arguments to filter Projects to count.
     * @example
     * // Count the number of Projects
     * const count = await prisma.project.count({
     *   where: {
     *     // ... the filter for the Projects we want to count
     *   }
     * })
     **/
    count<T extends ProjectCountArgs>(
      args?: Subset<T, ProjectCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<"select", any>
        ? T["select"] extends true
          ? number
          : GetScalarType<T["select"], ProjectCountAggregateOutputType>
        : number
    >;

    /**
     * Allows you to perform aggregations operations on a Project.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProjectAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
     **/
    aggregate<T extends ProjectAggregateArgs>(
      args: Subset<T, ProjectAggregateArgs>,
    ): Prisma.PrismaPromise<GetProjectAggregateType<T>>;

    /**
     * Group by Project.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProjectGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     *
     **/
    groupBy<
      T extends ProjectGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<"skip", Keys<T>>,
        Extends<"take", Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ProjectGroupByArgs["orderBy"] }
        : { orderBy?: ProjectGroupByArgs["orderBy"] },
      OrderFields extends ExcludeUnderscoreKeys<
        Keys<MaybeTupleToUnion<T["orderBy"]>>
      >,
      ByFields extends MaybeTupleToUnion<T["by"]>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T["having"]>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T["by"] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
        ? `Error: "by" must not be empty.`
        : HavingValid extends False
          ? {
              [P in HavingFields]: P extends ByFields
                ? never
                : P extends string
                  ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
                  : [
                      Error,
                      "Field ",
                      P,
                      ` in "having" needs to be provided in "by"`,
                    ];
            }[HavingFields]
          : "take" extends Keys<T>
            ? "orderBy" extends Keys<T>
              ? ByValid extends True
                ? {}
                : {
                    [P in OrderFields]: P extends ByFields
                      ? never
                      : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
                  }[OrderFields]
              : 'Error: If you provide "take", you also need to provide "orderBy"'
            : "skip" extends Keys<T>
              ? "orderBy" extends Keys<T>
                ? ByValid extends True
                  ? {}
                  : {
                      [P in OrderFields]: P extends ByFields
                        ? never
                        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
                    }[OrderFields]
                : 'Error: If you provide "skip", you also need to provide "orderBy"'
              : ByValid extends True
                ? {}
                : {
                    [P in OrderFields]: P extends ByFields
                      ? never
                      : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
                  }[OrderFields],
    >(
      args: SubsetIntersection<T, ProjectGroupByArgs, OrderByArg> & InputErrors,
    ): {} extends InputErrors
      ? GetProjectGroupByPayload<T>
      : Prisma.PrismaPromise<InputErrors>;
    /**
     * Fields of the Project model
     */
    readonly fields: ProjectFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Project.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ProjectClient<
    T,
    Null = never,
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
    GlobalOmitOptions = {},
  > extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise";
    workspace<T extends WorkspaceDefaultArgs<ExtArgs> = {}>(
      args?: Subset<T, WorkspaceDefaultArgs<ExtArgs>>,
    ): Prisma__WorkspaceClient<
      | $Result.GetResult<
          Prisma.$WorkspacePayload<ExtArgs>,
          T,
          "findUniqueOrThrow",
          GlobalOmitOptions
        >
      | Null,
      Null,
      ExtArgs,
      GlobalOmitOptions
    >;
    tasks<T extends Project$tasksArgs<ExtArgs> = {}>(
      args?: Subset<T, Project$tasksArgs<ExtArgs>>,
    ): Prisma.PrismaPromise<
      | $Result.GetResult<
          Prisma.$TaskPayload<ExtArgs>,
          T,
          "findMany",
          GlobalOmitOptions
        >
      | Null
    >;
    sprints<T extends Project$sprintsArgs<ExtArgs> = {}>(
      args?: Subset<T, Project$sprintsArgs<ExtArgs>>,
    ): Prisma.PrismaPromise<
      | $Result.GetResult<
          Prisma.$SprintPayload<ExtArgs>,
          T,
          "findMany",
          GlobalOmitOptions
        >
      | Null
    >;
    milestones<T extends Project$milestonesArgs<ExtArgs> = {}>(
      args?: Subset<T, Project$milestonesArgs<ExtArgs>>,
    ): Prisma.PrismaPromise<
      | $Result.GetResult<
          Prisma.$MilestonePayload<ExtArgs>,
          T,
          "findMany",
          GlobalOmitOptions
        >
      | Null
    >;
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(
      onfulfilled?:
        | ((value: T) => TResult1 | PromiseLike<TResult1>)
        | undefined
        | null,
      onrejected?:
        | ((reason: any) => TResult2 | PromiseLike<TResult2>)
        | undefined
        | null,
    ): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(
      onrejected?:
        | ((reason: any) => TResult | PromiseLike<TResult>)
        | undefined
        | null,
    ): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }

  /**
   * Fields of the Project model
   */
  interface ProjectFieldRefs {
    readonly id: FieldRef<"Project", "String">;
    readonly name: FieldRef<"Project", "String">;
    readonly description: FieldRef<"Project", "String">;
    readonly key: FieldRef<"Project", "String">;
    readonly status: FieldRef<"Project", "ProjectStatus">;
    readonly progress: FieldRef<"Project", "Int">;
    readonly createdAt: FieldRef<"Project", "DateTime">;
    readonly updatedAt: FieldRef<"Project", "DateTime">;
    readonly workspaceId: FieldRef<"Project", "String">;
  }

  // Custom InputTypes
  /**
   * Project findUnique
   */
  export type ProjectFindUniqueArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * Select specific fields to fetch from the Project
     */
    select?: ProjectSelect<ExtArgs> | null;
    /**
     * Omit specific fields from the Project
     */
    omit?: ProjectOmit<ExtArgs> | null;
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProjectInclude<ExtArgs> | null;
    /**
     * Filter, which Project to fetch.
     */
    where: ProjectWhereUniqueInput;
  };

  /**
   * Project findUniqueOrThrow
   */
  export type ProjectFindUniqueOrThrowArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * Select specific fields to fetch from the Project
     */
    select?: ProjectSelect<ExtArgs> | null;
    /**
     * Omit specific fields from the Project
     */
    omit?: ProjectOmit<ExtArgs> | null;
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProjectInclude<ExtArgs> | null;
    /**
     * Filter, which Project to fetch.
     */
    where: ProjectWhereUniqueInput;
  };

  /**
   * Project findFirst
   */
  export type ProjectFindFirstArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * Select specific fields to fetch from the Project
     */
    select?: ProjectSelect<ExtArgs> | null;
    /**
     * Omit specific fields from the Project
     */
    omit?: ProjectOmit<ExtArgs> | null;
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProjectInclude<ExtArgs> | null;
    /**
     * Filter, which Project to fetch.
     */
    where?: ProjectWhereInput;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     *
     * Determine the order of Projects to fetch.
     */
    orderBy?:
      | ProjectOrderByWithRelationInput
      | ProjectOrderByWithRelationInput[];
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     *
     * Sets the position for searching for Projects.
     */
    cursor?: ProjectWhereUniqueInput;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     *
     * Take `±n` Projects from the position of the cursor.
     */
    take?: number;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     *
     * Skip the first `n` Projects.
     */
    skip?: number;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     *
     * Filter by unique combinations of Projects.
     */
    distinct?: ProjectScalarFieldEnum | ProjectScalarFieldEnum[];
  };

  /**
   * Project findFirstOrThrow
   */
  export type ProjectFindFirstOrThrowArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * Select specific fields to fetch from the Project
     */
    select?: ProjectSelect<ExtArgs> | null;
    /**
     * Omit specific fields from the Project
     */
    omit?: ProjectOmit<ExtArgs> | null;
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProjectInclude<ExtArgs> | null;
    /**
     * Filter, which Project to fetch.
     */
    where?: ProjectWhereInput;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     *
     * Determine the order of Projects to fetch.
     */
    orderBy?:
      | ProjectOrderByWithRelationInput
      | ProjectOrderByWithRelationInput[];
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     *
     * Sets the position for searching for Projects.
     */
    cursor?: ProjectWhereUniqueInput;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     *
     * Take `±n` Projects from the position of the cursor.
     */
    take?: number;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     *
     * Skip the first `n` Projects.
     */
    skip?: number;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     *
     * Filter by unique combinations of Projects.
     */
    distinct?: ProjectScalarFieldEnum | ProjectScalarFieldEnum[];
  };

  /**
   * Project findMany
   */
  export type ProjectFindManyArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * Select specific fields to fetch from the Project
     */
    select?: ProjectSelect<ExtArgs> | null;
    /**
     * Omit specific fields from the Project
     */
    omit?: ProjectOmit<ExtArgs> | null;
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProjectInclude<ExtArgs> | null;
    /**
     * Filter, which Projects to fetch.
     */
    where?: ProjectWhereInput;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     *
     * Determine the order of Projects to fetch.
     */
    orderBy?:
      | ProjectOrderByWithRelationInput
      | ProjectOrderByWithRelationInput[];
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     *
     * Sets the position for listing Projects.
     */
    cursor?: ProjectWhereUniqueInput;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     *
     * Take `±n` Projects from the position of the cursor.
     */
    take?: number;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     *
     * Skip the first `n` Projects.
     */
    skip?: number;
    distinct?: ProjectScalarFieldEnum | ProjectScalarFieldEnum[];
  };

  /**
   * Project create
   */
  export type ProjectCreateArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * Select specific fields to fetch from the Project
     */
    select?: ProjectSelect<ExtArgs> | null;
    /**
     * Omit specific fields from the Project
     */
    omit?: ProjectOmit<ExtArgs> | null;
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProjectInclude<ExtArgs> | null;
    /**
     * The data needed to create a Project.
     */
    data: XOR<ProjectCreateInput, ProjectUncheckedCreateInput>;
  };

  /**
   * Project createMany
   */
  export type ProjectCreateManyArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * The data used to create many Projects.
     */
    data: ProjectCreateManyInput | ProjectCreateManyInput[];
    skipDuplicates?: boolean;
  };

  /**
   * Project createManyAndReturn
   */
  export type ProjectCreateManyAndReturnArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * Select specific fields to fetch from the Project
     */
    select?: ProjectSelectCreateManyAndReturn<ExtArgs> | null;
    /**
     * Omit specific fields from the Project
     */
    omit?: ProjectOmit<ExtArgs> | null;
    /**
     * The data used to create many Projects.
     */
    data: ProjectCreateManyInput | ProjectCreateManyInput[];
    skipDuplicates?: boolean;
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProjectIncludeCreateManyAndReturn<ExtArgs> | null;
  };

  /**
   * Project update
   */
  export type ProjectUpdateArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * Select specific fields to fetch from the Project
     */
    select?: ProjectSelect<ExtArgs> | null;
    /**
     * Omit specific fields from the Project
     */
    omit?: ProjectOmit<ExtArgs> | null;
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProjectInclude<ExtArgs> | null;
    /**
     * The data needed to update a Project.
     */
    data: XOR<ProjectUpdateInput, ProjectUncheckedUpdateInput>;
    /**
     * Choose, which Project to update.
     */
    where: ProjectWhereUniqueInput;
  };

  /**
   * Project updateMany
   */
  export type ProjectUpdateManyArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * The data used to update Projects.
     */
    data: XOR<ProjectUpdateManyMutationInput, ProjectUncheckedUpdateManyInput>;
    /**
     * Filter which Projects to update
     */
    where?: ProjectWhereInput;
    /**
     * Limit how many Projects to update.
     */
    limit?: number;
  };

  /**
   * Project updateManyAndReturn
   */
  export type ProjectUpdateManyAndReturnArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * Select specific fields to fetch from the Project
     */
    select?: ProjectSelectUpdateManyAndReturn<ExtArgs> | null;
    /**
     * Omit specific fields from the Project
     */
    omit?: ProjectOmit<ExtArgs> | null;
    /**
     * The data used to update Projects.
     */
    data: XOR<ProjectUpdateManyMutationInput, ProjectUncheckedUpdateManyInput>;
    /**
     * Filter which Projects to update
     */
    where?: ProjectWhereInput;
    /**
     * Limit how many Projects to update.
     */
    limit?: number;
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProjectIncludeUpdateManyAndReturn<ExtArgs> | null;
  };

  /**
   * Project upsert
   */
  export type ProjectUpsertArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * Select specific fields to fetch from the Project
     */
    select?: ProjectSelect<ExtArgs> | null;
    /**
     * Omit specific fields from the Project
     */
    omit?: ProjectOmit<ExtArgs> | null;
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProjectInclude<ExtArgs> | null;
    /**
     * The filter to search for the Project to update in case it exists.
     */
    where: ProjectWhereUniqueInput;
    /**
     * In case the Project found by the `where` argument doesn't exist, create a new Project with this data.
     */
    create: XOR<ProjectCreateInput, ProjectUncheckedCreateInput>;
    /**
     * In case the Project was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ProjectUpdateInput, ProjectUncheckedUpdateInput>;
  };

  /**
   * Project delete
   */
  export type ProjectDeleteArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * Select specific fields to fetch from the Project
     */
    select?: ProjectSelect<ExtArgs> | null;
    /**
     * Omit specific fields from the Project
     */
    omit?: ProjectOmit<ExtArgs> | null;
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProjectInclude<ExtArgs> | null;
    /**
     * Filter which Project to delete.
     */
    where: ProjectWhereUniqueInput;
  };

  /**
   * Project deleteMany
   */
  export type ProjectDeleteManyArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * Filter which Projects to delete
     */
    where?: ProjectWhereInput;
    /**
     * Limit how many Projects to delete.
     */
    limit?: number;
  };

  /**
   * Project.tasks
   */
  export type Project$tasksArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * Select specific fields to fetch from the Task
     */
    select?: TaskSelect<ExtArgs> | null;
    /**
     * Omit specific fields from the Task
     */
    omit?: TaskOmit<ExtArgs> | null;
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TaskInclude<ExtArgs> | null;
    where?: TaskWhereInput;
    orderBy?: TaskOrderByWithRelationInput | TaskOrderByWithRelationInput[];
    cursor?: TaskWhereUniqueInput;
    take?: number;
    skip?: number;
    distinct?: TaskScalarFieldEnum | TaskScalarFieldEnum[];
  };

  /**
   * Project.sprints
   */
  export type Project$sprintsArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * Select specific fields to fetch from the Sprint
     */
    select?: SprintSelect<ExtArgs> | null;
    /**
     * Omit specific fields from the Sprint
     */
    omit?: SprintOmit<ExtArgs> | null;
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SprintInclude<ExtArgs> | null;
    where?: SprintWhereInput;
    orderBy?: SprintOrderByWithRelationInput | SprintOrderByWithRelationInput[];
    cursor?: SprintWhereUniqueInput;
    take?: number;
    skip?: number;
    distinct?: SprintScalarFieldEnum | SprintScalarFieldEnum[];
  };

  /**
   * Project.milestones
   */
  export type Project$milestonesArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * Select specific fields to fetch from the Milestone
     */
    select?: MilestoneSelect<ExtArgs> | null;
    /**
     * Omit specific fields from the Milestone
     */
    omit?: MilestoneOmit<ExtArgs> | null;
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MilestoneInclude<ExtArgs> | null;
    where?: MilestoneWhereInput;
    orderBy?:
      | MilestoneOrderByWithRelationInput
      | MilestoneOrderByWithRelationInput[];
    cursor?: MilestoneWhereUniqueInput;
    take?: number;
    skip?: number;
    distinct?: MilestoneScalarFieldEnum | MilestoneScalarFieldEnum[];
  };

  /**
   * Project without action
   */
  export type ProjectDefaultArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * Select specific fields to fetch from the Project
     */
    select?: ProjectSelect<ExtArgs> | null;
    /**
     * Omit specific fields from the Project
     */
    omit?: ProjectOmit<ExtArgs> | null;
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProjectInclude<ExtArgs> | null;
  };

  /**
   * Model Task
   */

  export type AggregateTask = {
    _count: TaskCountAggregateOutputType | null;
    _avg: TaskAvgAggregateOutputType | null;
    _sum: TaskSumAggregateOutputType | null;
    _min: TaskMinAggregateOutputType | null;
    _max: TaskMaxAggregateOutputType | null;
  };

  export type TaskAvgAggregateOutputType = {
    storyPoints: number | null;
  };

  export type TaskSumAggregateOutputType = {
    storyPoints: number | null;
  };

  export type TaskMinAggregateOutputType = {
    id: string | null;
    title: string | null;
    description: string | null;
    type: $Enums.TaskType | null;
    status: $Enums.TaskStatus | null;
    priority: $Enums.Priority | null;
    storyPoints: number | null;
    dueDate: Date | null;
    createdAt: Date | null;
    updatedAt: Date | null;
    projectId: string | null;
    sprintId: string | null;
    assigneeId: string | null;
    creatorId: string | null;
    parentId: string | null;
  };

  export type TaskMaxAggregateOutputType = {
    id: string | null;
    title: string | null;
    description: string | null;
    type: $Enums.TaskType | null;
    status: $Enums.TaskStatus | null;
    priority: $Enums.Priority | null;
    storyPoints: number | null;
    dueDate: Date | null;
    createdAt: Date | null;
    updatedAt: Date | null;
    projectId: string | null;
    sprintId: string | null;
    assigneeId: string | null;
    creatorId: string | null;
    parentId: string | null;
  };

  export type TaskCountAggregateOutputType = {
    id: number;
    title: number;
    description: number;
    type: number;
    status: number;
    priority: number;
    storyPoints: number;
    dueDate: number;
    createdAt: number;
    updatedAt: number;
    projectId: number;
    sprintId: number;
    assigneeId: number;
    creatorId: number;
    parentId: number;
    _all: number;
  };

  export type TaskAvgAggregateInputType = {
    storyPoints?: true;
  };

  export type TaskSumAggregateInputType = {
    storyPoints?: true;
  };

  export type TaskMinAggregateInputType = {
    id?: true;
    title?: true;
    description?: true;
    type?: true;
    status?: true;
    priority?: true;
    storyPoints?: true;
    dueDate?: true;
    createdAt?: true;
    updatedAt?: true;
    projectId?: true;
    sprintId?: true;
    assigneeId?: true;
    creatorId?: true;
    parentId?: true;
  };

  export type TaskMaxAggregateInputType = {
    id?: true;
    title?: true;
    description?: true;
    type?: true;
    status?: true;
    priority?: true;
    storyPoints?: true;
    dueDate?: true;
    createdAt?: true;
    updatedAt?: true;
    projectId?: true;
    sprintId?: true;
    assigneeId?: true;
    creatorId?: true;
    parentId?: true;
  };

  export type TaskCountAggregateInputType = {
    id?: true;
    title?: true;
    description?: true;
    type?: true;
    status?: true;
    priority?: true;
    storyPoints?: true;
    dueDate?: true;
    createdAt?: true;
    updatedAt?: true;
    projectId?: true;
    sprintId?: true;
    assigneeId?: true;
    creatorId?: true;
    parentId?: true;
    _all?: true;
  };

  export type TaskAggregateArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * Filter which Task to aggregate.
     */
    where?: TaskWhereInput;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     *
     * Determine the order of Tasks to fetch.
     */
    orderBy?: TaskOrderByWithRelationInput | TaskOrderByWithRelationInput[];
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     *
     * Sets the start position
     */
    cursor?: TaskWhereUniqueInput;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     *
     * Take `±n` Tasks from the position of the cursor.
     */
    take?: number;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     *
     * Skip the first `n` Tasks.
     */
    skip?: number;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     *
     * Count returned Tasks
     **/
    _count?: true | TaskCountAggregateInputType;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     *
     * Select which fields to average
     **/
    _avg?: TaskAvgAggregateInputType;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     *
     * Select which fields to sum
     **/
    _sum?: TaskSumAggregateInputType;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     *
     * Select which fields to find the minimum value
     **/
    _min?: TaskMinAggregateInputType;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     *
     * Select which fields to find the maximum value
     **/
    _max?: TaskMaxAggregateInputType;
  };

  export type GetTaskAggregateType<T extends TaskAggregateArgs> = {
    [P in keyof T & keyof AggregateTask]: P extends "_count" | "count"
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateTask[P]>
      : GetScalarType<T[P], AggregateTask[P]>;
  };

  export type TaskGroupByArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    where?: TaskWhereInput;
    orderBy?:
      | TaskOrderByWithAggregationInput
      | TaskOrderByWithAggregationInput[];
    by: TaskScalarFieldEnum[] | TaskScalarFieldEnum;
    having?: TaskScalarWhereWithAggregatesInput;
    take?: number;
    skip?: number;
    _count?: TaskCountAggregateInputType | true;
    _avg?: TaskAvgAggregateInputType;
    _sum?: TaskSumAggregateInputType;
    _min?: TaskMinAggregateInputType;
    _max?: TaskMaxAggregateInputType;
  };

  export type TaskGroupByOutputType = {
    id: string;
    title: string;
    description: string | null;
    type: $Enums.TaskType;
    status: $Enums.TaskStatus;
    priority: $Enums.Priority;
    storyPoints: number | null;
    dueDate: Date | null;
    createdAt: Date;
    updatedAt: Date;
    projectId: string;
    sprintId: string | null;
    assigneeId: string | null;
    creatorId: string;
    parentId: string | null;
    _count: TaskCountAggregateOutputType | null;
    _avg: TaskAvgAggregateOutputType | null;
    _sum: TaskSumAggregateOutputType | null;
    _min: TaskMinAggregateOutputType | null;
    _max: TaskMaxAggregateOutputType | null;
  };

  type GetTaskGroupByPayload<T extends TaskGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<TaskGroupByOutputType, T["by"]> & {
        [P in keyof T & keyof TaskGroupByOutputType]: P extends "_count"
          ? T[P] extends boolean
            ? number
            : GetScalarType<T[P], TaskGroupByOutputType[P]>
          : GetScalarType<T[P], TaskGroupByOutputType[P]>;
      }
    >
  >;

  export type TaskSelect<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = $Extensions.GetSelect<
    {
      id?: boolean;
      title?: boolean;
      description?: boolean;
      type?: boolean;
      status?: boolean;
      priority?: boolean;
      storyPoints?: boolean;
      dueDate?: boolean;
      createdAt?: boolean;
      updatedAt?: boolean;
      projectId?: boolean;
      sprintId?: boolean;
      assigneeId?: boolean;
      creatorId?: boolean;
      parentId?: boolean;
      project?: boolean | ProjectDefaultArgs<ExtArgs>;
      sprint?: boolean | Task$sprintArgs<ExtArgs>;
      assignee?: boolean | Task$assigneeArgs<ExtArgs>;
      creator?: boolean | UserDefaultArgs<ExtArgs>;
      tags?: boolean | Task$tagsArgs<ExtArgs>;
      activities?: boolean | Task$activitiesArgs<ExtArgs>;
      _count?: boolean | TaskCountOutputTypeDefaultArgs<ExtArgs>;
    },
    ExtArgs["result"]["task"]
  >;

  export type TaskSelectCreateManyAndReturn<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = $Extensions.GetSelect<
    {
      id?: boolean;
      title?: boolean;
      description?: boolean;
      type?: boolean;
      status?: boolean;
      priority?: boolean;
      storyPoints?: boolean;
      dueDate?: boolean;
      createdAt?: boolean;
      updatedAt?: boolean;
      projectId?: boolean;
      sprintId?: boolean;
      assigneeId?: boolean;
      creatorId?: boolean;
      parentId?: boolean;
      project?: boolean | ProjectDefaultArgs<ExtArgs>;
      sprint?: boolean | Task$sprintArgs<ExtArgs>;
      assignee?: boolean | Task$assigneeArgs<ExtArgs>;
      creator?: boolean | UserDefaultArgs<ExtArgs>;
    },
    ExtArgs["result"]["task"]
  >;

  export type TaskSelectUpdateManyAndReturn<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = $Extensions.GetSelect<
    {
      id?: boolean;
      title?: boolean;
      description?: boolean;
      type?: boolean;
      status?: boolean;
      priority?: boolean;
      storyPoints?: boolean;
      dueDate?: boolean;
      createdAt?: boolean;
      updatedAt?: boolean;
      projectId?: boolean;
      sprintId?: boolean;
      assigneeId?: boolean;
      creatorId?: boolean;
      parentId?: boolean;
      project?: boolean | ProjectDefaultArgs<ExtArgs>;
      sprint?: boolean | Task$sprintArgs<ExtArgs>;
      assignee?: boolean | Task$assigneeArgs<ExtArgs>;
      creator?: boolean | UserDefaultArgs<ExtArgs>;
    },
    ExtArgs["result"]["task"]
  >;

  export type TaskSelectScalar = {
    id?: boolean;
    title?: boolean;
    description?: boolean;
    type?: boolean;
    status?: boolean;
    priority?: boolean;
    storyPoints?: boolean;
    dueDate?: boolean;
    createdAt?: boolean;
    updatedAt?: boolean;
    projectId?: boolean;
    sprintId?: boolean;
    assigneeId?: boolean;
    creatorId?: boolean;
    parentId?: boolean;
  };

  export type TaskOmit<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = $Extensions.GetOmit<
    | "id"
    | "title"
    | "description"
    | "type"
    | "status"
    | "priority"
    | "storyPoints"
    | "dueDate"
    | "createdAt"
    | "updatedAt"
    | "projectId"
    | "sprintId"
    | "assigneeId"
    | "creatorId"
    | "parentId",
    ExtArgs["result"]["task"]
  >;
  export type TaskInclude<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    project?: boolean | ProjectDefaultArgs<ExtArgs>;
    sprint?: boolean | Task$sprintArgs<ExtArgs>;
    assignee?: boolean | Task$assigneeArgs<ExtArgs>;
    creator?: boolean | UserDefaultArgs<ExtArgs>;
    tags?: boolean | Task$tagsArgs<ExtArgs>;
    activities?: boolean | Task$activitiesArgs<ExtArgs>;
    _count?: boolean | TaskCountOutputTypeDefaultArgs<ExtArgs>;
  };
  export type TaskIncludeCreateManyAndReturn<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    project?: boolean | ProjectDefaultArgs<ExtArgs>;
    sprint?: boolean | Task$sprintArgs<ExtArgs>;
    assignee?: boolean | Task$assigneeArgs<ExtArgs>;
    creator?: boolean | UserDefaultArgs<ExtArgs>;
  };
  export type TaskIncludeUpdateManyAndReturn<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    project?: boolean | ProjectDefaultArgs<ExtArgs>;
    sprint?: boolean | Task$sprintArgs<ExtArgs>;
    assignee?: boolean | Task$assigneeArgs<ExtArgs>;
    creator?: boolean | UserDefaultArgs<ExtArgs>;
  };

  export type $TaskPayload<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    name: "Task";
    objects: {
      project: Prisma.$ProjectPayload<ExtArgs>;
      sprint: Prisma.$SprintPayload<ExtArgs> | null;
      assignee: Prisma.$UserPayload<ExtArgs> | null;
      creator: Prisma.$UserPayload<ExtArgs>;
      tags: Prisma.$TaskTagPayload<ExtArgs>[];
      activities: Prisma.$ActivityPayload<ExtArgs>[];
    };
    scalars: $Extensions.GetPayloadResult<
      {
        id: string;
        title: string;
        description: string | null;
        type: $Enums.TaskType;
        status: $Enums.TaskStatus;
        priority: $Enums.Priority;
        storyPoints: number | null;
        dueDate: Date | null;
        createdAt: Date;
        updatedAt: Date;
        projectId: string;
        sprintId: string | null;
        assigneeId: string | null;
        creatorId: string;
        parentId: string | null;
      },
      ExtArgs["result"]["task"]
    >;
    composites: {};
  };

  type TaskGetPayload<S extends boolean | null | undefined | TaskDefaultArgs> =
    $Result.GetResult<Prisma.$TaskPayload, S>;

  type TaskCountArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = Omit<TaskFindManyArgs, "select" | "include" | "distinct" | "omit"> & {
    select?: TaskCountAggregateInputType | true;
  };

  export interface TaskDelegate<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
    GlobalOmitOptions = {},
  > {
    [K: symbol]: {
      types: Prisma.TypeMap<ExtArgs>["model"]["Task"];
      meta: { name: "Task" };
    };
    /**
     * Find zero or one Task that matches the filter.
     * @param {TaskFindUniqueArgs} args - Arguments to find a Task
     * @example
     * // Get one Task
     * const task = await prisma.task.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends TaskFindUniqueArgs>(
      args: SelectSubset<T, TaskFindUniqueArgs<ExtArgs>>,
    ): Prisma__TaskClient<
      $Result.GetResult<
        Prisma.$TaskPayload<ExtArgs>,
        T,
        "findUnique",
        GlobalOmitOptions
      > | null,
      null,
      ExtArgs,
      GlobalOmitOptions
    >;

    /**
     * Find one Task that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {TaskFindUniqueOrThrowArgs} args - Arguments to find a Task
     * @example
     * // Get one Task
     * const task = await prisma.task.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends TaskFindUniqueOrThrowArgs>(
      args: SelectSubset<T, TaskFindUniqueOrThrowArgs<ExtArgs>>,
    ): Prisma__TaskClient<
      $Result.GetResult<
        Prisma.$TaskPayload<ExtArgs>,
        T,
        "findUniqueOrThrow",
        GlobalOmitOptions
      >,
      never,
      ExtArgs,
      GlobalOmitOptions
    >;

    /**
     * Find the first Task that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TaskFindFirstArgs} args - Arguments to find a Task
     * @example
     * // Get one Task
     * const task = await prisma.task.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends TaskFindFirstArgs>(
      args?: SelectSubset<T, TaskFindFirstArgs<ExtArgs>>,
    ): Prisma__TaskClient<
      $Result.GetResult<
        Prisma.$TaskPayload<ExtArgs>,
        T,
        "findFirst",
        GlobalOmitOptions
      > | null,
      null,
      ExtArgs,
      GlobalOmitOptions
    >;

    /**
     * Find the first Task that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TaskFindFirstOrThrowArgs} args - Arguments to find a Task
     * @example
     * // Get one Task
     * const task = await prisma.task.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends TaskFindFirstOrThrowArgs>(
      args?: SelectSubset<T, TaskFindFirstOrThrowArgs<ExtArgs>>,
    ): Prisma__TaskClient<
      $Result.GetResult<
        Prisma.$TaskPayload<ExtArgs>,
        T,
        "findFirstOrThrow",
        GlobalOmitOptions
      >,
      never,
      ExtArgs,
      GlobalOmitOptions
    >;

    /**
     * Find zero or more Tasks that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TaskFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Tasks
     * const tasks = await prisma.task.findMany()
     *
     * // Get first 10 Tasks
     * const tasks = await prisma.task.findMany({ take: 10 })
     *
     * // Only select the `id`
     * const taskWithIdOnly = await prisma.task.findMany({ select: { id: true } })
     *
     */
    findMany<T extends TaskFindManyArgs>(
      args?: SelectSubset<T, TaskFindManyArgs<ExtArgs>>,
    ): Prisma.PrismaPromise<
      $Result.GetResult<
        Prisma.$TaskPayload<ExtArgs>,
        T,
        "findMany",
        GlobalOmitOptions
      >
    >;

    /**
     * Create a Task.
     * @param {TaskCreateArgs} args - Arguments to create a Task.
     * @example
     * // Create one Task
     * const Task = await prisma.task.create({
     *   data: {
     *     // ... data to create a Task
     *   }
     * })
     *
     */
    create<T extends TaskCreateArgs>(
      args: SelectSubset<T, TaskCreateArgs<ExtArgs>>,
    ): Prisma__TaskClient<
      $Result.GetResult<
        Prisma.$TaskPayload<ExtArgs>,
        T,
        "create",
        GlobalOmitOptions
      >,
      never,
      ExtArgs,
      GlobalOmitOptions
    >;

    /**
     * Create many Tasks.
     * @param {TaskCreateManyArgs} args - Arguments to create many Tasks.
     * @example
     * // Create many Tasks
     * const task = await prisma.task.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *
     */
    createMany<T extends TaskCreateManyArgs>(
      args?: SelectSubset<T, TaskCreateManyArgs<ExtArgs>>,
    ): Prisma.PrismaPromise<BatchPayload>;

    /**
     * Create many Tasks and returns the data saved in the database.
     * @param {TaskCreateManyAndReturnArgs} args - Arguments to create many Tasks.
     * @example
     * // Create many Tasks
     * const task = await prisma.task.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *
     * // Create many Tasks and only return the `id`
     * const taskWithIdOnly = await prisma.task.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     *
     */
    createManyAndReturn<T extends TaskCreateManyAndReturnArgs>(
      args?: SelectSubset<T, TaskCreateManyAndReturnArgs<ExtArgs>>,
    ): Prisma.PrismaPromise<
      $Result.GetResult<
        Prisma.$TaskPayload<ExtArgs>,
        T,
        "createManyAndReturn",
        GlobalOmitOptions
      >
    >;

    /**
     * Delete a Task.
     * @param {TaskDeleteArgs} args - Arguments to delete one Task.
     * @example
     * // Delete one Task
     * const Task = await prisma.task.delete({
     *   where: {
     *     // ... filter to delete one Task
     *   }
     * })
     *
     */
    delete<T extends TaskDeleteArgs>(
      args: SelectSubset<T, TaskDeleteArgs<ExtArgs>>,
    ): Prisma__TaskClient<
      $Result.GetResult<
        Prisma.$TaskPayload<ExtArgs>,
        T,
        "delete",
        GlobalOmitOptions
      >,
      never,
      ExtArgs,
      GlobalOmitOptions
    >;

    /**
     * Update one Task.
     * @param {TaskUpdateArgs} args - Arguments to update one Task.
     * @example
     * // Update one Task
     * const task = await prisma.task.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     *
     */
    update<T extends TaskUpdateArgs>(
      args: SelectSubset<T, TaskUpdateArgs<ExtArgs>>,
    ): Prisma__TaskClient<
      $Result.GetResult<
        Prisma.$TaskPayload<ExtArgs>,
        T,
        "update",
        GlobalOmitOptions
      >,
      never,
      ExtArgs,
      GlobalOmitOptions
    >;

    /**
     * Delete zero or more Tasks.
     * @param {TaskDeleteManyArgs} args - Arguments to filter Tasks to delete.
     * @example
     * // Delete a few Tasks
     * const { count } = await prisma.task.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     *
     */
    deleteMany<T extends TaskDeleteManyArgs>(
      args?: SelectSubset<T, TaskDeleteManyArgs<ExtArgs>>,
    ): Prisma.PrismaPromise<BatchPayload>;

    /**
     * Update zero or more Tasks.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TaskUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Tasks
     * const task = await prisma.task.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     *
     */
    updateMany<T extends TaskUpdateManyArgs>(
      args: SelectSubset<T, TaskUpdateManyArgs<ExtArgs>>,
    ): Prisma.PrismaPromise<BatchPayload>;

    /**
     * Update zero or more Tasks and returns the data updated in the database.
     * @param {TaskUpdateManyAndReturnArgs} args - Arguments to update many Tasks.
     * @example
     * // Update many Tasks
     * const task = await prisma.task.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *
     * // Update zero or more Tasks and only return the `id`
     * const taskWithIdOnly = await prisma.task.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     *
     */
    updateManyAndReturn<T extends TaskUpdateManyAndReturnArgs>(
      args: SelectSubset<T, TaskUpdateManyAndReturnArgs<ExtArgs>>,
    ): Prisma.PrismaPromise<
      $Result.GetResult<
        Prisma.$TaskPayload<ExtArgs>,
        T,
        "updateManyAndReturn",
        GlobalOmitOptions
      >
    >;

    /**
     * Create or update one Task.
     * @param {TaskUpsertArgs} args - Arguments to update or create a Task.
     * @example
     * // Update or create a Task
     * const task = await prisma.task.upsert({
     *   create: {
     *     // ... data to create a Task
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Task we want to update
     *   }
     * })
     */
    upsert<T extends TaskUpsertArgs>(
      args: SelectSubset<T, TaskUpsertArgs<ExtArgs>>,
    ): Prisma__TaskClient<
      $Result.GetResult<
        Prisma.$TaskPayload<ExtArgs>,
        T,
        "upsert",
        GlobalOmitOptions
      >,
      never,
      ExtArgs,
      GlobalOmitOptions
    >;

    /**
     * Count the number of Tasks.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TaskCountArgs} args - Arguments to filter Tasks to count.
     * @example
     * // Count the number of Tasks
     * const count = await prisma.task.count({
     *   where: {
     *     // ... the filter for the Tasks we want to count
     *   }
     * })
     **/
    count<T extends TaskCountArgs>(
      args?: Subset<T, TaskCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<"select", any>
        ? T["select"] extends true
          ? number
          : GetScalarType<T["select"], TaskCountAggregateOutputType>
        : number
    >;

    /**
     * Allows you to perform aggregations operations on a Task.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TaskAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
     **/
    aggregate<T extends TaskAggregateArgs>(
      args: Subset<T, TaskAggregateArgs>,
    ): Prisma.PrismaPromise<GetTaskAggregateType<T>>;

    /**
     * Group by Task.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TaskGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     *
     **/
    groupBy<
      T extends TaskGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<"skip", Keys<T>>,
        Extends<"take", Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: TaskGroupByArgs["orderBy"] }
        : { orderBy?: TaskGroupByArgs["orderBy"] },
      OrderFields extends ExcludeUnderscoreKeys<
        Keys<MaybeTupleToUnion<T["orderBy"]>>
      >,
      ByFields extends MaybeTupleToUnion<T["by"]>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T["having"]>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T["by"] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
        ? `Error: "by" must not be empty.`
        : HavingValid extends False
          ? {
              [P in HavingFields]: P extends ByFields
                ? never
                : P extends string
                  ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
                  : [
                      Error,
                      "Field ",
                      P,
                      ` in "having" needs to be provided in "by"`,
                    ];
            }[HavingFields]
          : "take" extends Keys<T>
            ? "orderBy" extends Keys<T>
              ? ByValid extends True
                ? {}
                : {
                    [P in OrderFields]: P extends ByFields
                      ? never
                      : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
                  }[OrderFields]
              : 'Error: If you provide "take", you also need to provide "orderBy"'
            : "skip" extends Keys<T>
              ? "orderBy" extends Keys<T>
                ? ByValid extends True
                  ? {}
                  : {
                      [P in OrderFields]: P extends ByFields
                        ? never
                        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
                    }[OrderFields]
                : 'Error: If you provide "skip", you also need to provide "orderBy"'
              : ByValid extends True
                ? {}
                : {
                    [P in OrderFields]: P extends ByFields
                      ? never
                      : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
                  }[OrderFields],
    >(
      args: SubsetIntersection<T, TaskGroupByArgs, OrderByArg> & InputErrors,
    ): {} extends InputErrors
      ? GetTaskGroupByPayload<T>
      : Prisma.PrismaPromise<InputErrors>;
    /**
     * Fields of the Task model
     */
    readonly fields: TaskFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Task.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__TaskClient<
    T,
    Null = never,
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
    GlobalOmitOptions = {},
  > extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise";
    project<T extends ProjectDefaultArgs<ExtArgs> = {}>(
      args?: Subset<T, ProjectDefaultArgs<ExtArgs>>,
    ): Prisma__ProjectClient<
      | $Result.GetResult<
          Prisma.$ProjectPayload<ExtArgs>,
          T,
          "findUniqueOrThrow",
          GlobalOmitOptions
        >
      | Null,
      Null,
      ExtArgs,
      GlobalOmitOptions
    >;
    sprint<T extends Task$sprintArgs<ExtArgs> = {}>(
      args?: Subset<T, Task$sprintArgs<ExtArgs>>,
    ): Prisma__SprintClient<
      $Result.GetResult<
        Prisma.$SprintPayload<ExtArgs>,
        T,
        "findUniqueOrThrow",
        GlobalOmitOptions
      > | null,
      null,
      ExtArgs,
      GlobalOmitOptions
    >;
    assignee<T extends Task$assigneeArgs<ExtArgs> = {}>(
      args?: Subset<T, Task$assigneeArgs<ExtArgs>>,
    ): Prisma__UserClient<
      $Result.GetResult<
        Prisma.$UserPayload<ExtArgs>,
        T,
        "findUniqueOrThrow",
        GlobalOmitOptions
      > | null,
      null,
      ExtArgs,
      GlobalOmitOptions
    >;
    creator<T extends UserDefaultArgs<ExtArgs> = {}>(
      args?: Subset<T, UserDefaultArgs<ExtArgs>>,
    ): Prisma__UserClient<
      | $Result.GetResult<
          Prisma.$UserPayload<ExtArgs>,
          T,
          "findUniqueOrThrow",
          GlobalOmitOptions
        >
      | Null,
      Null,
      ExtArgs,
      GlobalOmitOptions
    >;
    tags<T extends Task$tagsArgs<ExtArgs> = {}>(
      args?: Subset<T, Task$tagsArgs<ExtArgs>>,
    ): Prisma.PrismaPromise<
      | $Result.GetResult<
          Prisma.$TaskTagPayload<ExtArgs>,
          T,
          "findMany",
          GlobalOmitOptions
        >
      | Null
    >;
    activities<T extends Task$activitiesArgs<ExtArgs> = {}>(
      args?: Subset<T, Task$activitiesArgs<ExtArgs>>,
    ): Prisma.PrismaPromise<
      | $Result.GetResult<
          Prisma.$ActivityPayload<ExtArgs>,
          T,
          "findMany",
          GlobalOmitOptions
        >
      | Null
    >;
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(
      onfulfilled?:
        | ((value: T) => TResult1 | PromiseLike<TResult1>)
        | undefined
        | null,
      onrejected?:
        | ((reason: any) => TResult2 | PromiseLike<TResult2>)
        | undefined
        | null,
    ): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(
      onrejected?:
        | ((reason: any) => TResult | PromiseLike<TResult>)
        | undefined
        | null,
    ): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }

  /**
   * Fields of the Task model
   */
  interface TaskFieldRefs {
    readonly id: FieldRef<"Task", "String">;
    readonly title: FieldRef<"Task", "String">;
    readonly description: FieldRef<"Task", "String">;
    readonly type: FieldRef<"Task", "TaskType">;
    readonly status: FieldRef<"Task", "TaskStatus">;
    readonly priority: FieldRef<"Task", "Priority">;
    readonly storyPoints: FieldRef<"Task", "Int">;
    readonly dueDate: FieldRef<"Task", "DateTime">;
    readonly createdAt: FieldRef<"Task", "DateTime">;
    readonly updatedAt: FieldRef<"Task", "DateTime">;
    readonly projectId: FieldRef<"Task", "String">;
    readonly sprintId: FieldRef<"Task", "String">;
    readonly assigneeId: FieldRef<"Task", "String">;
    readonly creatorId: FieldRef<"Task", "String">;
    readonly parentId: FieldRef<"Task", "String">;
  }

  // Custom InputTypes
  /**
   * Task findUnique
   */
  export type TaskFindUniqueArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * Select specific fields to fetch from the Task
     */
    select?: TaskSelect<ExtArgs> | null;
    /**
     * Omit specific fields from the Task
     */
    omit?: TaskOmit<ExtArgs> | null;
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TaskInclude<ExtArgs> | null;
    /**
     * Filter, which Task to fetch.
     */
    where: TaskWhereUniqueInput;
  };

  /**
   * Task findUniqueOrThrow
   */
  export type TaskFindUniqueOrThrowArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * Select specific fields to fetch from the Task
     */
    select?: TaskSelect<ExtArgs> | null;
    /**
     * Omit specific fields from the Task
     */
    omit?: TaskOmit<ExtArgs> | null;
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TaskInclude<ExtArgs> | null;
    /**
     * Filter, which Task to fetch.
     */
    where: TaskWhereUniqueInput;
  };

  /**
   * Task findFirst
   */
  export type TaskFindFirstArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * Select specific fields to fetch from the Task
     */
    select?: TaskSelect<ExtArgs> | null;
    /**
     * Omit specific fields from the Task
     */
    omit?: TaskOmit<ExtArgs> | null;
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TaskInclude<ExtArgs> | null;
    /**
     * Filter, which Task to fetch.
     */
    where?: TaskWhereInput;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     *
     * Determine the order of Tasks to fetch.
     */
    orderBy?: TaskOrderByWithRelationInput | TaskOrderByWithRelationInput[];
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     *
     * Sets the position for searching for Tasks.
     */
    cursor?: TaskWhereUniqueInput;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     *
     * Take `±n` Tasks from the position of the cursor.
     */
    take?: number;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     *
     * Skip the first `n` Tasks.
     */
    skip?: number;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     *
     * Filter by unique combinations of Tasks.
     */
    distinct?: TaskScalarFieldEnum | TaskScalarFieldEnum[];
  };

  /**
   * Task findFirstOrThrow
   */
  export type TaskFindFirstOrThrowArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * Select specific fields to fetch from the Task
     */
    select?: TaskSelect<ExtArgs> | null;
    /**
     * Omit specific fields from the Task
     */
    omit?: TaskOmit<ExtArgs> | null;
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TaskInclude<ExtArgs> | null;
    /**
     * Filter, which Task to fetch.
     */
    where?: TaskWhereInput;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     *
     * Determine the order of Tasks to fetch.
     */
    orderBy?: TaskOrderByWithRelationInput | TaskOrderByWithRelationInput[];
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     *
     * Sets the position for searching for Tasks.
     */
    cursor?: TaskWhereUniqueInput;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     *
     * Take `±n` Tasks from the position of the cursor.
     */
    take?: number;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     *
     * Skip the first `n` Tasks.
     */
    skip?: number;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     *
     * Filter by unique combinations of Tasks.
     */
    distinct?: TaskScalarFieldEnum | TaskScalarFieldEnum[];
  };

  /**
   * Task findMany
   */
  export type TaskFindManyArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * Select specific fields to fetch from the Task
     */
    select?: TaskSelect<ExtArgs> | null;
    /**
     * Omit specific fields from the Task
     */
    omit?: TaskOmit<ExtArgs> | null;
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TaskInclude<ExtArgs> | null;
    /**
     * Filter, which Tasks to fetch.
     */
    where?: TaskWhereInput;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     *
     * Determine the order of Tasks to fetch.
     */
    orderBy?: TaskOrderByWithRelationInput | TaskOrderByWithRelationInput[];
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     *
     * Sets the position for listing Tasks.
     */
    cursor?: TaskWhereUniqueInput;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     *
     * Take `±n` Tasks from the position of the cursor.
     */
    take?: number;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     *
     * Skip the first `n` Tasks.
     */
    skip?: number;
    distinct?: TaskScalarFieldEnum | TaskScalarFieldEnum[];
  };

  /**
   * Task create
   */
  export type TaskCreateArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * Select specific fields to fetch from the Task
     */
    select?: TaskSelect<ExtArgs> | null;
    /**
     * Omit specific fields from the Task
     */
    omit?: TaskOmit<ExtArgs> | null;
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TaskInclude<ExtArgs> | null;
    /**
     * The data needed to create a Task.
     */
    data: XOR<TaskCreateInput, TaskUncheckedCreateInput>;
  };

  /**
   * Task createMany
   */
  export type TaskCreateManyArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * The data used to create many Tasks.
     */
    data: TaskCreateManyInput | TaskCreateManyInput[];
    skipDuplicates?: boolean;
  };

  /**
   * Task createManyAndReturn
   */
  export type TaskCreateManyAndReturnArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * Select specific fields to fetch from the Task
     */
    select?: TaskSelectCreateManyAndReturn<ExtArgs> | null;
    /**
     * Omit specific fields from the Task
     */
    omit?: TaskOmit<ExtArgs> | null;
    /**
     * The data used to create many Tasks.
     */
    data: TaskCreateManyInput | TaskCreateManyInput[];
    skipDuplicates?: boolean;
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TaskIncludeCreateManyAndReturn<ExtArgs> | null;
  };

  /**
   * Task update
   */
  export type TaskUpdateArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * Select specific fields to fetch from the Task
     */
    select?: TaskSelect<ExtArgs> | null;
    /**
     * Omit specific fields from the Task
     */
    omit?: TaskOmit<ExtArgs> | null;
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TaskInclude<ExtArgs> | null;
    /**
     * The data needed to update a Task.
     */
    data: XOR<TaskUpdateInput, TaskUncheckedUpdateInput>;
    /**
     * Choose, which Task to update.
     */
    where: TaskWhereUniqueInput;
  };

  /**
   * Task updateMany
   */
  export type TaskUpdateManyArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * The data used to update Tasks.
     */
    data: XOR<TaskUpdateManyMutationInput, TaskUncheckedUpdateManyInput>;
    /**
     * Filter which Tasks to update
     */
    where?: TaskWhereInput;
    /**
     * Limit how many Tasks to update.
     */
    limit?: number;
  };

  /**
   * Task updateManyAndReturn
   */
  export type TaskUpdateManyAndReturnArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * Select specific fields to fetch from the Task
     */
    select?: TaskSelectUpdateManyAndReturn<ExtArgs> | null;
    /**
     * Omit specific fields from the Task
     */
    omit?: TaskOmit<ExtArgs> | null;
    /**
     * The data used to update Tasks.
     */
    data: XOR<TaskUpdateManyMutationInput, TaskUncheckedUpdateManyInput>;
    /**
     * Filter which Tasks to update
     */
    where?: TaskWhereInput;
    /**
     * Limit how many Tasks to update.
     */
    limit?: number;
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TaskIncludeUpdateManyAndReturn<ExtArgs> | null;
  };

  /**
   * Task upsert
   */
  export type TaskUpsertArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * Select specific fields to fetch from the Task
     */
    select?: TaskSelect<ExtArgs> | null;
    /**
     * Omit specific fields from the Task
     */
    omit?: TaskOmit<ExtArgs> | null;
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TaskInclude<ExtArgs> | null;
    /**
     * The filter to search for the Task to update in case it exists.
     */
    where: TaskWhereUniqueInput;
    /**
     * In case the Task found by the `where` argument doesn't exist, create a new Task with this data.
     */
    create: XOR<TaskCreateInput, TaskUncheckedCreateInput>;
    /**
     * In case the Task was found with the provided `where` argument, update it with this data.
     */
    update: XOR<TaskUpdateInput, TaskUncheckedUpdateInput>;
  };

  /**
   * Task delete
   */
  export type TaskDeleteArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * Select specific fields to fetch from the Task
     */
    select?: TaskSelect<ExtArgs> | null;
    /**
     * Omit specific fields from the Task
     */
    omit?: TaskOmit<ExtArgs> | null;
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TaskInclude<ExtArgs> | null;
    /**
     * Filter which Task to delete.
     */
    where: TaskWhereUniqueInput;
  };

  /**
   * Task deleteMany
   */
  export type TaskDeleteManyArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * Filter which Tasks to delete
     */
    where?: TaskWhereInput;
    /**
     * Limit how many Tasks to delete.
     */
    limit?: number;
  };

  /**
   * Task.sprint
   */
  export type Task$sprintArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * Select specific fields to fetch from the Sprint
     */
    select?: SprintSelect<ExtArgs> | null;
    /**
     * Omit specific fields from the Sprint
     */
    omit?: SprintOmit<ExtArgs> | null;
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SprintInclude<ExtArgs> | null;
    where?: SprintWhereInput;
  };

  /**
   * Task.assignee
   */
  export type Task$assigneeArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null;
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null;
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null;
    where?: UserWhereInput;
  };

  /**
   * Task.tags
   */
  export type Task$tagsArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * Select specific fields to fetch from the TaskTag
     */
    select?: TaskTagSelect<ExtArgs> | null;
    /**
     * Omit specific fields from the TaskTag
     */
    omit?: TaskTagOmit<ExtArgs> | null;
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TaskTagInclude<ExtArgs> | null;
    where?: TaskTagWhereInput;
    orderBy?:
      | TaskTagOrderByWithRelationInput
      | TaskTagOrderByWithRelationInput[];
    cursor?: TaskTagWhereUniqueInput;
    take?: number;
    skip?: number;
    distinct?: TaskTagScalarFieldEnum | TaskTagScalarFieldEnum[];
  };

  /**
   * Task.activities
   */
  export type Task$activitiesArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * Select specific fields to fetch from the Activity
     */
    select?: ActivitySelect<ExtArgs> | null;
    /**
     * Omit specific fields from the Activity
     */
    omit?: ActivityOmit<ExtArgs> | null;
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ActivityInclude<ExtArgs> | null;
    where?: ActivityWhereInput;
    orderBy?:
      | ActivityOrderByWithRelationInput
      | ActivityOrderByWithRelationInput[];
    cursor?: ActivityWhereUniqueInput;
    take?: number;
    skip?: number;
    distinct?: ActivityScalarFieldEnum | ActivityScalarFieldEnum[];
  };

  /**
   * Task without action
   */
  export type TaskDefaultArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * Select specific fields to fetch from the Task
     */
    select?: TaskSelect<ExtArgs> | null;
    /**
     * Omit specific fields from the Task
     */
    omit?: TaskOmit<ExtArgs> | null;
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TaskInclude<ExtArgs> | null;
  };

  /**
   * Model TaskTag
   */

  export type AggregateTaskTag = {
    _count: TaskTagCountAggregateOutputType | null;
    _min: TaskTagMinAggregateOutputType | null;
    _max: TaskTagMaxAggregateOutputType | null;
  };

  export type TaskTagMinAggregateOutputType = {
    id: string | null;
    name: string | null;
    color: string | null;
    taskId: string | null;
  };

  export type TaskTagMaxAggregateOutputType = {
    id: string | null;
    name: string | null;
    color: string | null;
    taskId: string | null;
  };

  export type TaskTagCountAggregateOutputType = {
    id: number;
    name: number;
    color: number;
    taskId: number;
    _all: number;
  };

  export type TaskTagMinAggregateInputType = {
    id?: true;
    name?: true;
    color?: true;
    taskId?: true;
  };

  export type TaskTagMaxAggregateInputType = {
    id?: true;
    name?: true;
    color?: true;
    taskId?: true;
  };

  export type TaskTagCountAggregateInputType = {
    id?: true;
    name?: true;
    color?: true;
    taskId?: true;
    _all?: true;
  };

  export type TaskTagAggregateArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * Filter which TaskTag to aggregate.
     */
    where?: TaskTagWhereInput;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     *
     * Determine the order of TaskTags to fetch.
     */
    orderBy?:
      | TaskTagOrderByWithRelationInput
      | TaskTagOrderByWithRelationInput[];
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     *
     * Sets the start position
     */
    cursor?: TaskTagWhereUniqueInput;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     *
     * Take `±n` TaskTags from the position of the cursor.
     */
    take?: number;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     *
     * Skip the first `n` TaskTags.
     */
    skip?: number;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     *
     * Count returned TaskTags
     **/
    _count?: true | TaskTagCountAggregateInputType;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     *
     * Select which fields to find the minimum value
     **/
    _min?: TaskTagMinAggregateInputType;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     *
     * Select which fields to find the maximum value
     **/
    _max?: TaskTagMaxAggregateInputType;
  };

  export type GetTaskTagAggregateType<T extends TaskTagAggregateArgs> = {
    [P in keyof T & keyof AggregateTaskTag]: P extends "_count" | "count"
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateTaskTag[P]>
      : GetScalarType<T[P], AggregateTaskTag[P]>;
  };

  export type TaskTagGroupByArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    where?: TaskTagWhereInput;
    orderBy?:
      | TaskTagOrderByWithAggregationInput
      | TaskTagOrderByWithAggregationInput[];
    by: TaskTagScalarFieldEnum[] | TaskTagScalarFieldEnum;
    having?: TaskTagScalarWhereWithAggregatesInput;
    take?: number;
    skip?: number;
    _count?: TaskTagCountAggregateInputType | true;
    _min?: TaskTagMinAggregateInputType;
    _max?: TaskTagMaxAggregateInputType;
  };

  export type TaskTagGroupByOutputType = {
    id: string;
    name: string;
    color: string | null;
    taskId: string;
    _count: TaskTagCountAggregateOutputType | null;
    _min: TaskTagMinAggregateOutputType | null;
    _max: TaskTagMaxAggregateOutputType | null;
  };

  type GetTaskTagGroupByPayload<T extends TaskTagGroupByArgs> =
    Prisma.PrismaPromise<
      Array<
        PickEnumerable<TaskTagGroupByOutputType, T["by"]> & {
          [P in keyof T & keyof TaskTagGroupByOutputType]: P extends "_count"
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], TaskTagGroupByOutputType[P]>
            : GetScalarType<T[P], TaskTagGroupByOutputType[P]>;
        }
      >
    >;

  export type TaskTagSelect<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = $Extensions.GetSelect<
    {
      id?: boolean;
      name?: boolean;
      color?: boolean;
      taskId?: boolean;
      task?: boolean | TaskDefaultArgs<ExtArgs>;
    },
    ExtArgs["result"]["taskTag"]
  >;

  export type TaskTagSelectCreateManyAndReturn<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = $Extensions.GetSelect<
    {
      id?: boolean;
      name?: boolean;
      color?: boolean;
      taskId?: boolean;
      task?: boolean | TaskDefaultArgs<ExtArgs>;
    },
    ExtArgs["result"]["taskTag"]
  >;

  export type TaskTagSelectUpdateManyAndReturn<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = $Extensions.GetSelect<
    {
      id?: boolean;
      name?: boolean;
      color?: boolean;
      taskId?: boolean;
      task?: boolean | TaskDefaultArgs<ExtArgs>;
    },
    ExtArgs["result"]["taskTag"]
  >;

  export type TaskTagSelectScalar = {
    id?: boolean;
    name?: boolean;
    color?: boolean;
    taskId?: boolean;
  };

  export type TaskTagOmit<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = $Extensions.GetOmit<
    "id" | "name" | "color" | "taskId",
    ExtArgs["result"]["taskTag"]
  >;
  export type TaskTagInclude<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    task?: boolean | TaskDefaultArgs<ExtArgs>;
  };
  export type TaskTagIncludeCreateManyAndReturn<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    task?: boolean | TaskDefaultArgs<ExtArgs>;
  };
  export type TaskTagIncludeUpdateManyAndReturn<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    task?: boolean | TaskDefaultArgs<ExtArgs>;
  };

  export type $TaskTagPayload<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    name: "TaskTag";
    objects: {
      task: Prisma.$TaskPayload<ExtArgs>;
    };
    scalars: $Extensions.GetPayloadResult<
      {
        id: string;
        name: string;
        color: string | null;
        taskId: string;
      },
      ExtArgs["result"]["taskTag"]
    >;
    composites: {};
  };

  type TaskTagGetPayload<
    S extends boolean | null | undefined | TaskTagDefaultArgs,
  > = $Result.GetResult<Prisma.$TaskTagPayload, S>;

  type TaskTagCountArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = Omit<TaskTagFindManyArgs, "select" | "include" | "distinct" | "omit"> & {
    select?: TaskTagCountAggregateInputType | true;
  };

  export interface TaskTagDelegate<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
    GlobalOmitOptions = {},
  > {
    [K: symbol]: {
      types: Prisma.TypeMap<ExtArgs>["model"]["TaskTag"];
      meta: { name: "TaskTag" };
    };
    /**
     * Find zero or one TaskTag that matches the filter.
     * @param {TaskTagFindUniqueArgs} args - Arguments to find a TaskTag
     * @example
     * // Get one TaskTag
     * const taskTag = await prisma.taskTag.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends TaskTagFindUniqueArgs>(
      args: SelectSubset<T, TaskTagFindUniqueArgs<ExtArgs>>,
    ): Prisma__TaskTagClient<
      $Result.GetResult<
        Prisma.$TaskTagPayload<ExtArgs>,
        T,
        "findUnique",
        GlobalOmitOptions
      > | null,
      null,
      ExtArgs,
      GlobalOmitOptions
    >;

    /**
     * Find one TaskTag that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {TaskTagFindUniqueOrThrowArgs} args - Arguments to find a TaskTag
     * @example
     * // Get one TaskTag
     * const taskTag = await prisma.taskTag.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends TaskTagFindUniqueOrThrowArgs>(
      args: SelectSubset<T, TaskTagFindUniqueOrThrowArgs<ExtArgs>>,
    ): Prisma__TaskTagClient<
      $Result.GetResult<
        Prisma.$TaskTagPayload<ExtArgs>,
        T,
        "findUniqueOrThrow",
        GlobalOmitOptions
      >,
      never,
      ExtArgs,
      GlobalOmitOptions
    >;

    /**
     * Find the first TaskTag that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TaskTagFindFirstArgs} args - Arguments to find a TaskTag
     * @example
     * // Get one TaskTag
     * const taskTag = await prisma.taskTag.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends TaskTagFindFirstArgs>(
      args?: SelectSubset<T, TaskTagFindFirstArgs<ExtArgs>>,
    ): Prisma__TaskTagClient<
      $Result.GetResult<
        Prisma.$TaskTagPayload<ExtArgs>,
        T,
        "findFirst",
        GlobalOmitOptions
      > | null,
      null,
      ExtArgs,
      GlobalOmitOptions
    >;

    /**
     * Find the first TaskTag that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TaskTagFindFirstOrThrowArgs} args - Arguments to find a TaskTag
     * @example
     * // Get one TaskTag
     * const taskTag = await prisma.taskTag.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends TaskTagFindFirstOrThrowArgs>(
      args?: SelectSubset<T, TaskTagFindFirstOrThrowArgs<ExtArgs>>,
    ): Prisma__TaskTagClient<
      $Result.GetResult<
        Prisma.$TaskTagPayload<ExtArgs>,
        T,
        "findFirstOrThrow",
        GlobalOmitOptions
      >,
      never,
      ExtArgs,
      GlobalOmitOptions
    >;

    /**
     * Find zero or more TaskTags that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TaskTagFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all TaskTags
     * const taskTags = await prisma.taskTag.findMany()
     *
     * // Get first 10 TaskTags
     * const taskTags = await prisma.taskTag.findMany({ take: 10 })
     *
     * // Only select the `id`
     * const taskTagWithIdOnly = await prisma.taskTag.findMany({ select: { id: true } })
     *
     */
    findMany<T extends TaskTagFindManyArgs>(
      args?: SelectSubset<T, TaskTagFindManyArgs<ExtArgs>>,
    ): Prisma.PrismaPromise<
      $Result.GetResult<
        Prisma.$TaskTagPayload<ExtArgs>,
        T,
        "findMany",
        GlobalOmitOptions
      >
    >;

    /**
     * Create a TaskTag.
     * @param {TaskTagCreateArgs} args - Arguments to create a TaskTag.
     * @example
     * // Create one TaskTag
     * const TaskTag = await prisma.taskTag.create({
     *   data: {
     *     // ... data to create a TaskTag
     *   }
     * })
     *
     */
    create<T extends TaskTagCreateArgs>(
      args: SelectSubset<T, TaskTagCreateArgs<ExtArgs>>,
    ): Prisma__TaskTagClient<
      $Result.GetResult<
        Prisma.$TaskTagPayload<ExtArgs>,
        T,
        "create",
        GlobalOmitOptions
      >,
      never,
      ExtArgs,
      GlobalOmitOptions
    >;

    /**
     * Create many TaskTags.
     * @param {TaskTagCreateManyArgs} args - Arguments to create many TaskTags.
     * @example
     * // Create many TaskTags
     * const taskTag = await prisma.taskTag.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *
     */
    createMany<T extends TaskTagCreateManyArgs>(
      args?: SelectSubset<T, TaskTagCreateManyArgs<ExtArgs>>,
    ): Prisma.PrismaPromise<BatchPayload>;

    /**
     * Create many TaskTags and returns the data saved in the database.
     * @param {TaskTagCreateManyAndReturnArgs} args - Arguments to create many TaskTags.
     * @example
     * // Create many TaskTags
     * const taskTag = await prisma.taskTag.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *
     * // Create many TaskTags and only return the `id`
     * const taskTagWithIdOnly = await prisma.taskTag.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     *
     */
    createManyAndReturn<T extends TaskTagCreateManyAndReturnArgs>(
      args?: SelectSubset<T, TaskTagCreateManyAndReturnArgs<ExtArgs>>,
    ): Prisma.PrismaPromise<
      $Result.GetResult<
        Prisma.$TaskTagPayload<ExtArgs>,
        T,
        "createManyAndReturn",
        GlobalOmitOptions
      >
    >;

    /**
     * Delete a TaskTag.
     * @param {TaskTagDeleteArgs} args - Arguments to delete one TaskTag.
     * @example
     * // Delete one TaskTag
     * const TaskTag = await prisma.taskTag.delete({
     *   where: {
     *     // ... filter to delete one TaskTag
     *   }
     * })
     *
     */
    delete<T extends TaskTagDeleteArgs>(
      args: SelectSubset<T, TaskTagDeleteArgs<ExtArgs>>,
    ): Prisma__TaskTagClient<
      $Result.GetResult<
        Prisma.$TaskTagPayload<ExtArgs>,
        T,
        "delete",
        GlobalOmitOptions
      >,
      never,
      ExtArgs,
      GlobalOmitOptions
    >;

    /**
     * Update one TaskTag.
     * @param {TaskTagUpdateArgs} args - Arguments to update one TaskTag.
     * @example
     * // Update one TaskTag
     * const taskTag = await prisma.taskTag.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     *
     */
    update<T extends TaskTagUpdateArgs>(
      args: SelectSubset<T, TaskTagUpdateArgs<ExtArgs>>,
    ): Prisma__TaskTagClient<
      $Result.GetResult<
        Prisma.$TaskTagPayload<ExtArgs>,
        T,
        "update",
        GlobalOmitOptions
      >,
      never,
      ExtArgs,
      GlobalOmitOptions
    >;

    /**
     * Delete zero or more TaskTags.
     * @param {TaskTagDeleteManyArgs} args - Arguments to filter TaskTags to delete.
     * @example
     * // Delete a few TaskTags
     * const { count } = await prisma.taskTag.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     *
     */
    deleteMany<T extends TaskTagDeleteManyArgs>(
      args?: SelectSubset<T, TaskTagDeleteManyArgs<ExtArgs>>,
    ): Prisma.PrismaPromise<BatchPayload>;

    /**
     * Update zero or more TaskTags.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TaskTagUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many TaskTags
     * const taskTag = await prisma.taskTag.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     *
     */
    updateMany<T extends TaskTagUpdateManyArgs>(
      args: SelectSubset<T, TaskTagUpdateManyArgs<ExtArgs>>,
    ): Prisma.PrismaPromise<BatchPayload>;

    /**
     * Update zero or more TaskTags and returns the data updated in the database.
     * @param {TaskTagUpdateManyAndReturnArgs} args - Arguments to update many TaskTags.
     * @example
     * // Update many TaskTags
     * const taskTag = await prisma.taskTag.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *
     * // Update zero or more TaskTags and only return the `id`
     * const taskTagWithIdOnly = await prisma.taskTag.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     *
     */
    updateManyAndReturn<T extends TaskTagUpdateManyAndReturnArgs>(
      args: SelectSubset<T, TaskTagUpdateManyAndReturnArgs<ExtArgs>>,
    ): Prisma.PrismaPromise<
      $Result.GetResult<
        Prisma.$TaskTagPayload<ExtArgs>,
        T,
        "updateManyAndReturn",
        GlobalOmitOptions
      >
    >;

    /**
     * Create or update one TaskTag.
     * @param {TaskTagUpsertArgs} args - Arguments to update or create a TaskTag.
     * @example
     * // Update or create a TaskTag
     * const taskTag = await prisma.taskTag.upsert({
     *   create: {
     *     // ... data to create a TaskTag
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the TaskTag we want to update
     *   }
     * })
     */
    upsert<T extends TaskTagUpsertArgs>(
      args: SelectSubset<T, TaskTagUpsertArgs<ExtArgs>>,
    ): Prisma__TaskTagClient<
      $Result.GetResult<
        Prisma.$TaskTagPayload<ExtArgs>,
        T,
        "upsert",
        GlobalOmitOptions
      >,
      never,
      ExtArgs,
      GlobalOmitOptions
    >;

    /**
     * Count the number of TaskTags.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TaskTagCountArgs} args - Arguments to filter TaskTags to count.
     * @example
     * // Count the number of TaskTags
     * const count = await prisma.taskTag.count({
     *   where: {
     *     // ... the filter for the TaskTags we want to count
     *   }
     * })
     **/
    count<T extends TaskTagCountArgs>(
      args?: Subset<T, TaskTagCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<"select", any>
        ? T["select"] extends true
          ? number
          : GetScalarType<T["select"], TaskTagCountAggregateOutputType>
        : number
    >;

    /**
     * Allows you to perform aggregations operations on a TaskTag.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TaskTagAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
     **/
    aggregate<T extends TaskTagAggregateArgs>(
      args: Subset<T, TaskTagAggregateArgs>,
    ): Prisma.PrismaPromise<GetTaskTagAggregateType<T>>;

    /**
     * Group by TaskTag.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TaskTagGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     *
     **/
    groupBy<
      T extends TaskTagGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<"skip", Keys<T>>,
        Extends<"take", Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: TaskTagGroupByArgs["orderBy"] }
        : { orderBy?: TaskTagGroupByArgs["orderBy"] },
      OrderFields extends ExcludeUnderscoreKeys<
        Keys<MaybeTupleToUnion<T["orderBy"]>>
      >,
      ByFields extends MaybeTupleToUnion<T["by"]>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T["having"]>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T["by"] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
        ? `Error: "by" must not be empty.`
        : HavingValid extends False
          ? {
              [P in HavingFields]: P extends ByFields
                ? never
                : P extends string
                  ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
                  : [
                      Error,
                      "Field ",
                      P,
                      ` in "having" needs to be provided in "by"`,
                    ];
            }[HavingFields]
          : "take" extends Keys<T>
            ? "orderBy" extends Keys<T>
              ? ByValid extends True
                ? {}
                : {
                    [P in OrderFields]: P extends ByFields
                      ? never
                      : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
                  }[OrderFields]
              : 'Error: If you provide "take", you also need to provide "orderBy"'
            : "skip" extends Keys<T>
              ? "orderBy" extends Keys<T>
                ? ByValid extends True
                  ? {}
                  : {
                      [P in OrderFields]: P extends ByFields
                        ? never
                        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
                    }[OrderFields]
                : 'Error: If you provide "skip", you also need to provide "orderBy"'
              : ByValid extends True
                ? {}
                : {
                    [P in OrderFields]: P extends ByFields
                      ? never
                      : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
                  }[OrderFields],
    >(
      args: SubsetIntersection<T, TaskTagGroupByArgs, OrderByArg> & InputErrors,
    ): {} extends InputErrors
      ? GetTaskTagGroupByPayload<T>
      : Prisma.PrismaPromise<InputErrors>;
    /**
     * Fields of the TaskTag model
     */
    readonly fields: TaskTagFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for TaskTag.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__TaskTagClient<
    T,
    Null = never,
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
    GlobalOmitOptions = {},
  > extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise";
    task<T extends TaskDefaultArgs<ExtArgs> = {}>(
      args?: Subset<T, TaskDefaultArgs<ExtArgs>>,
    ): Prisma__TaskClient<
      | $Result.GetResult<
          Prisma.$TaskPayload<ExtArgs>,
          T,
          "findUniqueOrThrow",
          GlobalOmitOptions
        >
      | Null,
      Null,
      ExtArgs,
      GlobalOmitOptions
    >;
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(
      onfulfilled?:
        | ((value: T) => TResult1 | PromiseLike<TResult1>)
        | undefined
        | null,
      onrejected?:
        | ((reason: any) => TResult2 | PromiseLike<TResult2>)
        | undefined
        | null,
    ): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(
      onrejected?:
        | ((reason: any) => TResult | PromiseLike<TResult>)
        | undefined
        | null,
    ): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }

  /**
   * Fields of the TaskTag model
   */
  interface TaskTagFieldRefs {
    readonly id: FieldRef<"TaskTag", "String">;
    readonly name: FieldRef<"TaskTag", "String">;
    readonly color: FieldRef<"TaskTag", "String">;
    readonly taskId: FieldRef<"TaskTag", "String">;
  }

  // Custom InputTypes
  /**
   * TaskTag findUnique
   */
  export type TaskTagFindUniqueArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * Select specific fields to fetch from the TaskTag
     */
    select?: TaskTagSelect<ExtArgs> | null;
    /**
     * Omit specific fields from the TaskTag
     */
    omit?: TaskTagOmit<ExtArgs> | null;
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TaskTagInclude<ExtArgs> | null;
    /**
     * Filter, which TaskTag to fetch.
     */
    where: TaskTagWhereUniqueInput;
  };

  /**
   * TaskTag findUniqueOrThrow
   */
  export type TaskTagFindUniqueOrThrowArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * Select specific fields to fetch from the TaskTag
     */
    select?: TaskTagSelect<ExtArgs> | null;
    /**
     * Omit specific fields from the TaskTag
     */
    omit?: TaskTagOmit<ExtArgs> | null;
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TaskTagInclude<ExtArgs> | null;
    /**
     * Filter, which TaskTag to fetch.
     */
    where: TaskTagWhereUniqueInput;
  };

  /**
   * TaskTag findFirst
   */
  export type TaskTagFindFirstArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * Select specific fields to fetch from the TaskTag
     */
    select?: TaskTagSelect<ExtArgs> | null;
    /**
     * Omit specific fields from the TaskTag
     */
    omit?: TaskTagOmit<ExtArgs> | null;
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TaskTagInclude<ExtArgs> | null;
    /**
     * Filter, which TaskTag to fetch.
     */
    where?: TaskTagWhereInput;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     *
     * Determine the order of TaskTags to fetch.
     */
    orderBy?:
      | TaskTagOrderByWithRelationInput
      | TaskTagOrderByWithRelationInput[];
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     *
     * Sets the position for searching for TaskTags.
     */
    cursor?: TaskTagWhereUniqueInput;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     *
     * Take `±n` TaskTags from the position of the cursor.
     */
    take?: number;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     *
     * Skip the first `n` TaskTags.
     */
    skip?: number;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     *
     * Filter by unique combinations of TaskTags.
     */
    distinct?: TaskTagScalarFieldEnum | TaskTagScalarFieldEnum[];
  };

  /**
   * TaskTag findFirstOrThrow
   */
  export type TaskTagFindFirstOrThrowArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * Select specific fields to fetch from the TaskTag
     */
    select?: TaskTagSelect<ExtArgs> | null;
    /**
     * Omit specific fields from the TaskTag
     */
    omit?: TaskTagOmit<ExtArgs> | null;
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TaskTagInclude<ExtArgs> | null;
    /**
     * Filter, which TaskTag to fetch.
     */
    where?: TaskTagWhereInput;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     *
     * Determine the order of TaskTags to fetch.
     */
    orderBy?:
      | TaskTagOrderByWithRelationInput
      | TaskTagOrderByWithRelationInput[];
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     *
     * Sets the position for searching for TaskTags.
     */
    cursor?: TaskTagWhereUniqueInput;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     *
     * Take `±n` TaskTags from the position of the cursor.
     */
    take?: number;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     *
     * Skip the first `n` TaskTags.
     */
    skip?: number;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     *
     * Filter by unique combinations of TaskTags.
     */
    distinct?: TaskTagScalarFieldEnum | TaskTagScalarFieldEnum[];
  };

  /**
   * TaskTag findMany
   */
  export type TaskTagFindManyArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * Select specific fields to fetch from the TaskTag
     */
    select?: TaskTagSelect<ExtArgs> | null;
    /**
     * Omit specific fields from the TaskTag
     */
    omit?: TaskTagOmit<ExtArgs> | null;
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TaskTagInclude<ExtArgs> | null;
    /**
     * Filter, which TaskTags to fetch.
     */
    where?: TaskTagWhereInput;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     *
     * Determine the order of TaskTags to fetch.
     */
    orderBy?:
      | TaskTagOrderByWithRelationInput
      | TaskTagOrderByWithRelationInput[];
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     *
     * Sets the position for listing TaskTags.
     */
    cursor?: TaskTagWhereUniqueInput;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     *
     * Take `±n` TaskTags from the position of the cursor.
     */
    take?: number;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     *
     * Skip the first `n` TaskTags.
     */
    skip?: number;
    distinct?: TaskTagScalarFieldEnum | TaskTagScalarFieldEnum[];
  };

  /**
   * TaskTag create
   */
  export type TaskTagCreateArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * Select specific fields to fetch from the TaskTag
     */
    select?: TaskTagSelect<ExtArgs> | null;
    /**
     * Omit specific fields from the TaskTag
     */
    omit?: TaskTagOmit<ExtArgs> | null;
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TaskTagInclude<ExtArgs> | null;
    /**
     * The data needed to create a TaskTag.
     */
    data: XOR<TaskTagCreateInput, TaskTagUncheckedCreateInput>;
  };

  /**
   * TaskTag createMany
   */
  export type TaskTagCreateManyArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * The data used to create many TaskTags.
     */
    data: TaskTagCreateManyInput | TaskTagCreateManyInput[];
    skipDuplicates?: boolean;
  };

  /**
   * TaskTag createManyAndReturn
   */
  export type TaskTagCreateManyAndReturnArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * Select specific fields to fetch from the TaskTag
     */
    select?: TaskTagSelectCreateManyAndReturn<ExtArgs> | null;
    /**
     * Omit specific fields from the TaskTag
     */
    omit?: TaskTagOmit<ExtArgs> | null;
    /**
     * The data used to create many TaskTags.
     */
    data: TaskTagCreateManyInput | TaskTagCreateManyInput[];
    skipDuplicates?: boolean;
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TaskTagIncludeCreateManyAndReturn<ExtArgs> | null;
  };

  /**
   * TaskTag update
   */
  export type TaskTagUpdateArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * Select specific fields to fetch from the TaskTag
     */
    select?: TaskTagSelect<ExtArgs> | null;
    /**
     * Omit specific fields from the TaskTag
     */
    omit?: TaskTagOmit<ExtArgs> | null;
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TaskTagInclude<ExtArgs> | null;
    /**
     * The data needed to update a TaskTag.
     */
    data: XOR<TaskTagUpdateInput, TaskTagUncheckedUpdateInput>;
    /**
     * Choose, which TaskTag to update.
     */
    where: TaskTagWhereUniqueInput;
  };

  /**
   * TaskTag updateMany
   */
  export type TaskTagUpdateManyArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * The data used to update TaskTags.
     */
    data: XOR<TaskTagUpdateManyMutationInput, TaskTagUncheckedUpdateManyInput>;
    /**
     * Filter which TaskTags to update
     */
    where?: TaskTagWhereInput;
    /**
     * Limit how many TaskTags to update.
     */
    limit?: number;
  };

  /**
   * TaskTag updateManyAndReturn
   */
  export type TaskTagUpdateManyAndReturnArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * Select specific fields to fetch from the TaskTag
     */
    select?: TaskTagSelectUpdateManyAndReturn<ExtArgs> | null;
    /**
     * Omit specific fields from the TaskTag
     */
    omit?: TaskTagOmit<ExtArgs> | null;
    /**
     * The data used to update TaskTags.
     */
    data: XOR<TaskTagUpdateManyMutationInput, TaskTagUncheckedUpdateManyInput>;
    /**
     * Filter which TaskTags to update
     */
    where?: TaskTagWhereInput;
    /**
     * Limit how many TaskTags to update.
     */
    limit?: number;
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TaskTagIncludeUpdateManyAndReturn<ExtArgs> | null;
  };

  /**
   * TaskTag upsert
   */
  export type TaskTagUpsertArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * Select specific fields to fetch from the TaskTag
     */
    select?: TaskTagSelect<ExtArgs> | null;
    /**
     * Omit specific fields from the TaskTag
     */
    omit?: TaskTagOmit<ExtArgs> | null;
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TaskTagInclude<ExtArgs> | null;
    /**
     * The filter to search for the TaskTag to update in case it exists.
     */
    where: TaskTagWhereUniqueInput;
    /**
     * In case the TaskTag found by the `where` argument doesn't exist, create a new TaskTag with this data.
     */
    create: XOR<TaskTagCreateInput, TaskTagUncheckedCreateInput>;
    /**
     * In case the TaskTag was found with the provided `where` argument, update it with this data.
     */
    update: XOR<TaskTagUpdateInput, TaskTagUncheckedUpdateInput>;
  };

  /**
   * TaskTag delete
   */
  export type TaskTagDeleteArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * Select specific fields to fetch from the TaskTag
     */
    select?: TaskTagSelect<ExtArgs> | null;
    /**
     * Omit specific fields from the TaskTag
     */
    omit?: TaskTagOmit<ExtArgs> | null;
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TaskTagInclude<ExtArgs> | null;
    /**
     * Filter which TaskTag to delete.
     */
    where: TaskTagWhereUniqueInput;
  };

  /**
   * TaskTag deleteMany
   */
  export type TaskTagDeleteManyArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * Filter which TaskTags to delete
     */
    where?: TaskTagWhereInput;
    /**
     * Limit how many TaskTags to delete.
     */
    limit?: number;
  };

  /**
   * TaskTag without action
   */
  export type TaskTagDefaultArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * Select specific fields to fetch from the TaskTag
     */
    select?: TaskTagSelect<ExtArgs> | null;
    /**
     * Omit specific fields from the TaskTag
     */
    omit?: TaskTagOmit<ExtArgs> | null;
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TaskTagInclude<ExtArgs> | null;
  };

  /**
   * Model Sprint
   */

  export type AggregateSprint = {
    _count: SprintCountAggregateOutputType | null;
    _avg: SprintAvgAggregateOutputType | null;
    _sum: SprintSumAggregateOutputType | null;
    _min: SprintMinAggregateOutputType | null;
    _max: SprintMaxAggregateOutputType | null;
  };

  export type SprintAvgAggregateOutputType = {
    progress: number | null;
  };

  export type SprintSumAggregateOutputType = {
    progress: number | null;
  };

  export type SprintMinAggregateOutputType = {
    id: string | null;
    name: string | null;
    goal: string | null;
    status: $Enums.SprintStatus | null;
    startDate: Date | null;
    endDate: Date | null;
    progress: number | null;
    createdAt: Date | null;
    updatedAt: Date | null;
    projectId: string | null;
    ownerId: string | null;
  };

  export type SprintMaxAggregateOutputType = {
    id: string | null;
    name: string | null;
    goal: string | null;
    status: $Enums.SprintStatus | null;
    startDate: Date | null;
    endDate: Date | null;
    progress: number | null;
    createdAt: Date | null;
    updatedAt: Date | null;
    projectId: string | null;
    ownerId: string | null;
  };

  export type SprintCountAggregateOutputType = {
    id: number;
    name: number;
    goal: number;
    status: number;
    startDate: number;
    endDate: number;
    progress: number;
    createdAt: number;
    updatedAt: number;
    projectId: number;
    ownerId: number;
    _all: number;
  };

  export type SprintAvgAggregateInputType = {
    progress?: true;
  };

  export type SprintSumAggregateInputType = {
    progress?: true;
  };

  export type SprintMinAggregateInputType = {
    id?: true;
    name?: true;
    goal?: true;
    status?: true;
    startDate?: true;
    endDate?: true;
    progress?: true;
    createdAt?: true;
    updatedAt?: true;
    projectId?: true;
    ownerId?: true;
  };

  export type SprintMaxAggregateInputType = {
    id?: true;
    name?: true;
    goal?: true;
    status?: true;
    startDate?: true;
    endDate?: true;
    progress?: true;
    createdAt?: true;
    updatedAt?: true;
    projectId?: true;
    ownerId?: true;
  };

  export type SprintCountAggregateInputType = {
    id?: true;
    name?: true;
    goal?: true;
    status?: true;
    startDate?: true;
    endDate?: true;
    progress?: true;
    createdAt?: true;
    updatedAt?: true;
    projectId?: true;
    ownerId?: true;
    _all?: true;
  };

  export type SprintAggregateArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * Filter which Sprint to aggregate.
     */
    where?: SprintWhereInput;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     *
     * Determine the order of Sprints to fetch.
     */
    orderBy?: SprintOrderByWithRelationInput | SprintOrderByWithRelationInput[];
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     *
     * Sets the start position
     */
    cursor?: SprintWhereUniqueInput;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     *
     * Take `±n` Sprints from the position of the cursor.
     */
    take?: number;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     *
     * Skip the first `n` Sprints.
     */
    skip?: number;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     *
     * Count returned Sprints
     **/
    _count?: true | SprintCountAggregateInputType;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     *
     * Select which fields to average
     **/
    _avg?: SprintAvgAggregateInputType;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     *
     * Select which fields to sum
     **/
    _sum?: SprintSumAggregateInputType;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     *
     * Select which fields to find the minimum value
     **/
    _min?: SprintMinAggregateInputType;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     *
     * Select which fields to find the maximum value
     **/
    _max?: SprintMaxAggregateInputType;
  };

  export type GetSprintAggregateType<T extends SprintAggregateArgs> = {
    [P in keyof T & keyof AggregateSprint]: P extends "_count" | "count"
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSprint[P]>
      : GetScalarType<T[P], AggregateSprint[P]>;
  };

  export type SprintGroupByArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    where?: SprintWhereInput;
    orderBy?:
      | SprintOrderByWithAggregationInput
      | SprintOrderByWithAggregationInput[];
    by: SprintScalarFieldEnum[] | SprintScalarFieldEnum;
    having?: SprintScalarWhereWithAggregatesInput;
    take?: number;
    skip?: number;
    _count?: SprintCountAggregateInputType | true;
    _avg?: SprintAvgAggregateInputType;
    _sum?: SprintSumAggregateInputType;
    _min?: SprintMinAggregateInputType;
    _max?: SprintMaxAggregateInputType;
  };

  export type SprintGroupByOutputType = {
    id: string;
    name: string;
    goal: string | null;
    status: $Enums.SprintStatus;
    startDate: Date | null;
    endDate: Date | null;
    progress: number;
    createdAt: Date;
    updatedAt: Date;
    projectId: string;
    ownerId: string;
    _count: SprintCountAggregateOutputType | null;
    _avg: SprintAvgAggregateOutputType | null;
    _sum: SprintSumAggregateOutputType | null;
    _min: SprintMinAggregateOutputType | null;
    _max: SprintMaxAggregateOutputType | null;
  };

  type GetSprintGroupByPayload<T extends SprintGroupByArgs> =
    Prisma.PrismaPromise<
      Array<
        PickEnumerable<SprintGroupByOutputType, T["by"]> & {
          [P in keyof T & keyof SprintGroupByOutputType]: P extends "_count"
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], SprintGroupByOutputType[P]>
            : GetScalarType<T[P], SprintGroupByOutputType[P]>;
        }
      >
    >;

  export type SprintSelect<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = $Extensions.GetSelect<
    {
      id?: boolean;
      name?: boolean;
      goal?: boolean;
      status?: boolean;
      startDate?: boolean;
      endDate?: boolean;
      progress?: boolean;
      createdAt?: boolean;
      updatedAt?: boolean;
      projectId?: boolean;
      ownerId?: boolean;
      project?: boolean | ProjectDefaultArgs<ExtArgs>;
      owner?: boolean | UserDefaultArgs<ExtArgs>;
      tasks?: boolean | Sprint$tasksArgs<ExtArgs>;
      _count?: boolean | SprintCountOutputTypeDefaultArgs<ExtArgs>;
    },
    ExtArgs["result"]["sprint"]
  >;

  export type SprintSelectCreateManyAndReturn<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = $Extensions.GetSelect<
    {
      id?: boolean;
      name?: boolean;
      goal?: boolean;
      status?: boolean;
      startDate?: boolean;
      endDate?: boolean;
      progress?: boolean;
      createdAt?: boolean;
      updatedAt?: boolean;
      projectId?: boolean;
      ownerId?: boolean;
      project?: boolean | ProjectDefaultArgs<ExtArgs>;
      owner?: boolean | UserDefaultArgs<ExtArgs>;
    },
    ExtArgs["result"]["sprint"]
  >;

  export type SprintSelectUpdateManyAndReturn<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = $Extensions.GetSelect<
    {
      id?: boolean;
      name?: boolean;
      goal?: boolean;
      status?: boolean;
      startDate?: boolean;
      endDate?: boolean;
      progress?: boolean;
      createdAt?: boolean;
      updatedAt?: boolean;
      projectId?: boolean;
      ownerId?: boolean;
      project?: boolean | ProjectDefaultArgs<ExtArgs>;
      owner?: boolean | UserDefaultArgs<ExtArgs>;
    },
    ExtArgs["result"]["sprint"]
  >;

  export type SprintSelectScalar = {
    id?: boolean;
    name?: boolean;
    goal?: boolean;
    status?: boolean;
    startDate?: boolean;
    endDate?: boolean;
    progress?: boolean;
    createdAt?: boolean;
    updatedAt?: boolean;
    projectId?: boolean;
    ownerId?: boolean;
  };

  export type SprintOmit<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = $Extensions.GetOmit<
    | "id"
    | "name"
    | "goal"
    | "status"
    | "startDate"
    | "endDate"
    | "progress"
    | "createdAt"
    | "updatedAt"
    | "projectId"
    | "ownerId",
    ExtArgs["result"]["sprint"]
  >;
  export type SprintInclude<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    project?: boolean | ProjectDefaultArgs<ExtArgs>;
    owner?: boolean | UserDefaultArgs<ExtArgs>;
    tasks?: boolean | Sprint$tasksArgs<ExtArgs>;
    _count?: boolean | SprintCountOutputTypeDefaultArgs<ExtArgs>;
  };
  export type SprintIncludeCreateManyAndReturn<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    project?: boolean | ProjectDefaultArgs<ExtArgs>;
    owner?: boolean | UserDefaultArgs<ExtArgs>;
  };
  export type SprintIncludeUpdateManyAndReturn<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    project?: boolean | ProjectDefaultArgs<ExtArgs>;
    owner?: boolean | UserDefaultArgs<ExtArgs>;
  };

  export type $SprintPayload<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    name: "Sprint";
    objects: {
      project: Prisma.$ProjectPayload<ExtArgs>;
      owner: Prisma.$UserPayload<ExtArgs>;
      tasks: Prisma.$TaskPayload<ExtArgs>[];
    };
    scalars: $Extensions.GetPayloadResult<
      {
        id: string;
        name: string;
        goal: string | null;
        status: $Enums.SprintStatus;
        startDate: Date | null;
        endDate: Date | null;
        progress: number;
        createdAt: Date;
        updatedAt: Date;
        projectId: string;
        ownerId: string;
      },
      ExtArgs["result"]["sprint"]
    >;
    composites: {};
  };

  type SprintGetPayload<
    S extends boolean | null | undefined | SprintDefaultArgs,
  > = $Result.GetResult<Prisma.$SprintPayload, S>;

  type SprintCountArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = Omit<SprintFindManyArgs, "select" | "include" | "distinct" | "omit"> & {
    select?: SprintCountAggregateInputType | true;
  };

  export interface SprintDelegate<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
    GlobalOmitOptions = {},
  > {
    [K: symbol]: {
      types: Prisma.TypeMap<ExtArgs>["model"]["Sprint"];
      meta: { name: "Sprint" };
    };
    /**
     * Find zero or one Sprint that matches the filter.
     * @param {SprintFindUniqueArgs} args - Arguments to find a Sprint
     * @example
     * // Get one Sprint
     * const sprint = await prisma.sprint.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends SprintFindUniqueArgs>(
      args: SelectSubset<T, SprintFindUniqueArgs<ExtArgs>>,
    ): Prisma__SprintClient<
      $Result.GetResult<
        Prisma.$SprintPayload<ExtArgs>,
        T,
        "findUnique",
        GlobalOmitOptions
      > | null,
      null,
      ExtArgs,
      GlobalOmitOptions
    >;

    /**
     * Find one Sprint that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {SprintFindUniqueOrThrowArgs} args - Arguments to find a Sprint
     * @example
     * // Get one Sprint
     * const sprint = await prisma.sprint.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends SprintFindUniqueOrThrowArgs>(
      args: SelectSubset<T, SprintFindUniqueOrThrowArgs<ExtArgs>>,
    ): Prisma__SprintClient<
      $Result.GetResult<
        Prisma.$SprintPayload<ExtArgs>,
        T,
        "findUniqueOrThrow",
        GlobalOmitOptions
      >,
      never,
      ExtArgs,
      GlobalOmitOptions
    >;

    /**
     * Find the first Sprint that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SprintFindFirstArgs} args - Arguments to find a Sprint
     * @example
     * // Get one Sprint
     * const sprint = await prisma.sprint.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends SprintFindFirstArgs>(
      args?: SelectSubset<T, SprintFindFirstArgs<ExtArgs>>,
    ): Prisma__SprintClient<
      $Result.GetResult<
        Prisma.$SprintPayload<ExtArgs>,
        T,
        "findFirst",
        GlobalOmitOptions
      > | null,
      null,
      ExtArgs,
      GlobalOmitOptions
    >;

    /**
     * Find the first Sprint that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SprintFindFirstOrThrowArgs} args - Arguments to find a Sprint
     * @example
     * // Get one Sprint
     * const sprint = await prisma.sprint.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends SprintFindFirstOrThrowArgs>(
      args?: SelectSubset<T, SprintFindFirstOrThrowArgs<ExtArgs>>,
    ): Prisma__SprintClient<
      $Result.GetResult<
        Prisma.$SprintPayload<ExtArgs>,
        T,
        "findFirstOrThrow",
        GlobalOmitOptions
      >,
      never,
      ExtArgs,
      GlobalOmitOptions
    >;

    /**
     * Find zero or more Sprints that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SprintFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Sprints
     * const sprints = await prisma.sprint.findMany()
     *
     * // Get first 10 Sprints
     * const sprints = await prisma.sprint.findMany({ take: 10 })
     *
     * // Only select the `id`
     * const sprintWithIdOnly = await prisma.sprint.findMany({ select: { id: true } })
     *
     */
    findMany<T extends SprintFindManyArgs>(
      args?: SelectSubset<T, SprintFindManyArgs<ExtArgs>>,
    ): Prisma.PrismaPromise<
      $Result.GetResult<
        Prisma.$SprintPayload<ExtArgs>,
        T,
        "findMany",
        GlobalOmitOptions
      >
    >;

    /**
     * Create a Sprint.
     * @param {SprintCreateArgs} args - Arguments to create a Sprint.
     * @example
     * // Create one Sprint
     * const Sprint = await prisma.sprint.create({
     *   data: {
     *     // ... data to create a Sprint
     *   }
     * })
     *
     */
    create<T extends SprintCreateArgs>(
      args: SelectSubset<T, SprintCreateArgs<ExtArgs>>,
    ): Prisma__SprintClient<
      $Result.GetResult<
        Prisma.$SprintPayload<ExtArgs>,
        T,
        "create",
        GlobalOmitOptions
      >,
      never,
      ExtArgs,
      GlobalOmitOptions
    >;

    /**
     * Create many Sprints.
     * @param {SprintCreateManyArgs} args - Arguments to create many Sprints.
     * @example
     * // Create many Sprints
     * const sprint = await prisma.sprint.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *
     */
    createMany<T extends SprintCreateManyArgs>(
      args?: SelectSubset<T, SprintCreateManyArgs<ExtArgs>>,
    ): Prisma.PrismaPromise<BatchPayload>;

    /**
     * Create many Sprints and returns the data saved in the database.
     * @param {SprintCreateManyAndReturnArgs} args - Arguments to create many Sprints.
     * @example
     * // Create many Sprints
     * const sprint = await prisma.sprint.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *
     * // Create many Sprints and only return the `id`
     * const sprintWithIdOnly = await prisma.sprint.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     *
     */
    createManyAndReturn<T extends SprintCreateManyAndReturnArgs>(
      args?: SelectSubset<T, SprintCreateManyAndReturnArgs<ExtArgs>>,
    ): Prisma.PrismaPromise<
      $Result.GetResult<
        Prisma.$SprintPayload<ExtArgs>,
        T,
        "createManyAndReturn",
        GlobalOmitOptions
      >
    >;

    /**
     * Delete a Sprint.
     * @param {SprintDeleteArgs} args - Arguments to delete one Sprint.
     * @example
     * // Delete one Sprint
     * const Sprint = await prisma.sprint.delete({
     *   where: {
     *     // ... filter to delete one Sprint
     *   }
     * })
     *
     */
    delete<T extends SprintDeleteArgs>(
      args: SelectSubset<T, SprintDeleteArgs<ExtArgs>>,
    ): Prisma__SprintClient<
      $Result.GetResult<
        Prisma.$SprintPayload<ExtArgs>,
        T,
        "delete",
        GlobalOmitOptions
      >,
      never,
      ExtArgs,
      GlobalOmitOptions
    >;

    /**
     * Update one Sprint.
     * @param {SprintUpdateArgs} args - Arguments to update one Sprint.
     * @example
     * // Update one Sprint
     * const sprint = await prisma.sprint.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     *
     */
    update<T extends SprintUpdateArgs>(
      args: SelectSubset<T, SprintUpdateArgs<ExtArgs>>,
    ): Prisma__SprintClient<
      $Result.GetResult<
        Prisma.$SprintPayload<ExtArgs>,
        T,
        "update",
        GlobalOmitOptions
      >,
      never,
      ExtArgs,
      GlobalOmitOptions
    >;

    /**
     * Delete zero or more Sprints.
     * @param {SprintDeleteManyArgs} args - Arguments to filter Sprints to delete.
     * @example
     * // Delete a few Sprints
     * const { count } = await prisma.sprint.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     *
     */
    deleteMany<T extends SprintDeleteManyArgs>(
      args?: SelectSubset<T, SprintDeleteManyArgs<ExtArgs>>,
    ): Prisma.PrismaPromise<BatchPayload>;

    /**
     * Update zero or more Sprints.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SprintUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Sprints
     * const sprint = await prisma.sprint.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     *
     */
    updateMany<T extends SprintUpdateManyArgs>(
      args: SelectSubset<T, SprintUpdateManyArgs<ExtArgs>>,
    ): Prisma.PrismaPromise<BatchPayload>;

    /**
     * Update zero or more Sprints and returns the data updated in the database.
     * @param {SprintUpdateManyAndReturnArgs} args - Arguments to update many Sprints.
     * @example
     * // Update many Sprints
     * const sprint = await prisma.sprint.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *
     * // Update zero or more Sprints and only return the `id`
     * const sprintWithIdOnly = await prisma.sprint.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     *
     */
    updateManyAndReturn<T extends SprintUpdateManyAndReturnArgs>(
      args: SelectSubset<T, SprintUpdateManyAndReturnArgs<ExtArgs>>,
    ): Prisma.PrismaPromise<
      $Result.GetResult<
        Prisma.$SprintPayload<ExtArgs>,
        T,
        "updateManyAndReturn",
        GlobalOmitOptions
      >
    >;

    /**
     * Create or update one Sprint.
     * @param {SprintUpsertArgs} args - Arguments to update or create a Sprint.
     * @example
     * // Update or create a Sprint
     * const sprint = await prisma.sprint.upsert({
     *   create: {
     *     // ... data to create a Sprint
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Sprint we want to update
     *   }
     * })
     */
    upsert<T extends SprintUpsertArgs>(
      args: SelectSubset<T, SprintUpsertArgs<ExtArgs>>,
    ): Prisma__SprintClient<
      $Result.GetResult<
        Prisma.$SprintPayload<ExtArgs>,
        T,
        "upsert",
        GlobalOmitOptions
      >,
      never,
      ExtArgs,
      GlobalOmitOptions
    >;

    /**
     * Count the number of Sprints.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SprintCountArgs} args - Arguments to filter Sprints to count.
     * @example
     * // Count the number of Sprints
     * const count = await prisma.sprint.count({
     *   where: {
     *     // ... the filter for the Sprints we want to count
     *   }
     * })
     **/
    count<T extends SprintCountArgs>(
      args?: Subset<T, SprintCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<"select", any>
        ? T["select"] extends true
          ? number
          : GetScalarType<T["select"], SprintCountAggregateOutputType>
        : number
    >;

    /**
     * Allows you to perform aggregations operations on a Sprint.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SprintAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
     **/
    aggregate<T extends SprintAggregateArgs>(
      args: Subset<T, SprintAggregateArgs>,
    ): Prisma.PrismaPromise<GetSprintAggregateType<T>>;

    /**
     * Group by Sprint.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SprintGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     *
     **/
    groupBy<
      T extends SprintGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<"skip", Keys<T>>,
        Extends<"take", Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: SprintGroupByArgs["orderBy"] }
        : { orderBy?: SprintGroupByArgs["orderBy"] },
      OrderFields extends ExcludeUnderscoreKeys<
        Keys<MaybeTupleToUnion<T["orderBy"]>>
      >,
      ByFields extends MaybeTupleToUnion<T["by"]>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T["having"]>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T["by"] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
        ? `Error: "by" must not be empty.`
        : HavingValid extends False
          ? {
              [P in HavingFields]: P extends ByFields
                ? never
                : P extends string
                  ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
                  : [
                      Error,
                      "Field ",
                      P,
                      ` in "having" needs to be provided in "by"`,
                    ];
            }[HavingFields]
          : "take" extends Keys<T>
            ? "orderBy" extends Keys<T>
              ? ByValid extends True
                ? {}
                : {
                    [P in OrderFields]: P extends ByFields
                      ? never
                      : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
                  }[OrderFields]
              : 'Error: If you provide "take", you also need to provide "orderBy"'
            : "skip" extends Keys<T>
              ? "orderBy" extends Keys<T>
                ? ByValid extends True
                  ? {}
                  : {
                      [P in OrderFields]: P extends ByFields
                        ? never
                        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
                    }[OrderFields]
                : 'Error: If you provide "skip", you also need to provide "orderBy"'
              : ByValid extends True
                ? {}
                : {
                    [P in OrderFields]: P extends ByFields
                      ? never
                      : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
                  }[OrderFields],
    >(
      args: SubsetIntersection<T, SprintGroupByArgs, OrderByArg> & InputErrors,
    ): {} extends InputErrors
      ? GetSprintGroupByPayload<T>
      : Prisma.PrismaPromise<InputErrors>;
    /**
     * Fields of the Sprint model
     */
    readonly fields: SprintFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Sprint.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__SprintClient<
    T,
    Null = never,
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
    GlobalOmitOptions = {},
  > extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise";
    project<T extends ProjectDefaultArgs<ExtArgs> = {}>(
      args?: Subset<T, ProjectDefaultArgs<ExtArgs>>,
    ): Prisma__ProjectClient<
      | $Result.GetResult<
          Prisma.$ProjectPayload<ExtArgs>,
          T,
          "findUniqueOrThrow",
          GlobalOmitOptions
        >
      | Null,
      Null,
      ExtArgs,
      GlobalOmitOptions
    >;
    owner<T extends UserDefaultArgs<ExtArgs> = {}>(
      args?: Subset<T, UserDefaultArgs<ExtArgs>>,
    ): Prisma__UserClient<
      | $Result.GetResult<
          Prisma.$UserPayload<ExtArgs>,
          T,
          "findUniqueOrThrow",
          GlobalOmitOptions
        >
      | Null,
      Null,
      ExtArgs,
      GlobalOmitOptions
    >;
    tasks<T extends Sprint$tasksArgs<ExtArgs> = {}>(
      args?: Subset<T, Sprint$tasksArgs<ExtArgs>>,
    ): Prisma.PrismaPromise<
      | $Result.GetResult<
          Prisma.$TaskPayload<ExtArgs>,
          T,
          "findMany",
          GlobalOmitOptions
        >
      | Null
    >;
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(
      onfulfilled?:
        | ((value: T) => TResult1 | PromiseLike<TResult1>)
        | undefined
        | null,
      onrejected?:
        | ((reason: any) => TResult2 | PromiseLike<TResult2>)
        | undefined
        | null,
    ): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(
      onrejected?:
        | ((reason: any) => TResult | PromiseLike<TResult>)
        | undefined
        | null,
    ): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }

  /**
   * Fields of the Sprint model
   */
  interface SprintFieldRefs {
    readonly id: FieldRef<"Sprint", "String">;
    readonly name: FieldRef<"Sprint", "String">;
    readonly goal: FieldRef<"Sprint", "String">;
    readonly status: FieldRef<"Sprint", "SprintStatus">;
    readonly startDate: FieldRef<"Sprint", "DateTime">;
    readonly endDate: FieldRef<"Sprint", "DateTime">;
    readonly progress: FieldRef<"Sprint", "Int">;
    readonly createdAt: FieldRef<"Sprint", "DateTime">;
    readonly updatedAt: FieldRef<"Sprint", "DateTime">;
    readonly projectId: FieldRef<"Sprint", "String">;
    readonly ownerId: FieldRef<"Sprint", "String">;
  }

  // Custom InputTypes
  /**
   * Sprint findUnique
   */
  export type SprintFindUniqueArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * Select specific fields to fetch from the Sprint
     */
    select?: SprintSelect<ExtArgs> | null;
    /**
     * Omit specific fields from the Sprint
     */
    omit?: SprintOmit<ExtArgs> | null;
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SprintInclude<ExtArgs> | null;
    /**
     * Filter, which Sprint to fetch.
     */
    where: SprintWhereUniqueInput;
  };

  /**
   * Sprint findUniqueOrThrow
   */
  export type SprintFindUniqueOrThrowArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * Select specific fields to fetch from the Sprint
     */
    select?: SprintSelect<ExtArgs> | null;
    /**
     * Omit specific fields from the Sprint
     */
    omit?: SprintOmit<ExtArgs> | null;
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SprintInclude<ExtArgs> | null;
    /**
     * Filter, which Sprint to fetch.
     */
    where: SprintWhereUniqueInput;
  };

  /**
   * Sprint findFirst
   */
  export type SprintFindFirstArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * Select specific fields to fetch from the Sprint
     */
    select?: SprintSelect<ExtArgs> | null;
    /**
     * Omit specific fields from the Sprint
     */
    omit?: SprintOmit<ExtArgs> | null;
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SprintInclude<ExtArgs> | null;
    /**
     * Filter, which Sprint to fetch.
     */
    where?: SprintWhereInput;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     *
     * Determine the order of Sprints to fetch.
     */
    orderBy?: SprintOrderByWithRelationInput | SprintOrderByWithRelationInput[];
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     *
     * Sets the position for searching for Sprints.
     */
    cursor?: SprintWhereUniqueInput;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     *
     * Take `±n` Sprints from the position of the cursor.
     */
    take?: number;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     *
     * Skip the first `n` Sprints.
     */
    skip?: number;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     *
     * Filter by unique combinations of Sprints.
     */
    distinct?: SprintScalarFieldEnum | SprintScalarFieldEnum[];
  };

  /**
   * Sprint findFirstOrThrow
   */
  export type SprintFindFirstOrThrowArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * Select specific fields to fetch from the Sprint
     */
    select?: SprintSelect<ExtArgs> | null;
    /**
     * Omit specific fields from the Sprint
     */
    omit?: SprintOmit<ExtArgs> | null;
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SprintInclude<ExtArgs> | null;
    /**
     * Filter, which Sprint to fetch.
     */
    where?: SprintWhereInput;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     *
     * Determine the order of Sprints to fetch.
     */
    orderBy?: SprintOrderByWithRelationInput | SprintOrderByWithRelationInput[];
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     *
     * Sets the position for searching for Sprints.
     */
    cursor?: SprintWhereUniqueInput;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     *
     * Take `±n` Sprints from the position of the cursor.
     */
    take?: number;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     *
     * Skip the first `n` Sprints.
     */
    skip?: number;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     *
     * Filter by unique combinations of Sprints.
     */
    distinct?: SprintScalarFieldEnum | SprintScalarFieldEnum[];
  };

  /**
   * Sprint findMany
   */
  export type SprintFindManyArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * Select specific fields to fetch from the Sprint
     */
    select?: SprintSelect<ExtArgs> | null;
    /**
     * Omit specific fields from the Sprint
     */
    omit?: SprintOmit<ExtArgs> | null;
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SprintInclude<ExtArgs> | null;
    /**
     * Filter, which Sprints to fetch.
     */
    where?: SprintWhereInput;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     *
     * Determine the order of Sprints to fetch.
     */
    orderBy?: SprintOrderByWithRelationInput | SprintOrderByWithRelationInput[];
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     *
     * Sets the position for listing Sprints.
     */
    cursor?: SprintWhereUniqueInput;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     *
     * Take `±n` Sprints from the position of the cursor.
     */
    take?: number;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     *
     * Skip the first `n` Sprints.
     */
    skip?: number;
    distinct?: SprintScalarFieldEnum | SprintScalarFieldEnum[];
  };

  /**
   * Sprint create
   */
  export type SprintCreateArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * Select specific fields to fetch from the Sprint
     */
    select?: SprintSelect<ExtArgs> | null;
    /**
     * Omit specific fields from the Sprint
     */
    omit?: SprintOmit<ExtArgs> | null;
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SprintInclude<ExtArgs> | null;
    /**
     * The data needed to create a Sprint.
     */
    data: XOR<SprintCreateInput, SprintUncheckedCreateInput>;
  };

  /**
   * Sprint createMany
   */
  export type SprintCreateManyArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * The data used to create many Sprints.
     */
    data: SprintCreateManyInput | SprintCreateManyInput[];
    skipDuplicates?: boolean;
  };

  /**
   * Sprint createManyAndReturn
   */
  export type SprintCreateManyAndReturnArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * Select specific fields to fetch from the Sprint
     */
    select?: SprintSelectCreateManyAndReturn<ExtArgs> | null;
    /**
     * Omit specific fields from the Sprint
     */
    omit?: SprintOmit<ExtArgs> | null;
    /**
     * The data used to create many Sprints.
     */
    data: SprintCreateManyInput | SprintCreateManyInput[];
    skipDuplicates?: boolean;
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SprintIncludeCreateManyAndReturn<ExtArgs> | null;
  };

  /**
   * Sprint update
   */
  export type SprintUpdateArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * Select specific fields to fetch from the Sprint
     */
    select?: SprintSelect<ExtArgs> | null;
    /**
     * Omit specific fields from the Sprint
     */
    omit?: SprintOmit<ExtArgs> | null;
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SprintInclude<ExtArgs> | null;
    /**
     * The data needed to update a Sprint.
     */
    data: XOR<SprintUpdateInput, SprintUncheckedUpdateInput>;
    /**
     * Choose, which Sprint to update.
     */
    where: SprintWhereUniqueInput;
  };

  /**
   * Sprint updateMany
   */
  export type SprintUpdateManyArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * The data used to update Sprints.
     */
    data: XOR<SprintUpdateManyMutationInput, SprintUncheckedUpdateManyInput>;
    /**
     * Filter which Sprints to update
     */
    where?: SprintWhereInput;
    /**
     * Limit how many Sprints to update.
     */
    limit?: number;
  };

  /**
   * Sprint updateManyAndReturn
   */
  export type SprintUpdateManyAndReturnArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * Select specific fields to fetch from the Sprint
     */
    select?: SprintSelectUpdateManyAndReturn<ExtArgs> | null;
    /**
     * Omit specific fields from the Sprint
     */
    omit?: SprintOmit<ExtArgs> | null;
    /**
     * The data used to update Sprints.
     */
    data: XOR<SprintUpdateManyMutationInput, SprintUncheckedUpdateManyInput>;
    /**
     * Filter which Sprints to update
     */
    where?: SprintWhereInput;
    /**
     * Limit how many Sprints to update.
     */
    limit?: number;
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SprintIncludeUpdateManyAndReturn<ExtArgs> | null;
  };

  /**
   * Sprint upsert
   */
  export type SprintUpsertArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * Select specific fields to fetch from the Sprint
     */
    select?: SprintSelect<ExtArgs> | null;
    /**
     * Omit specific fields from the Sprint
     */
    omit?: SprintOmit<ExtArgs> | null;
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SprintInclude<ExtArgs> | null;
    /**
     * The filter to search for the Sprint to update in case it exists.
     */
    where: SprintWhereUniqueInput;
    /**
     * In case the Sprint found by the `where` argument doesn't exist, create a new Sprint with this data.
     */
    create: XOR<SprintCreateInput, SprintUncheckedCreateInput>;
    /**
     * In case the Sprint was found with the provided `where` argument, update it with this data.
     */
    update: XOR<SprintUpdateInput, SprintUncheckedUpdateInput>;
  };

  /**
   * Sprint delete
   */
  export type SprintDeleteArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * Select specific fields to fetch from the Sprint
     */
    select?: SprintSelect<ExtArgs> | null;
    /**
     * Omit specific fields from the Sprint
     */
    omit?: SprintOmit<ExtArgs> | null;
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SprintInclude<ExtArgs> | null;
    /**
     * Filter which Sprint to delete.
     */
    where: SprintWhereUniqueInput;
  };

  /**
   * Sprint deleteMany
   */
  export type SprintDeleteManyArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * Filter which Sprints to delete
     */
    where?: SprintWhereInput;
    /**
     * Limit how many Sprints to delete.
     */
    limit?: number;
  };

  /**
   * Sprint.tasks
   */
  export type Sprint$tasksArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * Select specific fields to fetch from the Task
     */
    select?: TaskSelect<ExtArgs> | null;
    /**
     * Omit specific fields from the Task
     */
    omit?: TaskOmit<ExtArgs> | null;
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TaskInclude<ExtArgs> | null;
    where?: TaskWhereInput;
    orderBy?: TaskOrderByWithRelationInput | TaskOrderByWithRelationInput[];
    cursor?: TaskWhereUniqueInput;
    take?: number;
    skip?: number;
    distinct?: TaskScalarFieldEnum | TaskScalarFieldEnum[];
  };

  /**
   * Sprint without action
   */
  export type SprintDefaultArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * Select specific fields to fetch from the Sprint
     */
    select?: SprintSelect<ExtArgs> | null;
    /**
     * Omit specific fields from the Sprint
     */
    omit?: SprintOmit<ExtArgs> | null;
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SprintInclude<ExtArgs> | null;
  };

  /**
   * Model Milestone
   */

  export type AggregateMilestone = {
    _count: MilestoneCountAggregateOutputType | null;
    _avg: MilestoneAvgAggregateOutputType | null;
    _sum: MilestoneSumAggregateOutputType | null;
    _min: MilestoneMinAggregateOutputType | null;
    _max: MilestoneMaxAggregateOutputType | null;
  };

  export type MilestoneAvgAggregateOutputType = {
    progress: number | null;
  };

  export type MilestoneSumAggregateOutputType = {
    progress: number | null;
  };

  export type MilestoneMinAggregateOutputType = {
    id: string | null;
    title: string | null;
    description: string | null;
    status: $Enums.MilestoneStatus | null;
    progress: number | null;
    startDate: Date | null;
    endDate: Date | null;
    createdAt: Date | null;
    updatedAt: Date | null;
    projectId: string | null;
    ownerId: string | null;
  };

  export type MilestoneMaxAggregateOutputType = {
    id: string | null;
    title: string | null;
    description: string | null;
    status: $Enums.MilestoneStatus | null;
    progress: number | null;
    startDate: Date | null;
    endDate: Date | null;
    createdAt: Date | null;
    updatedAt: Date | null;
    projectId: string | null;
    ownerId: string | null;
  };

  export type MilestoneCountAggregateOutputType = {
    id: number;
    title: number;
    description: number;
    status: number;
    progress: number;
    startDate: number;
    endDate: number;
    createdAt: number;
    updatedAt: number;
    projectId: number;
    ownerId: number;
    _all: number;
  };

  export type MilestoneAvgAggregateInputType = {
    progress?: true;
  };

  export type MilestoneSumAggregateInputType = {
    progress?: true;
  };

  export type MilestoneMinAggregateInputType = {
    id?: true;
    title?: true;
    description?: true;
    status?: true;
    progress?: true;
    startDate?: true;
    endDate?: true;
    createdAt?: true;
    updatedAt?: true;
    projectId?: true;
    ownerId?: true;
  };

  export type MilestoneMaxAggregateInputType = {
    id?: true;
    title?: true;
    description?: true;
    status?: true;
    progress?: true;
    startDate?: true;
    endDate?: true;
    createdAt?: true;
    updatedAt?: true;
    projectId?: true;
    ownerId?: true;
  };

  export type MilestoneCountAggregateInputType = {
    id?: true;
    title?: true;
    description?: true;
    status?: true;
    progress?: true;
    startDate?: true;
    endDate?: true;
    createdAt?: true;
    updatedAt?: true;
    projectId?: true;
    ownerId?: true;
    _all?: true;
  };

  export type MilestoneAggregateArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * Filter which Milestone to aggregate.
     */
    where?: MilestoneWhereInput;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     *
     * Determine the order of Milestones to fetch.
     */
    orderBy?:
      | MilestoneOrderByWithRelationInput
      | MilestoneOrderByWithRelationInput[];
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     *
     * Sets the start position
     */
    cursor?: MilestoneWhereUniqueInput;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     *
     * Take `±n` Milestones from the position of the cursor.
     */
    take?: number;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     *
     * Skip the first `n` Milestones.
     */
    skip?: number;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     *
     * Count returned Milestones
     **/
    _count?: true | MilestoneCountAggregateInputType;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     *
     * Select which fields to average
     **/
    _avg?: MilestoneAvgAggregateInputType;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     *
     * Select which fields to sum
     **/
    _sum?: MilestoneSumAggregateInputType;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     *
     * Select which fields to find the minimum value
     **/
    _min?: MilestoneMinAggregateInputType;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     *
     * Select which fields to find the maximum value
     **/
    _max?: MilestoneMaxAggregateInputType;
  };

  export type GetMilestoneAggregateType<T extends MilestoneAggregateArgs> = {
    [P in keyof T & keyof AggregateMilestone]: P extends "_count" | "count"
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateMilestone[P]>
      : GetScalarType<T[P], AggregateMilestone[P]>;
  };

  export type MilestoneGroupByArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    where?: MilestoneWhereInput;
    orderBy?:
      | MilestoneOrderByWithAggregationInput
      | MilestoneOrderByWithAggregationInput[];
    by: MilestoneScalarFieldEnum[] | MilestoneScalarFieldEnum;
    having?: MilestoneScalarWhereWithAggregatesInput;
    take?: number;
    skip?: number;
    _count?: MilestoneCountAggregateInputType | true;
    _avg?: MilestoneAvgAggregateInputType;
    _sum?: MilestoneSumAggregateInputType;
    _min?: MilestoneMinAggregateInputType;
    _max?: MilestoneMaxAggregateInputType;
  };

  export type MilestoneGroupByOutputType = {
    id: string;
    title: string;
    description: string | null;
    status: $Enums.MilestoneStatus;
    progress: number;
    startDate: Date | null;
    endDate: Date | null;
    createdAt: Date;
    updatedAt: Date;
    projectId: string;
    ownerId: string;
    _count: MilestoneCountAggregateOutputType | null;
    _avg: MilestoneAvgAggregateOutputType | null;
    _sum: MilestoneSumAggregateOutputType | null;
    _min: MilestoneMinAggregateOutputType | null;
    _max: MilestoneMaxAggregateOutputType | null;
  };

  type GetMilestoneGroupByPayload<T extends MilestoneGroupByArgs> =
    Prisma.PrismaPromise<
      Array<
        PickEnumerable<MilestoneGroupByOutputType, T["by"]> & {
          [P in keyof T & keyof MilestoneGroupByOutputType]: P extends "_count"
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], MilestoneGroupByOutputType[P]>
            : GetScalarType<T[P], MilestoneGroupByOutputType[P]>;
        }
      >
    >;

  export type MilestoneSelect<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = $Extensions.GetSelect<
    {
      id?: boolean;
      title?: boolean;
      description?: boolean;
      status?: boolean;
      progress?: boolean;
      startDate?: boolean;
      endDate?: boolean;
      createdAt?: boolean;
      updatedAt?: boolean;
      projectId?: boolean;
      ownerId?: boolean;
      project?: boolean | ProjectDefaultArgs<ExtArgs>;
      owner?: boolean | UserDefaultArgs<ExtArgs>;
      dependencies?: boolean | Milestone$dependenciesArgs<ExtArgs>;
      dependents?: boolean | Milestone$dependentsArgs<ExtArgs>;
      _count?: boolean | MilestoneCountOutputTypeDefaultArgs<ExtArgs>;
    },
    ExtArgs["result"]["milestone"]
  >;

  export type MilestoneSelectCreateManyAndReturn<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = $Extensions.GetSelect<
    {
      id?: boolean;
      title?: boolean;
      description?: boolean;
      status?: boolean;
      progress?: boolean;
      startDate?: boolean;
      endDate?: boolean;
      createdAt?: boolean;
      updatedAt?: boolean;
      projectId?: boolean;
      ownerId?: boolean;
      project?: boolean | ProjectDefaultArgs<ExtArgs>;
      owner?: boolean | UserDefaultArgs<ExtArgs>;
    },
    ExtArgs["result"]["milestone"]
  >;

  export type MilestoneSelectUpdateManyAndReturn<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = $Extensions.GetSelect<
    {
      id?: boolean;
      title?: boolean;
      description?: boolean;
      status?: boolean;
      progress?: boolean;
      startDate?: boolean;
      endDate?: boolean;
      createdAt?: boolean;
      updatedAt?: boolean;
      projectId?: boolean;
      ownerId?: boolean;
      project?: boolean | ProjectDefaultArgs<ExtArgs>;
      owner?: boolean | UserDefaultArgs<ExtArgs>;
    },
    ExtArgs["result"]["milestone"]
  >;

  export type MilestoneSelectScalar = {
    id?: boolean;
    title?: boolean;
    description?: boolean;
    status?: boolean;
    progress?: boolean;
    startDate?: boolean;
    endDate?: boolean;
    createdAt?: boolean;
    updatedAt?: boolean;
    projectId?: boolean;
    ownerId?: boolean;
  };

  export type MilestoneOmit<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = $Extensions.GetOmit<
    | "id"
    | "title"
    | "description"
    | "status"
    | "progress"
    | "startDate"
    | "endDate"
    | "createdAt"
    | "updatedAt"
    | "projectId"
    | "ownerId",
    ExtArgs["result"]["milestone"]
  >;
  export type MilestoneInclude<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    project?: boolean | ProjectDefaultArgs<ExtArgs>;
    owner?: boolean | UserDefaultArgs<ExtArgs>;
    dependencies?: boolean | Milestone$dependenciesArgs<ExtArgs>;
    dependents?: boolean | Milestone$dependentsArgs<ExtArgs>;
    _count?: boolean | MilestoneCountOutputTypeDefaultArgs<ExtArgs>;
  };
  export type MilestoneIncludeCreateManyAndReturn<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    project?: boolean | ProjectDefaultArgs<ExtArgs>;
    owner?: boolean | UserDefaultArgs<ExtArgs>;
  };
  export type MilestoneIncludeUpdateManyAndReturn<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    project?: boolean | ProjectDefaultArgs<ExtArgs>;
    owner?: boolean | UserDefaultArgs<ExtArgs>;
  };

  export type $MilestonePayload<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    name: "Milestone";
    objects: {
      project: Prisma.$ProjectPayload<ExtArgs>;
      owner: Prisma.$UserPayload<ExtArgs>;
      dependencies: Prisma.$MilestoneDependencyPayload<ExtArgs>[];
      dependents: Prisma.$MilestoneDependencyPayload<ExtArgs>[];
    };
    scalars: $Extensions.GetPayloadResult<
      {
        id: string;
        title: string;
        description: string | null;
        status: $Enums.MilestoneStatus;
        progress: number;
        startDate: Date | null;
        endDate: Date | null;
        createdAt: Date;
        updatedAt: Date;
        projectId: string;
        ownerId: string;
      },
      ExtArgs["result"]["milestone"]
    >;
    composites: {};
  };

  type MilestoneGetPayload<
    S extends boolean | null | undefined | MilestoneDefaultArgs,
  > = $Result.GetResult<Prisma.$MilestonePayload, S>;

  type MilestoneCountArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = Omit<
    MilestoneFindManyArgs,
    "select" | "include" | "distinct" | "omit"
  > & {
    select?: MilestoneCountAggregateInputType | true;
  };

  export interface MilestoneDelegate<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
    GlobalOmitOptions = {},
  > {
    [K: symbol]: {
      types: Prisma.TypeMap<ExtArgs>["model"]["Milestone"];
      meta: { name: "Milestone" };
    };
    /**
     * Find zero or one Milestone that matches the filter.
     * @param {MilestoneFindUniqueArgs} args - Arguments to find a Milestone
     * @example
     * // Get one Milestone
     * const milestone = await prisma.milestone.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends MilestoneFindUniqueArgs>(
      args: SelectSubset<T, MilestoneFindUniqueArgs<ExtArgs>>,
    ): Prisma__MilestoneClient<
      $Result.GetResult<
        Prisma.$MilestonePayload<ExtArgs>,
        T,
        "findUnique",
        GlobalOmitOptions
      > | null,
      null,
      ExtArgs,
      GlobalOmitOptions
    >;

    /**
     * Find one Milestone that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {MilestoneFindUniqueOrThrowArgs} args - Arguments to find a Milestone
     * @example
     * // Get one Milestone
     * const milestone = await prisma.milestone.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends MilestoneFindUniqueOrThrowArgs>(
      args: SelectSubset<T, MilestoneFindUniqueOrThrowArgs<ExtArgs>>,
    ): Prisma__MilestoneClient<
      $Result.GetResult<
        Prisma.$MilestonePayload<ExtArgs>,
        T,
        "findUniqueOrThrow",
        GlobalOmitOptions
      >,
      never,
      ExtArgs,
      GlobalOmitOptions
    >;

    /**
     * Find the first Milestone that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MilestoneFindFirstArgs} args - Arguments to find a Milestone
     * @example
     * // Get one Milestone
     * const milestone = await prisma.milestone.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends MilestoneFindFirstArgs>(
      args?: SelectSubset<T, MilestoneFindFirstArgs<ExtArgs>>,
    ): Prisma__MilestoneClient<
      $Result.GetResult<
        Prisma.$MilestonePayload<ExtArgs>,
        T,
        "findFirst",
        GlobalOmitOptions
      > | null,
      null,
      ExtArgs,
      GlobalOmitOptions
    >;

    /**
     * Find the first Milestone that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MilestoneFindFirstOrThrowArgs} args - Arguments to find a Milestone
     * @example
     * // Get one Milestone
     * const milestone = await prisma.milestone.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends MilestoneFindFirstOrThrowArgs>(
      args?: SelectSubset<T, MilestoneFindFirstOrThrowArgs<ExtArgs>>,
    ): Prisma__MilestoneClient<
      $Result.GetResult<
        Prisma.$MilestonePayload<ExtArgs>,
        T,
        "findFirstOrThrow",
        GlobalOmitOptions
      >,
      never,
      ExtArgs,
      GlobalOmitOptions
    >;

    /**
     * Find zero or more Milestones that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MilestoneFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Milestones
     * const milestones = await prisma.milestone.findMany()
     *
     * // Get first 10 Milestones
     * const milestones = await prisma.milestone.findMany({ take: 10 })
     *
     * // Only select the `id`
     * const milestoneWithIdOnly = await prisma.milestone.findMany({ select: { id: true } })
     *
     */
    findMany<T extends MilestoneFindManyArgs>(
      args?: SelectSubset<T, MilestoneFindManyArgs<ExtArgs>>,
    ): Prisma.PrismaPromise<
      $Result.GetResult<
        Prisma.$MilestonePayload<ExtArgs>,
        T,
        "findMany",
        GlobalOmitOptions
      >
    >;

    /**
     * Create a Milestone.
     * @param {MilestoneCreateArgs} args - Arguments to create a Milestone.
     * @example
     * // Create one Milestone
     * const Milestone = await prisma.milestone.create({
     *   data: {
     *     // ... data to create a Milestone
     *   }
     * })
     *
     */
    create<T extends MilestoneCreateArgs>(
      args: SelectSubset<T, MilestoneCreateArgs<ExtArgs>>,
    ): Prisma__MilestoneClient<
      $Result.GetResult<
        Prisma.$MilestonePayload<ExtArgs>,
        T,
        "create",
        GlobalOmitOptions
      >,
      never,
      ExtArgs,
      GlobalOmitOptions
    >;

    /**
     * Create many Milestones.
     * @param {MilestoneCreateManyArgs} args - Arguments to create many Milestones.
     * @example
     * // Create many Milestones
     * const milestone = await prisma.milestone.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *
     */
    createMany<T extends MilestoneCreateManyArgs>(
      args?: SelectSubset<T, MilestoneCreateManyArgs<ExtArgs>>,
    ): Prisma.PrismaPromise<BatchPayload>;

    /**
     * Create many Milestones and returns the data saved in the database.
     * @param {MilestoneCreateManyAndReturnArgs} args - Arguments to create many Milestones.
     * @example
     * // Create many Milestones
     * const milestone = await prisma.milestone.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *
     * // Create many Milestones and only return the `id`
     * const milestoneWithIdOnly = await prisma.milestone.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     *
     */
    createManyAndReturn<T extends MilestoneCreateManyAndReturnArgs>(
      args?: SelectSubset<T, MilestoneCreateManyAndReturnArgs<ExtArgs>>,
    ): Prisma.PrismaPromise<
      $Result.GetResult<
        Prisma.$MilestonePayload<ExtArgs>,
        T,
        "createManyAndReturn",
        GlobalOmitOptions
      >
    >;

    /**
     * Delete a Milestone.
     * @param {MilestoneDeleteArgs} args - Arguments to delete one Milestone.
     * @example
     * // Delete one Milestone
     * const Milestone = await prisma.milestone.delete({
     *   where: {
     *     // ... filter to delete one Milestone
     *   }
     * })
     *
     */
    delete<T extends MilestoneDeleteArgs>(
      args: SelectSubset<T, MilestoneDeleteArgs<ExtArgs>>,
    ): Prisma__MilestoneClient<
      $Result.GetResult<
        Prisma.$MilestonePayload<ExtArgs>,
        T,
        "delete",
        GlobalOmitOptions
      >,
      never,
      ExtArgs,
      GlobalOmitOptions
    >;

    /**
     * Update one Milestone.
     * @param {MilestoneUpdateArgs} args - Arguments to update one Milestone.
     * @example
     * // Update one Milestone
     * const milestone = await prisma.milestone.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     *
     */
    update<T extends MilestoneUpdateArgs>(
      args: SelectSubset<T, MilestoneUpdateArgs<ExtArgs>>,
    ): Prisma__MilestoneClient<
      $Result.GetResult<
        Prisma.$MilestonePayload<ExtArgs>,
        T,
        "update",
        GlobalOmitOptions
      >,
      never,
      ExtArgs,
      GlobalOmitOptions
    >;

    /**
     * Delete zero or more Milestones.
     * @param {MilestoneDeleteManyArgs} args - Arguments to filter Milestones to delete.
     * @example
     * // Delete a few Milestones
     * const { count } = await prisma.milestone.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     *
     */
    deleteMany<T extends MilestoneDeleteManyArgs>(
      args?: SelectSubset<T, MilestoneDeleteManyArgs<ExtArgs>>,
    ): Prisma.PrismaPromise<BatchPayload>;

    /**
     * Update zero or more Milestones.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MilestoneUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Milestones
     * const milestone = await prisma.milestone.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     *
     */
    updateMany<T extends MilestoneUpdateManyArgs>(
      args: SelectSubset<T, MilestoneUpdateManyArgs<ExtArgs>>,
    ): Prisma.PrismaPromise<BatchPayload>;

    /**
     * Update zero or more Milestones and returns the data updated in the database.
     * @param {MilestoneUpdateManyAndReturnArgs} args - Arguments to update many Milestones.
     * @example
     * // Update many Milestones
     * const milestone = await prisma.milestone.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *
     * // Update zero or more Milestones and only return the `id`
     * const milestoneWithIdOnly = await prisma.milestone.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     *
     */
    updateManyAndReturn<T extends MilestoneUpdateManyAndReturnArgs>(
      args: SelectSubset<T, MilestoneUpdateManyAndReturnArgs<ExtArgs>>,
    ): Prisma.PrismaPromise<
      $Result.GetResult<
        Prisma.$MilestonePayload<ExtArgs>,
        T,
        "updateManyAndReturn",
        GlobalOmitOptions
      >
    >;

    /**
     * Create or update one Milestone.
     * @param {MilestoneUpsertArgs} args - Arguments to update or create a Milestone.
     * @example
     * // Update or create a Milestone
     * const milestone = await prisma.milestone.upsert({
     *   create: {
     *     // ... data to create a Milestone
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Milestone we want to update
     *   }
     * })
     */
    upsert<T extends MilestoneUpsertArgs>(
      args: SelectSubset<T, MilestoneUpsertArgs<ExtArgs>>,
    ): Prisma__MilestoneClient<
      $Result.GetResult<
        Prisma.$MilestonePayload<ExtArgs>,
        T,
        "upsert",
        GlobalOmitOptions
      >,
      never,
      ExtArgs,
      GlobalOmitOptions
    >;

    /**
     * Count the number of Milestones.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MilestoneCountArgs} args - Arguments to filter Milestones to count.
     * @example
     * // Count the number of Milestones
     * const count = await prisma.milestone.count({
     *   where: {
     *     // ... the filter for the Milestones we want to count
     *   }
     * })
     **/
    count<T extends MilestoneCountArgs>(
      args?: Subset<T, MilestoneCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<"select", any>
        ? T["select"] extends true
          ? number
          : GetScalarType<T["select"], MilestoneCountAggregateOutputType>
        : number
    >;

    /**
     * Allows you to perform aggregations operations on a Milestone.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MilestoneAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
     **/
    aggregate<T extends MilestoneAggregateArgs>(
      args: Subset<T, MilestoneAggregateArgs>,
    ): Prisma.PrismaPromise<GetMilestoneAggregateType<T>>;

    /**
     * Group by Milestone.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MilestoneGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     *
     **/
    groupBy<
      T extends MilestoneGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<"skip", Keys<T>>,
        Extends<"take", Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: MilestoneGroupByArgs["orderBy"] }
        : { orderBy?: MilestoneGroupByArgs["orderBy"] },
      OrderFields extends ExcludeUnderscoreKeys<
        Keys<MaybeTupleToUnion<T["orderBy"]>>
      >,
      ByFields extends MaybeTupleToUnion<T["by"]>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T["having"]>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T["by"] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
        ? `Error: "by" must not be empty.`
        : HavingValid extends False
          ? {
              [P in HavingFields]: P extends ByFields
                ? never
                : P extends string
                  ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
                  : [
                      Error,
                      "Field ",
                      P,
                      ` in "having" needs to be provided in "by"`,
                    ];
            }[HavingFields]
          : "take" extends Keys<T>
            ? "orderBy" extends Keys<T>
              ? ByValid extends True
                ? {}
                : {
                    [P in OrderFields]: P extends ByFields
                      ? never
                      : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
                  }[OrderFields]
              : 'Error: If you provide "take", you also need to provide "orderBy"'
            : "skip" extends Keys<T>
              ? "orderBy" extends Keys<T>
                ? ByValid extends True
                  ? {}
                  : {
                      [P in OrderFields]: P extends ByFields
                        ? never
                        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
                    }[OrderFields]
                : 'Error: If you provide "skip", you also need to provide "orderBy"'
              : ByValid extends True
                ? {}
                : {
                    [P in OrderFields]: P extends ByFields
                      ? never
                      : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
                  }[OrderFields],
    >(
      args: SubsetIntersection<T, MilestoneGroupByArgs, OrderByArg> &
        InputErrors,
    ): {} extends InputErrors
      ? GetMilestoneGroupByPayload<T>
      : Prisma.PrismaPromise<InputErrors>;
    /**
     * Fields of the Milestone model
     */
    readonly fields: MilestoneFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Milestone.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__MilestoneClient<
    T,
    Null = never,
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
    GlobalOmitOptions = {},
  > extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise";
    project<T extends ProjectDefaultArgs<ExtArgs> = {}>(
      args?: Subset<T, ProjectDefaultArgs<ExtArgs>>,
    ): Prisma__ProjectClient<
      | $Result.GetResult<
          Prisma.$ProjectPayload<ExtArgs>,
          T,
          "findUniqueOrThrow",
          GlobalOmitOptions
        >
      | Null,
      Null,
      ExtArgs,
      GlobalOmitOptions
    >;
    owner<T extends UserDefaultArgs<ExtArgs> = {}>(
      args?: Subset<T, UserDefaultArgs<ExtArgs>>,
    ): Prisma__UserClient<
      | $Result.GetResult<
          Prisma.$UserPayload<ExtArgs>,
          T,
          "findUniqueOrThrow",
          GlobalOmitOptions
        >
      | Null,
      Null,
      ExtArgs,
      GlobalOmitOptions
    >;
    dependencies<T extends Milestone$dependenciesArgs<ExtArgs> = {}>(
      args?: Subset<T, Milestone$dependenciesArgs<ExtArgs>>,
    ): Prisma.PrismaPromise<
      | $Result.GetResult<
          Prisma.$MilestoneDependencyPayload<ExtArgs>,
          T,
          "findMany",
          GlobalOmitOptions
        >
      | Null
    >;
    dependents<T extends Milestone$dependentsArgs<ExtArgs> = {}>(
      args?: Subset<T, Milestone$dependentsArgs<ExtArgs>>,
    ): Prisma.PrismaPromise<
      | $Result.GetResult<
          Prisma.$MilestoneDependencyPayload<ExtArgs>,
          T,
          "findMany",
          GlobalOmitOptions
        >
      | Null
    >;
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(
      onfulfilled?:
        | ((value: T) => TResult1 | PromiseLike<TResult1>)
        | undefined
        | null,
      onrejected?:
        | ((reason: any) => TResult2 | PromiseLike<TResult2>)
        | undefined
        | null,
    ): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(
      onrejected?:
        | ((reason: any) => TResult | PromiseLike<TResult>)
        | undefined
        | null,
    ): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }

  /**
   * Fields of the Milestone model
   */
  interface MilestoneFieldRefs {
    readonly id: FieldRef<"Milestone", "String">;
    readonly title: FieldRef<"Milestone", "String">;
    readonly description: FieldRef<"Milestone", "String">;
    readonly status: FieldRef<"Milestone", "MilestoneStatus">;
    readonly progress: FieldRef<"Milestone", "Int">;
    readonly startDate: FieldRef<"Milestone", "DateTime">;
    readonly endDate: FieldRef<"Milestone", "DateTime">;
    readonly createdAt: FieldRef<"Milestone", "DateTime">;
    readonly updatedAt: FieldRef<"Milestone", "DateTime">;
    readonly projectId: FieldRef<"Milestone", "String">;
    readonly ownerId: FieldRef<"Milestone", "String">;
  }

  // Custom InputTypes
  /**
   * Milestone findUnique
   */
  export type MilestoneFindUniqueArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * Select specific fields to fetch from the Milestone
     */
    select?: MilestoneSelect<ExtArgs> | null;
    /**
     * Omit specific fields from the Milestone
     */
    omit?: MilestoneOmit<ExtArgs> | null;
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MilestoneInclude<ExtArgs> | null;
    /**
     * Filter, which Milestone to fetch.
     */
    where: MilestoneWhereUniqueInput;
  };

  /**
   * Milestone findUniqueOrThrow
   */
  export type MilestoneFindUniqueOrThrowArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * Select specific fields to fetch from the Milestone
     */
    select?: MilestoneSelect<ExtArgs> | null;
    /**
     * Omit specific fields from the Milestone
     */
    omit?: MilestoneOmit<ExtArgs> | null;
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MilestoneInclude<ExtArgs> | null;
    /**
     * Filter, which Milestone to fetch.
     */
    where: MilestoneWhereUniqueInput;
  };

  /**
   * Milestone findFirst
   */
  export type MilestoneFindFirstArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * Select specific fields to fetch from the Milestone
     */
    select?: MilestoneSelect<ExtArgs> | null;
    /**
     * Omit specific fields from the Milestone
     */
    omit?: MilestoneOmit<ExtArgs> | null;
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MilestoneInclude<ExtArgs> | null;
    /**
     * Filter, which Milestone to fetch.
     */
    where?: MilestoneWhereInput;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     *
     * Determine the order of Milestones to fetch.
     */
    orderBy?:
      | MilestoneOrderByWithRelationInput
      | MilestoneOrderByWithRelationInput[];
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     *
     * Sets the position for searching for Milestones.
     */
    cursor?: MilestoneWhereUniqueInput;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     *
     * Take `±n` Milestones from the position of the cursor.
     */
    take?: number;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     *
     * Skip the first `n` Milestones.
     */
    skip?: number;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     *
     * Filter by unique combinations of Milestones.
     */
    distinct?: MilestoneScalarFieldEnum | MilestoneScalarFieldEnum[];
  };

  /**
   * Milestone findFirstOrThrow
   */
  export type MilestoneFindFirstOrThrowArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * Select specific fields to fetch from the Milestone
     */
    select?: MilestoneSelect<ExtArgs> | null;
    /**
     * Omit specific fields from the Milestone
     */
    omit?: MilestoneOmit<ExtArgs> | null;
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MilestoneInclude<ExtArgs> | null;
    /**
     * Filter, which Milestone to fetch.
     */
    where?: MilestoneWhereInput;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     *
     * Determine the order of Milestones to fetch.
     */
    orderBy?:
      | MilestoneOrderByWithRelationInput
      | MilestoneOrderByWithRelationInput[];
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     *
     * Sets the position for searching for Milestones.
     */
    cursor?: MilestoneWhereUniqueInput;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     *
     * Take `±n` Milestones from the position of the cursor.
     */
    take?: number;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     *
     * Skip the first `n` Milestones.
     */
    skip?: number;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     *
     * Filter by unique combinations of Milestones.
     */
    distinct?: MilestoneScalarFieldEnum | MilestoneScalarFieldEnum[];
  };

  /**
   * Milestone findMany
   */
  export type MilestoneFindManyArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * Select specific fields to fetch from the Milestone
     */
    select?: MilestoneSelect<ExtArgs> | null;
    /**
     * Omit specific fields from the Milestone
     */
    omit?: MilestoneOmit<ExtArgs> | null;
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MilestoneInclude<ExtArgs> | null;
    /**
     * Filter, which Milestones to fetch.
     */
    where?: MilestoneWhereInput;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     *
     * Determine the order of Milestones to fetch.
     */
    orderBy?:
      | MilestoneOrderByWithRelationInput
      | MilestoneOrderByWithRelationInput[];
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     *
     * Sets the position for listing Milestones.
     */
    cursor?: MilestoneWhereUniqueInput;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     *
     * Take `±n` Milestones from the position of the cursor.
     */
    take?: number;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     *
     * Skip the first `n` Milestones.
     */
    skip?: number;
    distinct?: MilestoneScalarFieldEnum | MilestoneScalarFieldEnum[];
  };

  /**
   * Milestone create
   */
  export type MilestoneCreateArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * Select specific fields to fetch from the Milestone
     */
    select?: MilestoneSelect<ExtArgs> | null;
    /**
     * Omit specific fields from the Milestone
     */
    omit?: MilestoneOmit<ExtArgs> | null;
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MilestoneInclude<ExtArgs> | null;
    /**
     * The data needed to create a Milestone.
     */
    data: XOR<MilestoneCreateInput, MilestoneUncheckedCreateInput>;
  };

  /**
   * Milestone createMany
   */
  export type MilestoneCreateManyArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * The data used to create many Milestones.
     */
    data: MilestoneCreateManyInput | MilestoneCreateManyInput[];
    skipDuplicates?: boolean;
  };

  /**
   * Milestone createManyAndReturn
   */
  export type MilestoneCreateManyAndReturnArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * Select specific fields to fetch from the Milestone
     */
    select?: MilestoneSelectCreateManyAndReturn<ExtArgs> | null;
    /**
     * Omit specific fields from the Milestone
     */
    omit?: MilestoneOmit<ExtArgs> | null;
    /**
     * The data used to create many Milestones.
     */
    data: MilestoneCreateManyInput | MilestoneCreateManyInput[];
    skipDuplicates?: boolean;
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MilestoneIncludeCreateManyAndReturn<ExtArgs> | null;
  };

  /**
   * Milestone update
   */
  export type MilestoneUpdateArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * Select specific fields to fetch from the Milestone
     */
    select?: MilestoneSelect<ExtArgs> | null;
    /**
     * Omit specific fields from the Milestone
     */
    omit?: MilestoneOmit<ExtArgs> | null;
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MilestoneInclude<ExtArgs> | null;
    /**
     * The data needed to update a Milestone.
     */
    data: XOR<MilestoneUpdateInput, MilestoneUncheckedUpdateInput>;
    /**
     * Choose, which Milestone to update.
     */
    where: MilestoneWhereUniqueInput;
  };

  /**
   * Milestone updateMany
   */
  export type MilestoneUpdateManyArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * The data used to update Milestones.
     */
    data: XOR<
      MilestoneUpdateManyMutationInput,
      MilestoneUncheckedUpdateManyInput
    >;
    /**
     * Filter which Milestones to update
     */
    where?: MilestoneWhereInput;
    /**
     * Limit how many Milestones to update.
     */
    limit?: number;
  };

  /**
   * Milestone updateManyAndReturn
   */
  export type MilestoneUpdateManyAndReturnArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * Select specific fields to fetch from the Milestone
     */
    select?: MilestoneSelectUpdateManyAndReturn<ExtArgs> | null;
    /**
     * Omit specific fields from the Milestone
     */
    omit?: MilestoneOmit<ExtArgs> | null;
    /**
     * The data used to update Milestones.
     */
    data: XOR<
      MilestoneUpdateManyMutationInput,
      MilestoneUncheckedUpdateManyInput
    >;
    /**
     * Filter which Milestones to update
     */
    where?: MilestoneWhereInput;
    /**
     * Limit how many Milestones to update.
     */
    limit?: number;
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MilestoneIncludeUpdateManyAndReturn<ExtArgs> | null;
  };

  /**
   * Milestone upsert
   */
  export type MilestoneUpsertArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * Select specific fields to fetch from the Milestone
     */
    select?: MilestoneSelect<ExtArgs> | null;
    /**
     * Omit specific fields from the Milestone
     */
    omit?: MilestoneOmit<ExtArgs> | null;
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MilestoneInclude<ExtArgs> | null;
    /**
     * The filter to search for the Milestone to update in case it exists.
     */
    where: MilestoneWhereUniqueInput;
    /**
     * In case the Milestone found by the `where` argument doesn't exist, create a new Milestone with this data.
     */
    create: XOR<MilestoneCreateInput, MilestoneUncheckedCreateInput>;
    /**
     * In case the Milestone was found with the provided `where` argument, update it with this data.
     */
    update: XOR<MilestoneUpdateInput, MilestoneUncheckedUpdateInput>;
  };

  /**
   * Milestone delete
   */
  export type MilestoneDeleteArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * Select specific fields to fetch from the Milestone
     */
    select?: MilestoneSelect<ExtArgs> | null;
    /**
     * Omit specific fields from the Milestone
     */
    omit?: MilestoneOmit<ExtArgs> | null;
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MilestoneInclude<ExtArgs> | null;
    /**
     * Filter which Milestone to delete.
     */
    where: MilestoneWhereUniqueInput;
  };

  /**
   * Milestone deleteMany
   */
  export type MilestoneDeleteManyArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * Filter which Milestones to delete
     */
    where?: MilestoneWhereInput;
    /**
     * Limit how many Milestones to delete.
     */
    limit?: number;
  };

  /**
   * Milestone.dependencies
   */
  export type Milestone$dependenciesArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * Select specific fields to fetch from the MilestoneDependency
     */
    select?: MilestoneDependencySelect<ExtArgs> | null;
    /**
     * Omit specific fields from the MilestoneDependency
     */
    omit?: MilestoneDependencyOmit<ExtArgs> | null;
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MilestoneDependencyInclude<ExtArgs> | null;
    where?: MilestoneDependencyWhereInput;
    orderBy?:
      | MilestoneDependencyOrderByWithRelationInput
      | MilestoneDependencyOrderByWithRelationInput[];
    cursor?: MilestoneDependencyWhereUniqueInput;
    take?: number;
    skip?: number;
    distinct?:
      | MilestoneDependencyScalarFieldEnum
      | MilestoneDependencyScalarFieldEnum[];
  };

  /**
   * Milestone.dependents
   */
  export type Milestone$dependentsArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * Select specific fields to fetch from the MilestoneDependency
     */
    select?: MilestoneDependencySelect<ExtArgs> | null;
    /**
     * Omit specific fields from the MilestoneDependency
     */
    omit?: MilestoneDependencyOmit<ExtArgs> | null;
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MilestoneDependencyInclude<ExtArgs> | null;
    where?: MilestoneDependencyWhereInput;
    orderBy?:
      | MilestoneDependencyOrderByWithRelationInput
      | MilestoneDependencyOrderByWithRelationInput[];
    cursor?: MilestoneDependencyWhereUniqueInput;
    take?: number;
    skip?: number;
    distinct?:
      | MilestoneDependencyScalarFieldEnum
      | MilestoneDependencyScalarFieldEnum[];
  };

  /**
   * Milestone without action
   */
  export type MilestoneDefaultArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * Select specific fields to fetch from the Milestone
     */
    select?: MilestoneSelect<ExtArgs> | null;
    /**
     * Omit specific fields from the Milestone
     */
    omit?: MilestoneOmit<ExtArgs> | null;
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MilestoneInclude<ExtArgs> | null;
  };

  /**
   * Model MilestoneDependency
   */

  export type AggregateMilestoneDependency = {
    _count: MilestoneDependencyCountAggregateOutputType | null;
    _min: MilestoneDependencyMinAggregateOutputType | null;
    _max: MilestoneDependencyMaxAggregateOutputType | null;
  };

  export type MilestoneDependencyMinAggregateOutputType = {
    id: string | null;
    milestoneId: string | null;
    dependsOnId: string | null;
  };

  export type MilestoneDependencyMaxAggregateOutputType = {
    id: string | null;
    milestoneId: string | null;
    dependsOnId: string | null;
  };

  export type MilestoneDependencyCountAggregateOutputType = {
    id: number;
    milestoneId: number;
    dependsOnId: number;
    _all: number;
  };

  export type MilestoneDependencyMinAggregateInputType = {
    id?: true;
    milestoneId?: true;
    dependsOnId?: true;
  };

  export type MilestoneDependencyMaxAggregateInputType = {
    id?: true;
    milestoneId?: true;
    dependsOnId?: true;
  };

  export type MilestoneDependencyCountAggregateInputType = {
    id?: true;
    milestoneId?: true;
    dependsOnId?: true;
    _all?: true;
  };

  export type MilestoneDependencyAggregateArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * Filter which MilestoneDependency to aggregate.
     */
    where?: MilestoneDependencyWhereInput;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     *
     * Determine the order of MilestoneDependencies to fetch.
     */
    orderBy?:
      | MilestoneDependencyOrderByWithRelationInput
      | MilestoneDependencyOrderByWithRelationInput[];
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     *
     * Sets the start position
     */
    cursor?: MilestoneDependencyWhereUniqueInput;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     *
     * Take `±n` MilestoneDependencies from the position of the cursor.
     */
    take?: number;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     *
     * Skip the first `n` MilestoneDependencies.
     */
    skip?: number;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     *
     * Count returned MilestoneDependencies
     **/
    _count?: true | MilestoneDependencyCountAggregateInputType;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     *
     * Select which fields to find the minimum value
     **/
    _min?: MilestoneDependencyMinAggregateInputType;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     *
     * Select which fields to find the maximum value
     **/
    _max?: MilestoneDependencyMaxAggregateInputType;
  };

  export type GetMilestoneDependencyAggregateType<
    T extends MilestoneDependencyAggregateArgs,
  > = {
    [P in keyof T & keyof AggregateMilestoneDependency]: P extends
      | "_count"
      | "count"
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateMilestoneDependency[P]>
      : GetScalarType<T[P], AggregateMilestoneDependency[P]>;
  };

  export type MilestoneDependencyGroupByArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    where?: MilestoneDependencyWhereInput;
    orderBy?:
      | MilestoneDependencyOrderByWithAggregationInput
      | MilestoneDependencyOrderByWithAggregationInput[];
    by:
      | MilestoneDependencyScalarFieldEnum[]
      | MilestoneDependencyScalarFieldEnum;
    having?: MilestoneDependencyScalarWhereWithAggregatesInput;
    take?: number;
    skip?: number;
    _count?: MilestoneDependencyCountAggregateInputType | true;
    _min?: MilestoneDependencyMinAggregateInputType;
    _max?: MilestoneDependencyMaxAggregateInputType;
  };

  export type MilestoneDependencyGroupByOutputType = {
    id: string;
    milestoneId: string;
    dependsOnId: string;
    _count: MilestoneDependencyCountAggregateOutputType | null;
    _min: MilestoneDependencyMinAggregateOutputType | null;
    _max: MilestoneDependencyMaxAggregateOutputType | null;
  };

  type GetMilestoneDependencyGroupByPayload<
    T extends MilestoneDependencyGroupByArgs,
  > = Prisma.PrismaPromise<
    Array<
      PickEnumerable<MilestoneDependencyGroupByOutputType, T["by"]> & {
        [P in keyof T &
          keyof MilestoneDependencyGroupByOutputType]: P extends "_count"
          ? T[P] extends boolean
            ? number
            : GetScalarType<T[P], MilestoneDependencyGroupByOutputType[P]>
          : GetScalarType<T[P], MilestoneDependencyGroupByOutputType[P]>;
      }
    >
  >;

  export type MilestoneDependencySelect<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = $Extensions.GetSelect<
    {
      id?: boolean;
      milestoneId?: boolean;
      dependsOnId?: boolean;
      milestone?: boolean | MilestoneDefaultArgs<ExtArgs>;
      dependsOn?: boolean | MilestoneDefaultArgs<ExtArgs>;
    },
    ExtArgs["result"]["milestoneDependency"]
  >;

  export type MilestoneDependencySelectCreateManyAndReturn<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = $Extensions.GetSelect<
    {
      id?: boolean;
      milestoneId?: boolean;
      dependsOnId?: boolean;
      milestone?: boolean | MilestoneDefaultArgs<ExtArgs>;
      dependsOn?: boolean | MilestoneDefaultArgs<ExtArgs>;
    },
    ExtArgs["result"]["milestoneDependency"]
  >;

  export type MilestoneDependencySelectUpdateManyAndReturn<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = $Extensions.GetSelect<
    {
      id?: boolean;
      milestoneId?: boolean;
      dependsOnId?: boolean;
      milestone?: boolean | MilestoneDefaultArgs<ExtArgs>;
      dependsOn?: boolean | MilestoneDefaultArgs<ExtArgs>;
    },
    ExtArgs["result"]["milestoneDependency"]
  >;

  export type MilestoneDependencySelectScalar = {
    id?: boolean;
    milestoneId?: boolean;
    dependsOnId?: boolean;
  };

  export type MilestoneDependencyOmit<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = $Extensions.GetOmit<
    "id" | "milestoneId" | "dependsOnId",
    ExtArgs["result"]["milestoneDependency"]
  >;
  export type MilestoneDependencyInclude<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    milestone?: boolean | MilestoneDefaultArgs<ExtArgs>;
    dependsOn?: boolean | MilestoneDefaultArgs<ExtArgs>;
  };
  export type MilestoneDependencyIncludeCreateManyAndReturn<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    milestone?: boolean | MilestoneDefaultArgs<ExtArgs>;
    dependsOn?: boolean | MilestoneDefaultArgs<ExtArgs>;
  };
  export type MilestoneDependencyIncludeUpdateManyAndReturn<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    milestone?: boolean | MilestoneDefaultArgs<ExtArgs>;
    dependsOn?: boolean | MilestoneDefaultArgs<ExtArgs>;
  };

  export type $MilestoneDependencyPayload<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    name: "MilestoneDependency";
    objects: {
      milestone: Prisma.$MilestonePayload<ExtArgs>;
      dependsOn: Prisma.$MilestonePayload<ExtArgs>;
    };
    scalars: $Extensions.GetPayloadResult<
      {
        id: string;
        milestoneId: string;
        dependsOnId: string;
      },
      ExtArgs["result"]["milestoneDependency"]
    >;
    composites: {};
  };

  type MilestoneDependencyGetPayload<
    S extends boolean | null | undefined | MilestoneDependencyDefaultArgs,
  > = $Result.GetResult<Prisma.$MilestoneDependencyPayload, S>;

  type MilestoneDependencyCountArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = Omit<
    MilestoneDependencyFindManyArgs,
    "select" | "include" | "distinct" | "omit"
  > & {
    select?: MilestoneDependencyCountAggregateInputType | true;
  };

  export interface MilestoneDependencyDelegate<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
    GlobalOmitOptions = {},
  > {
    [K: symbol]: {
      types: Prisma.TypeMap<ExtArgs>["model"]["MilestoneDependency"];
      meta: { name: "MilestoneDependency" };
    };
    /**
     * Find zero or one MilestoneDependency that matches the filter.
     * @param {MilestoneDependencyFindUniqueArgs} args - Arguments to find a MilestoneDependency
     * @example
     * // Get one MilestoneDependency
     * const milestoneDependency = await prisma.milestoneDependency.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends MilestoneDependencyFindUniqueArgs>(
      args: SelectSubset<T, MilestoneDependencyFindUniqueArgs<ExtArgs>>,
    ): Prisma__MilestoneDependencyClient<
      $Result.GetResult<
        Prisma.$MilestoneDependencyPayload<ExtArgs>,
        T,
        "findUnique",
        GlobalOmitOptions
      > | null,
      null,
      ExtArgs,
      GlobalOmitOptions
    >;

    /**
     * Find one MilestoneDependency that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {MilestoneDependencyFindUniqueOrThrowArgs} args - Arguments to find a MilestoneDependency
     * @example
     * // Get one MilestoneDependency
     * const milestoneDependency = await prisma.milestoneDependency.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends MilestoneDependencyFindUniqueOrThrowArgs>(
      args: SelectSubset<T, MilestoneDependencyFindUniqueOrThrowArgs<ExtArgs>>,
    ): Prisma__MilestoneDependencyClient<
      $Result.GetResult<
        Prisma.$MilestoneDependencyPayload<ExtArgs>,
        T,
        "findUniqueOrThrow",
        GlobalOmitOptions
      >,
      never,
      ExtArgs,
      GlobalOmitOptions
    >;

    /**
     * Find the first MilestoneDependency that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MilestoneDependencyFindFirstArgs} args - Arguments to find a MilestoneDependency
     * @example
     * // Get one MilestoneDependency
     * const milestoneDependency = await prisma.milestoneDependency.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends MilestoneDependencyFindFirstArgs>(
      args?: SelectSubset<T, MilestoneDependencyFindFirstArgs<ExtArgs>>,
    ): Prisma__MilestoneDependencyClient<
      $Result.GetResult<
        Prisma.$MilestoneDependencyPayload<ExtArgs>,
        T,
        "findFirst",
        GlobalOmitOptions
      > | null,
      null,
      ExtArgs,
      GlobalOmitOptions
    >;

    /**
     * Find the first MilestoneDependency that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MilestoneDependencyFindFirstOrThrowArgs} args - Arguments to find a MilestoneDependency
     * @example
     * // Get one MilestoneDependency
     * const milestoneDependency = await prisma.milestoneDependency.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends MilestoneDependencyFindFirstOrThrowArgs>(
      args?: SelectSubset<T, MilestoneDependencyFindFirstOrThrowArgs<ExtArgs>>,
    ): Prisma__MilestoneDependencyClient<
      $Result.GetResult<
        Prisma.$MilestoneDependencyPayload<ExtArgs>,
        T,
        "findFirstOrThrow",
        GlobalOmitOptions
      >,
      never,
      ExtArgs,
      GlobalOmitOptions
    >;

    /**
     * Find zero or more MilestoneDependencies that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MilestoneDependencyFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all MilestoneDependencies
     * const milestoneDependencies = await prisma.milestoneDependency.findMany()
     *
     * // Get first 10 MilestoneDependencies
     * const milestoneDependencies = await prisma.milestoneDependency.findMany({ take: 10 })
     *
     * // Only select the `id`
     * const milestoneDependencyWithIdOnly = await prisma.milestoneDependency.findMany({ select: { id: true } })
     *
     */
    findMany<T extends MilestoneDependencyFindManyArgs>(
      args?: SelectSubset<T, MilestoneDependencyFindManyArgs<ExtArgs>>,
    ): Prisma.PrismaPromise<
      $Result.GetResult<
        Prisma.$MilestoneDependencyPayload<ExtArgs>,
        T,
        "findMany",
        GlobalOmitOptions
      >
    >;

    /**
     * Create a MilestoneDependency.
     * @param {MilestoneDependencyCreateArgs} args - Arguments to create a MilestoneDependency.
     * @example
     * // Create one MilestoneDependency
     * const MilestoneDependency = await prisma.milestoneDependency.create({
     *   data: {
     *     // ... data to create a MilestoneDependency
     *   }
     * })
     *
     */
    create<T extends MilestoneDependencyCreateArgs>(
      args: SelectSubset<T, MilestoneDependencyCreateArgs<ExtArgs>>,
    ): Prisma__MilestoneDependencyClient<
      $Result.GetResult<
        Prisma.$MilestoneDependencyPayload<ExtArgs>,
        T,
        "create",
        GlobalOmitOptions
      >,
      never,
      ExtArgs,
      GlobalOmitOptions
    >;

    /**
     * Create many MilestoneDependencies.
     * @param {MilestoneDependencyCreateManyArgs} args - Arguments to create many MilestoneDependencies.
     * @example
     * // Create many MilestoneDependencies
     * const milestoneDependency = await prisma.milestoneDependency.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *
     */
    createMany<T extends MilestoneDependencyCreateManyArgs>(
      args?: SelectSubset<T, MilestoneDependencyCreateManyArgs<ExtArgs>>,
    ): Prisma.PrismaPromise<BatchPayload>;

    /**
     * Create many MilestoneDependencies and returns the data saved in the database.
     * @param {MilestoneDependencyCreateManyAndReturnArgs} args - Arguments to create many MilestoneDependencies.
     * @example
     * // Create many MilestoneDependencies
     * const milestoneDependency = await prisma.milestoneDependency.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *
     * // Create many MilestoneDependencies and only return the `id`
     * const milestoneDependencyWithIdOnly = await prisma.milestoneDependency.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     *
     */
    createManyAndReturn<T extends MilestoneDependencyCreateManyAndReturnArgs>(
      args?: SelectSubset<
        T,
        MilestoneDependencyCreateManyAndReturnArgs<ExtArgs>
      >,
    ): Prisma.PrismaPromise<
      $Result.GetResult<
        Prisma.$MilestoneDependencyPayload<ExtArgs>,
        T,
        "createManyAndReturn",
        GlobalOmitOptions
      >
    >;

    /**
     * Delete a MilestoneDependency.
     * @param {MilestoneDependencyDeleteArgs} args - Arguments to delete one MilestoneDependency.
     * @example
     * // Delete one MilestoneDependency
     * const MilestoneDependency = await prisma.milestoneDependency.delete({
     *   where: {
     *     // ... filter to delete one MilestoneDependency
     *   }
     * })
     *
     */
    delete<T extends MilestoneDependencyDeleteArgs>(
      args: SelectSubset<T, MilestoneDependencyDeleteArgs<ExtArgs>>,
    ): Prisma__MilestoneDependencyClient<
      $Result.GetResult<
        Prisma.$MilestoneDependencyPayload<ExtArgs>,
        T,
        "delete",
        GlobalOmitOptions
      >,
      never,
      ExtArgs,
      GlobalOmitOptions
    >;

    /**
     * Update one MilestoneDependency.
     * @param {MilestoneDependencyUpdateArgs} args - Arguments to update one MilestoneDependency.
     * @example
     * // Update one MilestoneDependency
     * const milestoneDependency = await prisma.milestoneDependency.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     *
     */
    update<T extends MilestoneDependencyUpdateArgs>(
      args: SelectSubset<T, MilestoneDependencyUpdateArgs<ExtArgs>>,
    ): Prisma__MilestoneDependencyClient<
      $Result.GetResult<
        Prisma.$MilestoneDependencyPayload<ExtArgs>,
        T,
        "update",
        GlobalOmitOptions
      >,
      never,
      ExtArgs,
      GlobalOmitOptions
    >;

    /**
     * Delete zero or more MilestoneDependencies.
     * @param {MilestoneDependencyDeleteManyArgs} args - Arguments to filter MilestoneDependencies to delete.
     * @example
     * // Delete a few MilestoneDependencies
     * const { count } = await prisma.milestoneDependency.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     *
     */
    deleteMany<T extends MilestoneDependencyDeleteManyArgs>(
      args?: SelectSubset<T, MilestoneDependencyDeleteManyArgs<ExtArgs>>,
    ): Prisma.PrismaPromise<BatchPayload>;

    /**
     * Update zero or more MilestoneDependencies.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MilestoneDependencyUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many MilestoneDependencies
     * const milestoneDependency = await prisma.milestoneDependency.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     *
     */
    updateMany<T extends MilestoneDependencyUpdateManyArgs>(
      args: SelectSubset<T, MilestoneDependencyUpdateManyArgs<ExtArgs>>,
    ): Prisma.PrismaPromise<BatchPayload>;

    /**
     * Update zero or more MilestoneDependencies and returns the data updated in the database.
     * @param {MilestoneDependencyUpdateManyAndReturnArgs} args - Arguments to update many MilestoneDependencies.
     * @example
     * // Update many MilestoneDependencies
     * const milestoneDependency = await prisma.milestoneDependency.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *
     * // Update zero or more MilestoneDependencies and only return the `id`
     * const milestoneDependencyWithIdOnly = await prisma.milestoneDependency.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     *
     */
    updateManyAndReturn<T extends MilestoneDependencyUpdateManyAndReturnArgs>(
      args: SelectSubset<
        T,
        MilestoneDependencyUpdateManyAndReturnArgs<ExtArgs>
      >,
    ): Prisma.PrismaPromise<
      $Result.GetResult<
        Prisma.$MilestoneDependencyPayload<ExtArgs>,
        T,
        "updateManyAndReturn",
        GlobalOmitOptions
      >
    >;

    /**
     * Create or update one MilestoneDependency.
     * @param {MilestoneDependencyUpsertArgs} args - Arguments to update or create a MilestoneDependency.
     * @example
     * // Update or create a MilestoneDependency
     * const milestoneDependency = await prisma.milestoneDependency.upsert({
     *   create: {
     *     // ... data to create a MilestoneDependency
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the MilestoneDependency we want to update
     *   }
     * })
     */
    upsert<T extends MilestoneDependencyUpsertArgs>(
      args: SelectSubset<T, MilestoneDependencyUpsertArgs<ExtArgs>>,
    ): Prisma__MilestoneDependencyClient<
      $Result.GetResult<
        Prisma.$MilestoneDependencyPayload<ExtArgs>,
        T,
        "upsert",
        GlobalOmitOptions
      >,
      never,
      ExtArgs,
      GlobalOmitOptions
    >;

    /**
     * Count the number of MilestoneDependencies.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MilestoneDependencyCountArgs} args - Arguments to filter MilestoneDependencies to count.
     * @example
     * // Count the number of MilestoneDependencies
     * const count = await prisma.milestoneDependency.count({
     *   where: {
     *     // ... the filter for the MilestoneDependencies we want to count
     *   }
     * })
     **/
    count<T extends MilestoneDependencyCountArgs>(
      args?: Subset<T, MilestoneDependencyCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<"select", any>
        ? T["select"] extends true
          ? number
          : GetScalarType<
              T["select"],
              MilestoneDependencyCountAggregateOutputType
            >
        : number
    >;

    /**
     * Allows you to perform aggregations operations on a MilestoneDependency.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MilestoneDependencyAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
     **/
    aggregate<T extends MilestoneDependencyAggregateArgs>(
      args: Subset<T, MilestoneDependencyAggregateArgs>,
    ): Prisma.PrismaPromise<GetMilestoneDependencyAggregateType<T>>;

    /**
     * Group by MilestoneDependency.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MilestoneDependencyGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     *
     **/
    groupBy<
      T extends MilestoneDependencyGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<"skip", Keys<T>>,
        Extends<"take", Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: MilestoneDependencyGroupByArgs["orderBy"] }
        : { orderBy?: MilestoneDependencyGroupByArgs["orderBy"] },
      OrderFields extends ExcludeUnderscoreKeys<
        Keys<MaybeTupleToUnion<T["orderBy"]>>
      >,
      ByFields extends MaybeTupleToUnion<T["by"]>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T["having"]>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T["by"] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
        ? `Error: "by" must not be empty.`
        : HavingValid extends False
          ? {
              [P in HavingFields]: P extends ByFields
                ? never
                : P extends string
                  ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
                  : [
                      Error,
                      "Field ",
                      P,
                      ` in "having" needs to be provided in "by"`,
                    ];
            }[HavingFields]
          : "take" extends Keys<T>
            ? "orderBy" extends Keys<T>
              ? ByValid extends True
                ? {}
                : {
                    [P in OrderFields]: P extends ByFields
                      ? never
                      : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
                  }[OrderFields]
              : 'Error: If you provide "take", you also need to provide "orderBy"'
            : "skip" extends Keys<T>
              ? "orderBy" extends Keys<T>
                ? ByValid extends True
                  ? {}
                  : {
                      [P in OrderFields]: P extends ByFields
                        ? never
                        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
                    }[OrderFields]
                : 'Error: If you provide "skip", you also need to provide "orderBy"'
              : ByValid extends True
                ? {}
                : {
                    [P in OrderFields]: P extends ByFields
                      ? never
                      : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
                  }[OrderFields],
    >(
      args: SubsetIntersection<T, MilestoneDependencyGroupByArgs, OrderByArg> &
        InputErrors,
    ): {} extends InputErrors
      ? GetMilestoneDependencyGroupByPayload<T>
      : Prisma.PrismaPromise<InputErrors>;
    /**
     * Fields of the MilestoneDependency model
     */
    readonly fields: MilestoneDependencyFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for MilestoneDependency.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__MilestoneDependencyClient<
    T,
    Null = never,
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
    GlobalOmitOptions = {},
  > extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise";
    milestone<T extends MilestoneDefaultArgs<ExtArgs> = {}>(
      args?: Subset<T, MilestoneDefaultArgs<ExtArgs>>,
    ): Prisma__MilestoneClient<
      | $Result.GetResult<
          Prisma.$MilestonePayload<ExtArgs>,
          T,
          "findUniqueOrThrow",
          GlobalOmitOptions
        >
      | Null,
      Null,
      ExtArgs,
      GlobalOmitOptions
    >;
    dependsOn<T extends MilestoneDefaultArgs<ExtArgs> = {}>(
      args?: Subset<T, MilestoneDefaultArgs<ExtArgs>>,
    ): Prisma__MilestoneClient<
      | $Result.GetResult<
          Prisma.$MilestonePayload<ExtArgs>,
          T,
          "findUniqueOrThrow",
          GlobalOmitOptions
        >
      | Null,
      Null,
      ExtArgs,
      GlobalOmitOptions
    >;
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(
      onfulfilled?:
        | ((value: T) => TResult1 | PromiseLike<TResult1>)
        | undefined
        | null,
      onrejected?:
        | ((reason: any) => TResult2 | PromiseLike<TResult2>)
        | undefined
        | null,
    ): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(
      onrejected?:
        | ((reason: any) => TResult | PromiseLike<TResult>)
        | undefined
        | null,
    ): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }

  /**
   * Fields of the MilestoneDependency model
   */
  interface MilestoneDependencyFieldRefs {
    readonly id: FieldRef<"MilestoneDependency", "String">;
    readonly milestoneId: FieldRef<"MilestoneDependency", "String">;
    readonly dependsOnId: FieldRef<"MilestoneDependency", "String">;
  }

  // Custom InputTypes
  /**
   * MilestoneDependency findUnique
   */
  export type MilestoneDependencyFindUniqueArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * Select specific fields to fetch from the MilestoneDependency
     */
    select?: MilestoneDependencySelect<ExtArgs> | null;
    /**
     * Omit specific fields from the MilestoneDependency
     */
    omit?: MilestoneDependencyOmit<ExtArgs> | null;
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MilestoneDependencyInclude<ExtArgs> | null;
    /**
     * Filter, which MilestoneDependency to fetch.
     */
    where: MilestoneDependencyWhereUniqueInput;
  };

  /**
   * MilestoneDependency findUniqueOrThrow
   */
  export type MilestoneDependencyFindUniqueOrThrowArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * Select specific fields to fetch from the MilestoneDependency
     */
    select?: MilestoneDependencySelect<ExtArgs> | null;
    /**
     * Omit specific fields from the MilestoneDependency
     */
    omit?: MilestoneDependencyOmit<ExtArgs> | null;
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MilestoneDependencyInclude<ExtArgs> | null;
    /**
     * Filter, which MilestoneDependency to fetch.
     */
    where: MilestoneDependencyWhereUniqueInput;
  };

  /**
   * MilestoneDependency findFirst
   */
  export type MilestoneDependencyFindFirstArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * Select specific fields to fetch from the MilestoneDependency
     */
    select?: MilestoneDependencySelect<ExtArgs> | null;
    /**
     * Omit specific fields from the MilestoneDependency
     */
    omit?: MilestoneDependencyOmit<ExtArgs> | null;
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MilestoneDependencyInclude<ExtArgs> | null;
    /**
     * Filter, which MilestoneDependency to fetch.
     */
    where?: MilestoneDependencyWhereInput;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     *
     * Determine the order of MilestoneDependencies to fetch.
     */
    orderBy?:
      | MilestoneDependencyOrderByWithRelationInput
      | MilestoneDependencyOrderByWithRelationInput[];
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     *
     * Sets the position for searching for MilestoneDependencies.
     */
    cursor?: MilestoneDependencyWhereUniqueInput;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     *
     * Take `±n` MilestoneDependencies from the position of the cursor.
     */
    take?: number;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     *
     * Skip the first `n` MilestoneDependencies.
     */
    skip?: number;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     *
     * Filter by unique combinations of MilestoneDependencies.
     */
    distinct?:
      | MilestoneDependencyScalarFieldEnum
      | MilestoneDependencyScalarFieldEnum[];
  };

  /**
   * MilestoneDependency findFirstOrThrow
   */
  export type MilestoneDependencyFindFirstOrThrowArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * Select specific fields to fetch from the MilestoneDependency
     */
    select?: MilestoneDependencySelect<ExtArgs> | null;
    /**
     * Omit specific fields from the MilestoneDependency
     */
    omit?: MilestoneDependencyOmit<ExtArgs> | null;
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MilestoneDependencyInclude<ExtArgs> | null;
    /**
     * Filter, which MilestoneDependency to fetch.
     */
    where?: MilestoneDependencyWhereInput;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     *
     * Determine the order of MilestoneDependencies to fetch.
     */
    orderBy?:
      | MilestoneDependencyOrderByWithRelationInput
      | MilestoneDependencyOrderByWithRelationInput[];
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     *
     * Sets the position for searching for MilestoneDependencies.
     */
    cursor?: MilestoneDependencyWhereUniqueInput;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     *
     * Take `±n` MilestoneDependencies from the position of the cursor.
     */
    take?: number;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     *
     * Skip the first `n` MilestoneDependencies.
     */
    skip?: number;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     *
     * Filter by unique combinations of MilestoneDependencies.
     */
    distinct?:
      | MilestoneDependencyScalarFieldEnum
      | MilestoneDependencyScalarFieldEnum[];
  };

  /**
   * MilestoneDependency findMany
   */
  export type MilestoneDependencyFindManyArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * Select specific fields to fetch from the MilestoneDependency
     */
    select?: MilestoneDependencySelect<ExtArgs> | null;
    /**
     * Omit specific fields from the MilestoneDependency
     */
    omit?: MilestoneDependencyOmit<ExtArgs> | null;
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MilestoneDependencyInclude<ExtArgs> | null;
    /**
     * Filter, which MilestoneDependencies to fetch.
     */
    where?: MilestoneDependencyWhereInput;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     *
     * Determine the order of MilestoneDependencies to fetch.
     */
    orderBy?:
      | MilestoneDependencyOrderByWithRelationInput
      | MilestoneDependencyOrderByWithRelationInput[];
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     *
     * Sets the position for listing MilestoneDependencies.
     */
    cursor?: MilestoneDependencyWhereUniqueInput;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     *
     * Take `±n` MilestoneDependencies from the position of the cursor.
     */
    take?: number;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     *
     * Skip the first `n` MilestoneDependencies.
     */
    skip?: number;
    distinct?:
      | MilestoneDependencyScalarFieldEnum
      | MilestoneDependencyScalarFieldEnum[];
  };

  /**
   * MilestoneDependency create
   */
  export type MilestoneDependencyCreateArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * Select specific fields to fetch from the MilestoneDependency
     */
    select?: MilestoneDependencySelect<ExtArgs> | null;
    /**
     * Omit specific fields from the MilestoneDependency
     */
    omit?: MilestoneDependencyOmit<ExtArgs> | null;
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MilestoneDependencyInclude<ExtArgs> | null;
    /**
     * The data needed to create a MilestoneDependency.
     */
    data: XOR<
      MilestoneDependencyCreateInput,
      MilestoneDependencyUncheckedCreateInput
    >;
  };

  /**
   * MilestoneDependency createMany
   */
  export type MilestoneDependencyCreateManyArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * The data used to create many MilestoneDependencies.
     */
    data:
      | MilestoneDependencyCreateManyInput
      | MilestoneDependencyCreateManyInput[];
    skipDuplicates?: boolean;
  };

  /**
   * MilestoneDependency createManyAndReturn
   */
  export type MilestoneDependencyCreateManyAndReturnArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * Select specific fields to fetch from the MilestoneDependency
     */
    select?: MilestoneDependencySelectCreateManyAndReturn<ExtArgs> | null;
    /**
     * Omit specific fields from the MilestoneDependency
     */
    omit?: MilestoneDependencyOmit<ExtArgs> | null;
    /**
     * The data used to create many MilestoneDependencies.
     */
    data:
      | MilestoneDependencyCreateManyInput
      | MilestoneDependencyCreateManyInput[];
    skipDuplicates?: boolean;
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MilestoneDependencyIncludeCreateManyAndReturn<ExtArgs> | null;
  };

  /**
   * MilestoneDependency update
   */
  export type MilestoneDependencyUpdateArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * Select specific fields to fetch from the MilestoneDependency
     */
    select?: MilestoneDependencySelect<ExtArgs> | null;
    /**
     * Omit specific fields from the MilestoneDependency
     */
    omit?: MilestoneDependencyOmit<ExtArgs> | null;
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MilestoneDependencyInclude<ExtArgs> | null;
    /**
     * The data needed to update a MilestoneDependency.
     */
    data: XOR<
      MilestoneDependencyUpdateInput,
      MilestoneDependencyUncheckedUpdateInput
    >;
    /**
     * Choose, which MilestoneDependency to update.
     */
    where: MilestoneDependencyWhereUniqueInput;
  };

  /**
   * MilestoneDependency updateMany
   */
  export type MilestoneDependencyUpdateManyArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * The data used to update MilestoneDependencies.
     */
    data: XOR<
      MilestoneDependencyUpdateManyMutationInput,
      MilestoneDependencyUncheckedUpdateManyInput
    >;
    /**
     * Filter which MilestoneDependencies to update
     */
    where?: MilestoneDependencyWhereInput;
    /**
     * Limit how many MilestoneDependencies to update.
     */
    limit?: number;
  };

  /**
   * MilestoneDependency updateManyAndReturn
   */
  export type MilestoneDependencyUpdateManyAndReturnArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * Select specific fields to fetch from the MilestoneDependency
     */
    select?: MilestoneDependencySelectUpdateManyAndReturn<ExtArgs> | null;
    /**
     * Omit specific fields from the MilestoneDependency
     */
    omit?: MilestoneDependencyOmit<ExtArgs> | null;
    /**
     * The data used to update MilestoneDependencies.
     */
    data: XOR<
      MilestoneDependencyUpdateManyMutationInput,
      MilestoneDependencyUncheckedUpdateManyInput
    >;
    /**
     * Filter which MilestoneDependencies to update
     */
    where?: MilestoneDependencyWhereInput;
    /**
     * Limit how many MilestoneDependencies to update.
     */
    limit?: number;
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MilestoneDependencyIncludeUpdateManyAndReturn<ExtArgs> | null;
  };

  /**
   * MilestoneDependency upsert
   */
  export type MilestoneDependencyUpsertArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * Select specific fields to fetch from the MilestoneDependency
     */
    select?: MilestoneDependencySelect<ExtArgs> | null;
    /**
     * Omit specific fields from the MilestoneDependency
     */
    omit?: MilestoneDependencyOmit<ExtArgs> | null;
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MilestoneDependencyInclude<ExtArgs> | null;
    /**
     * The filter to search for the MilestoneDependency to update in case it exists.
     */
    where: MilestoneDependencyWhereUniqueInput;
    /**
     * In case the MilestoneDependency found by the `where` argument doesn't exist, create a new MilestoneDependency with this data.
     */
    create: XOR<
      MilestoneDependencyCreateInput,
      MilestoneDependencyUncheckedCreateInput
    >;
    /**
     * In case the MilestoneDependency was found with the provided `where` argument, update it with this data.
     */
    update: XOR<
      MilestoneDependencyUpdateInput,
      MilestoneDependencyUncheckedUpdateInput
    >;
  };

  /**
   * MilestoneDependency delete
   */
  export type MilestoneDependencyDeleteArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * Select specific fields to fetch from the MilestoneDependency
     */
    select?: MilestoneDependencySelect<ExtArgs> | null;
    /**
     * Omit specific fields from the MilestoneDependency
     */
    omit?: MilestoneDependencyOmit<ExtArgs> | null;
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MilestoneDependencyInclude<ExtArgs> | null;
    /**
     * Filter which MilestoneDependency to delete.
     */
    where: MilestoneDependencyWhereUniqueInput;
  };

  /**
   * MilestoneDependency deleteMany
   */
  export type MilestoneDependencyDeleteManyArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * Filter which MilestoneDependencies to delete
     */
    where?: MilestoneDependencyWhereInput;
    /**
     * Limit how many MilestoneDependencies to delete.
     */
    limit?: number;
  };

  /**
   * MilestoneDependency without action
   */
  export type MilestoneDependencyDefaultArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * Select specific fields to fetch from the MilestoneDependency
     */
    select?: MilestoneDependencySelect<ExtArgs> | null;
    /**
     * Omit specific fields from the MilestoneDependency
     */
    omit?: MilestoneDependencyOmit<ExtArgs> | null;
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MilestoneDependencyInclude<ExtArgs> | null;
  };

  /**
   * Model Activity
   */

  export type AggregateActivity = {
    _count: ActivityCountAggregateOutputType | null;
    _min: ActivityMinAggregateOutputType | null;
    _max: ActivityMaxAggregateOutputType | null;
  };

  export type ActivityMinAggregateOutputType = {
    id: string | null;
    type: $Enums.ActivityType | null;
    content: string | null;
    createdAt: Date | null;
    userId: string | null;
    taskId: string | null;
  };

  export type ActivityMaxAggregateOutputType = {
    id: string | null;
    type: $Enums.ActivityType | null;
    content: string | null;
    createdAt: Date | null;
    userId: string | null;
    taskId: string | null;
  };

  export type ActivityCountAggregateOutputType = {
    id: number;
    type: number;
    content: number;
    createdAt: number;
    userId: number;
    taskId: number;
    _all: number;
  };

  export type ActivityMinAggregateInputType = {
    id?: true;
    type?: true;
    content?: true;
    createdAt?: true;
    userId?: true;
    taskId?: true;
  };

  export type ActivityMaxAggregateInputType = {
    id?: true;
    type?: true;
    content?: true;
    createdAt?: true;
    userId?: true;
    taskId?: true;
  };

  export type ActivityCountAggregateInputType = {
    id?: true;
    type?: true;
    content?: true;
    createdAt?: true;
    userId?: true;
    taskId?: true;
    _all?: true;
  };

  export type ActivityAggregateArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * Filter which Activity to aggregate.
     */
    where?: ActivityWhereInput;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     *
     * Determine the order of Activities to fetch.
     */
    orderBy?:
      | ActivityOrderByWithRelationInput
      | ActivityOrderByWithRelationInput[];
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     *
     * Sets the start position
     */
    cursor?: ActivityWhereUniqueInput;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     *
     * Take `±n` Activities from the position of the cursor.
     */
    take?: number;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     *
     * Skip the first `n` Activities.
     */
    skip?: number;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     *
     * Count returned Activities
     **/
    _count?: true | ActivityCountAggregateInputType;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     *
     * Select which fields to find the minimum value
     **/
    _min?: ActivityMinAggregateInputType;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     *
     * Select which fields to find the maximum value
     **/
    _max?: ActivityMaxAggregateInputType;
  };

  export type GetActivityAggregateType<T extends ActivityAggregateArgs> = {
    [P in keyof T & keyof AggregateActivity]: P extends "_count" | "count"
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateActivity[P]>
      : GetScalarType<T[P], AggregateActivity[P]>;
  };

  export type ActivityGroupByArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    where?: ActivityWhereInput;
    orderBy?:
      | ActivityOrderByWithAggregationInput
      | ActivityOrderByWithAggregationInput[];
    by: ActivityScalarFieldEnum[] | ActivityScalarFieldEnum;
    having?: ActivityScalarWhereWithAggregatesInput;
    take?: number;
    skip?: number;
    _count?: ActivityCountAggregateInputType | true;
    _min?: ActivityMinAggregateInputType;
    _max?: ActivityMaxAggregateInputType;
  };

  export type ActivityGroupByOutputType = {
    id: string;
    type: $Enums.ActivityType;
    content: string;
    createdAt: Date;
    userId: string;
    taskId: string | null;
    _count: ActivityCountAggregateOutputType | null;
    _min: ActivityMinAggregateOutputType | null;
    _max: ActivityMaxAggregateOutputType | null;
  };

  type GetActivityGroupByPayload<T extends ActivityGroupByArgs> =
    Prisma.PrismaPromise<
      Array<
        PickEnumerable<ActivityGroupByOutputType, T["by"]> & {
          [P in keyof T & keyof ActivityGroupByOutputType]: P extends "_count"
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ActivityGroupByOutputType[P]>
            : GetScalarType<T[P], ActivityGroupByOutputType[P]>;
        }
      >
    >;

  export type ActivitySelect<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = $Extensions.GetSelect<
    {
      id?: boolean;
      type?: boolean;
      content?: boolean;
      createdAt?: boolean;
      userId?: boolean;
      taskId?: boolean;
      user?: boolean | UserDefaultArgs<ExtArgs>;
      task?: boolean | Activity$taskArgs<ExtArgs>;
    },
    ExtArgs["result"]["activity"]
  >;

  export type ActivitySelectCreateManyAndReturn<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = $Extensions.GetSelect<
    {
      id?: boolean;
      type?: boolean;
      content?: boolean;
      createdAt?: boolean;
      userId?: boolean;
      taskId?: boolean;
      user?: boolean | UserDefaultArgs<ExtArgs>;
      task?: boolean | Activity$taskArgs<ExtArgs>;
    },
    ExtArgs["result"]["activity"]
  >;

  export type ActivitySelectUpdateManyAndReturn<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = $Extensions.GetSelect<
    {
      id?: boolean;
      type?: boolean;
      content?: boolean;
      createdAt?: boolean;
      userId?: boolean;
      taskId?: boolean;
      user?: boolean | UserDefaultArgs<ExtArgs>;
      task?: boolean | Activity$taskArgs<ExtArgs>;
    },
    ExtArgs["result"]["activity"]
  >;

  export type ActivitySelectScalar = {
    id?: boolean;
    type?: boolean;
    content?: boolean;
    createdAt?: boolean;
    userId?: boolean;
    taskId?: boolean;
  };

  export type ActivityOmit<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = $Extensions.GetOmit<
    "id" | "type" | "content" | "createdAt" | "userId" | "taskId",
    ExtArgs["result"]["activity"]
  >;
  export type ActivityInclude<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    user?: boolean | UserDefaultArgs<ExtArgs>;
    task?: boolean | Activity$taskArgs<ExtArgs>;
  };
  export type ActivityIncludeCreateManyAndReturn<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    user?: boolean | UserDefaultArgs<ExtArgs>;
    task?: boolean | Activity$taskArgs<ExtArgs>;
  };
  export type ActivityIncludeUpdateManyAndReturn<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    user?: boolean | UserDefaultArgs<ExtArgs>;
    task?: boolean | Activity$taskArgs<ExtArgs>;
  };

  export type $ActivityPayload<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    name: "Activity";
    objects: {
      user: Prisma.$UserPayload<ExtArgs>;
      task: Prisma.$TaskPayload<ExtArgs> | null;
    };
    scalars: $Extensions.GetPayloadResult<
      {
        id: string;
        type: $Enums.ActivityType;
        content: string;
        createdAt: Date;
        userId: string;
        taskId: string | null;
      },
      ExtArgs["result"]["activity"]
    >;
    composites: {};
  };

  type ActivityGetPayload<
    S extends boolean | null | undefined | ActivityDefaultArgs,
  > = $Result.GetResult<Prisma.$ActivityPayload, S>;

  type ActivityCountArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = Omit<ActivityFindManyArgs, "select" | "include" | "distinct" | "omit"> & {
    select?: ActivityCountAggregateInputType | true;
  };

  export interface ActivityDelegate<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
    GlobalOmitOptions = {},
  > {
    [K: symbol]: {
      types: Prisma.TypeMap<ExtArgs>["model"]["Activity"];
      meta: { name: "Activity" };
    };
    /**
     * Find zero or one Activity that matches the filter.
     * @param {ActivityFindUniqueArgs} args - Arguments to find a Activity
     * @example
     * // Get one Activity
     * const activity = await prisma.activity.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ActivityFindUniqueArgs>(
      args: SelectSubset<T, ActivityFindUniqueArgs<ExtArgs>>,
    ): Prisma__ActivityClient<
      $Result.GetResult<
        Prisma.$ActivityPayload<ExtArgs>,
        T,
        "findUnique",
        GlobalOmitOptions
      > | null,
      null,
      ExtArgs,
      GlobalOmitOptions
    >;

    /**
     * Find one Activity that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {ActivityFindUniqueOrThrowArgs} args - Arguments to find a Activity
     * @example
     * // Get one Activity
     * const activity = await prisma.activity.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ActivityFindUniqueOrThrowArgs>(
      args: SelectSubset<T, ActivityFindUniqueOrThrowArgs<ExtArgs>>,
    ): Prisma__ActivityClient<
      $Result.GetResult<
        Prisma.$ActivityPayload<ExtArgs>,
        T,
        "findUniqueOrThrow",
        GlobalOmitOptions
      >,
      never,
      ExtArgs,
      GlobalOmitOptions
    >;

    /**
     * Find the first Activity that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ActivityFindFirstArgs} args - Arguments to find a Activity
     * @example
     * // Get one Activity
     * const activity = await prisma.activity.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ActivityFindFirstArgs>(
      args?: SelectSubset<T, ActivityFindFirstArgs<ExtArgs>>,
    ): Prisma__ActivityClient<
      $Result.GetResult<
        Prisma.$ActivityPayload<ExtArgs>,
        T,
        "findFirst",
        GlobalOmitOptions
      > | null,
      null,
      ExtArgs,
      GlobalOmitOptions
    >;

    /**
     * Find the first Activity that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ActivityFindFirstOrThrowArgs} args - Arguments to find a Activity
     * @example
     * // Get one Activity
     * const activity = await prisma.activity.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ActivityFindFirstOrThrowArgs>(
      args?: SelectSubset<T, ActivityFindFirstOrThrowArgs<ExtArgs>>,
    ): Prisma__ActivityClient<
      $Result.GetResult<
        Prisma.$ActivityPayload<ExtArgs>,
        T,
        "findFirstOrThrow",
        GlobalOmitOptions
      >,
      never,
      ExtArgs,
      GlobalOmitOptions
    >;

    /**
     * Find zero or more Activities that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ActivityFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Activities
     * const activities = await prisma.activity.findMany()
     *
     * // Get first 10 Activities
     * const activities = await prisma.activity.findMany({ take: 10 })
     *
     * // Only select the `id`
     * const activityWithIdOnly = await prisma.activity.findMany({ select: { id: true } })
     *
     */
    findMany<T extends ActivityFindManyArgs>(
      args?: SelectSubset<T, ActivityFindManyArgs<ExtArgs>>,
    ): Prisma.PrismaPromise<
      $Result.GetResult<
        Prisma.$ActivityPayload<ExtArgs>,
        T,
        "findMany",
        GlobalOmitOptions
      >
    >;

    /**
     * Create a Activity.
     * @param {ActivityCreateArgs} args - Arguments to create a Activity.
     * @example
     * // Create one Activity
     * const Activity = await prisma.activity.create({
     *   data: {
     *     // ... data to create a Activity
     *   }
     * })
     *
     */
    create<T extends ActivityCreateArgs>(
      args: SelectSubset<T, ActivityCreateArgs<ExtArgs>>,
    ): Prisma__ActivityClient<
      $Result.GetResult<
        Prisma.$ActivityPayload<ExtArgs>,
        T,
        "create",
        GlobalOmitOptions
      >,
      never,
      ExtArgs,
      GlobalOmitOptions
    >;

    /**
     * Create many Activities.
     * @param {ActivityCreateManyArgs} args - Arguments to create many Activities.
     * @example
     * // Create many Activities
     * const activity = await prisma.activity.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *
     */
    createMany<T extends ActivityCreateManyArgs>(
      args?: SelectSubset<T, ActivityCreateManyArgs<ExtArgs>>,
    ): Prisma.PrismaPromise<BatchPayload>;

    /**
     * Create many Activities and returns the data saved in the database.
     * @param {ActivityCreateManyAndReturnArgs} args - Arguments to create many Activities.
     * @example
     * // Create many Activities
     * const activity = await prisma.activity.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *
     * // Create many Activities and only return the `id`
     * const activityWithIdOnly = await prisma.activity.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     *
     */
    createManyAndReturn<T extends ActivityCreateManyAndReturnArgs>(
      args?: SelectSubset<T, ActivityCreateManyAndReturnArgs<ExtArgs>>,
    ): Prisma.PrismaPromise<
      $Result.GetResult<
        Prisma.$ActivityPayload<ExtArgs>,
        T,
        "createManyAndReturn",
        GlobalOmitOptions
      >
    >;

    /**
     * Delete a Activity.
     * @param {ActivityDeleteArgs} args - Arguments to delete one Activity.
     * @example
     * // Delete one Activity
     * const Activity = await prisma.activity.delete({
     *   where: {
     *     // ... filter to delete one Activity
     *   }
     * })
     *
     */
    delete<T extends ActivityDeleteArgs>(
      args: SelectSubset<T, ActivityDeleteArgs<ExtArgs>>,
    ): Prisma__ActivityClient<
      $Result.GetResult<
        Prisma.$ActivityPayload<ExtArgs>,
        T,
        "delete",
        GlobalOmitOptions
      >,
      never,
      ExtArgs,
      GlobalOmitOptions
    >;

    /**
     * Update one Activity.
     * @param {ActivityUpdateArgs} args - Arguments to update one Activity.
     * @example
     * // Update one Activity
     * const activity = await prisma.activity.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     *
     */
    update<T extends ActivityUpdateArgs>(
      args: SelectSubset<T, ActivityUpdateArgs<ExtArgs>>,
    ): Prisma__ActivityClient<
      $Result.GetResult<
        Prisma.$ActivityPayload<ExtArgs>,
        T,
        "update",
        GlobalOmitOptions
      >,
      never,
      ExtArgs,
      GlobalOmitOptions
    >;

    /**
     * Delete zero or more Activities.
     * @param {ActivityDeleteManyArgs} args - Arguments to filter Activities to delete.
     * @example
     * // Delete a few Activities
     * const { count } = await prisma.activity.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     *
     */
    deleteMany<T extends ActivityDeleteManyArgs>(
      args?: SelectSubset<T, ActivityDeleteManyArgs<ExtArgs>>,
    ): Prisma.PrismaPromise<BatchPayload>;

    /**
     * Update zero or more Activities.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ActivityUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Activities
     * const activity = await prisma.activity.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     *
     */
    updateMany<T extends ActivityUpdateManyArgs>(
      args: SelectSubset<T, ActivityUpdateManyArgs<ExtArgs>>,
    ): Prisma.PrismaPromise<BatchPayload>;

    /**
     * Update zero or more Activities and returns the data updated in the database.
     * @param {ActivityUpdateManyAndReturnArgs} args - Arguments to update many Activities.
     * @example
     * // Update many Activities
     * const activity = await prisma.activity.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *
     * // Update zero or more Activities and only return the `id`
     * const activityWithIdOnly = await prisma.activity.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     *
     */
    updateManyAndReturn<T extends ActivityUpdateManyAndReturnArgs>(
      args: SelectSubset<T, ActivityUpdateManyAndReturnArgs<ExtArgs>>,
    ): Prisma.PrismaPromise<
      $Result.GetResult<
        Prisma.$ActivityPayload<ExtArgs>,
        T,
        "updateManyAndReturn",
        GlobalOmitOptions
      >
    >;

    /**
     * Create or update one Activity.
     * @param {ActivityUpsertArgs} args - Arguments to update or create a Activity.
     * @example
     * // Update or create a Activity
     * const activity = await prisma.activity.upsert({
     *   create: {
     *     // ... data to create a Activity
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Activity we want to update
     *   }
     * })
     */
    upsert<T extends ActivityUpsertArgs>(
      args: SelectSubset<T, ActivityUpsertArgs<ExtArgs>>,
    ): Prisma__ActivityClient<
      $Result.GetResult<
        Prisma.$ActivityPayload<ExtArgs>,
        T,
        "upsert",
        GlobalOmitOptions
      >,
      never,
      ExtArgs,
      GlobalOmitOptions
    >;

    /**
     * Count the number of Activities.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ActivityCountArgs} args - Arguments to filter Activities to count.
     * @example
     * // Count the number of Activities
     * const count = await prisma.activity.count({
     *   where: {
     *     // ... the filter for the Activities we want to count
     *   }
     * })
     **/
    count<T extends ActivityCountArgs>(
      args?: Subset<T, ActivityCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<"select", any>
        ? T["select"] extends true
          ? number
          : GetScalarType<T["select"], ActivityCountAggregateOutputType>
        : number
    >;

    /**
     * Allows you to perform aggregations operations on a Activity.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ActivityAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
     **/
    aggregate<T extends ActivityAggregateArgs>(
      args: Subset<T, ActivityAggregateArgs>,
    ): Prisma.PrismaPromise<GetActivityAggregateType<T>>;

    /**
     * Group by Activity.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ActivityGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     *
     **/
    groupBy<
      T extends ActivityGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<"skip", Keys<T>>,
        Extends<"take", Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ActivityGroupByArgs["orderBy"] }
        : { orderBy?: ActivityGroupByArgs["orderBy"] },
      OrderFields extends ExcludeUnderscoreKeys<
        Keys<MaybeTupleToUnion<T["orderBy"]>>
      >,
      ByFields extends MaybeTupleToUnion<T["by"]>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T["having"]>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T["by"] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
        ? `Error: "by" must not be empty.`
        : HavingValid extends False
          ? {
              [P in HavingFields]: P extends ByFields
                ? never
                : P extends string
                  ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
                  : [
                      Error,
                      "Field ",
                      P,
                      ` in "having" needs to be provided in "by"`,
                    ];
            }[HavingFields]
          : "take" extends Keys<T>
            ? "orderBy" extends Keys<T>
              ? ByValid extends True
                ? {}
                : {
                    [P in OrderFields]: P extends ByFields
                      ? never
                      : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
                  }[OrderFields]
              : 'Error: If you provide "take", you also need to provide "orderBy"'
            : "skip" extends Keys<T>
              ? "orderBy" extends Keys<T>
                ? ByValid extends True
                  ? {}
                  : {
                      [P in OrderFields]: P extends ByFields
                        ? never
                        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
                    }[OrderFields]
                : 'Error: If you provide "skip", you also need to provide "orderBy"'
              : ByValid extends True
                ? {}
                : {
                    [P in OrderFields]: P extends ByFields
                      ? never
                      : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
                  }[OrderFields],
    >(
      args: SubsetIntersection<T, ActivityGroupByArgs, OrderByArg> &
        InputErrors,
    ): {} extends InputErrors
      ? GetActivityGroupByPayload<T>
      : Prisma.PrismaPromise<InputErrors>;
    /**
     * Fields of the Activity model
     */
    readonly fields: ActivityFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Activity.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ActivityClient<
    T,
    Null = never,
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
    GlobalOmitOptions = {},
  > extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise";
    user<T extends UserDefaultArgs<ExtArgs> = {}>(
      args?: Subset<T, UserDefaultArgs<ExtArgs>>,
    ): Prisma__UserClient<
      | $Result.GetResult<
          Prisma.$UserPayload<ExtArgs>,
          T,
          "findUniqueOrThrow",
          GlobalOmitOptions
        >
      | Null,
      Null,
      ExtArgs,
      GlobalOmitOptions
    >;
    task<T extends Activity$taskArgs<ExtArgs> = {}>(
      args?: Subset<T, Activity$taskArgs<ExtArgs>>,
    ): Prisma__TaskClient<
      $Result.GetResult<
        Prisma.$TaskPayload<ExtArgs>,
        T,
        "findUniqueOrThrow",
        GlobalOmitOptions
      > | null,
      null,
      ExtArgs,
      GlobalOmitOptions
    >;
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(
      onfulfilled?:
        | ((value: T) => TResult1 | PromiseLike<TResult1>)
        | undefined
        | null,
      onrejected?:
        | ((reason: any) => TResult2 | PromiseLike<TResult2>)
        | undefined
        | null,
    ): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(
      onrejected?:
        | ((reason: any) => TResult | PromiseLike<TResult>)
        | undefined
        | null,
    ): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }

  /**
   * Fields of the Activity model
   */
  interface ActivityFieldRefs {
    readonly id: FieldRef<"Activity", "String">;
    readonly type: FieldRef<"Activity", "ActivityType">;
    readonly content: FieldRef<"Activity", "String">;
    readonly createdAt: FieldRef<"Activity", "DateTime">;
    readonly userId: FieldRef<"Activity", "String">;
    readonly taskId: FieldRef<"Activity", "String">;
  }

  // Custom InputTypes
  /**
   * Activity findUnique
   */
  export type ActivityFindUniqueArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * Select specific fields to fetch from the Activity
     */
    select?: ActivitySelect<ExtArgs> | null;
    /**
     * Omit specific fields from the Activity
     */
    omit?: ActivityOmit<ExtArgs> | null;
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ActivityInclude<ExtArgs> | null;
    /**
     * Filter, which Activity to fetch.
     */
    where: ActivityWhereUniqueInput;
  };

  /**
   * Activity findUniqueOrThrow
   */
  export type ActivityFindUniqueOrThrowArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * Select specific fields to fetch from the Activity
     */
    select?: ActivitySelect<ExtArgs> | null;
    /**
     * Omit specific fields from the Activity
     */
    omit?: ActivityOmit<ExtArgs> | null;
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ActivityInclude<ExtArgs> | null;
    /**
     * Filter, which Activity to fetch.
     */
    where: ActivityWhereUniqueInput;
  };

  /**
   * Activity findFirst
   */
  export type ActivityFindFirstArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * Select specific fields to fetch from the Activity
     */
    select?: ActivitySelect<ExtArgs> | null;
    /**
     * Omit specific fields from the Activity
     */
    omit?: ActivityOmit<ExtArgs> | null;
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ActivityInclude<ExtArgs> | null;
    /**
     * Filter, which Activity to fetch.
     */
    where?: ActivityWhereInput;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     *
     * Determine the order of Activities to fetch.
     */
    orderBy?:
      | ActivityOrderByWithRelationInput
      | ActivityOrderByWithRelationInput[];
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     *
     * Sets the position for searching for Activities.
     */
    cursor?: ActivityWhereUniqueInput;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     *
     * Take `±n` Activities from the position of the cursor.
     */
    take?: number;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     *
     * Skip the first `n` Activities.
     */
    skip?: number;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     *
     * Filter by unique combinations of Activities.
     */
    distinct?: ActivityScalarFieldEnum | ActivityScalarFieldEnum[];
  };

  /**
   * Activity findFirstOrThrow
   */
  export type ActivityFindFirstOrThrowArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * Select specific fields to fetch from the Activity
     */
    select?: ActivitySelect<ExtArgs> | null;
    /**
     * Omit specific fields from the Activity
     */
    omit?: ActivityOmit<ExtArgs> | null;
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ActivityInclude<ExtArgs> | null;
    /**
     * Filter, which Activity to fetch.
     */
    where?: ActivityWhereInput;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     *
     * Determine the order of Activities to fetch.
     */
    orderBy?:
      | ActivityOrderByWithRelationInput
      | ActivityOrderByWithRelationInput[];
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     *
     * Sets the position for searching for Activities.
     */
    cursor?: ActivityWhereUniqueInput;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     *
     * Take `±n` Activities from the position of the cursor.
     */
    take?: number;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     *
     * Skip the first `n` Activities.
     */
    skip?: number;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     *
     * Filter by unique combinations of Activities.
     */
    distinct?: ActivityScalarFieldEnum | ActivityScalarFieldEnum[];
  };

  /**
   * Activity findMany
   */
  export type ActivityFindManyArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * Select specific fields to fetch from the Activity
     */
    select?: ActivitySelect<ExtArgs> | null;
    /**
     * Omit specific fields from the Activity
     */
    omit?: ActivityOmit<ExtArgs> | null;
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ActivityInclude<ExtArgs> | null;
    /**
     * Filter, which Activities to fetch.
     */
    where?: ActivityWhereInput;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     *
     * Determine the order of Activities to fetch.
     */
    orderBy?:
      | ActivityOrderByWithRelationInput
      | ActivityOrderByWithRelationInput[];
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     *
     * Sets the position for listing Activities.
     */
    cursor?: ActivityWhereUniqueInput;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     *
     * Take `±n` Activities from the position of the cursor.
     */
    take?: number;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     *
     * Skip the first `n` Activities.
     */
    skip?: number;
    distinct?: ActivityScalarFieldEnum | ActivityScalarFieldEnum[];
  };

  /**
   * Activity create
   */
  export type ActivityCreateArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * Select specific fields to fetch from the Activity
     */
    select?: ActivitySelect<ExtArgs> | null;
    /**
     * Omit specific fields from the Activity
     */
    omit?: ActivityOmit<ExtArgs> | null;
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ActivityInclude<ExtArgs> | null;
    /**
     * The data needed to create a Activity.
     */
    data: XOR<ActivityCreateInput, ActivityUncheckedCreateInput>;
  };

  /**
   * Activity createMany
   */
  export type ActivityCreateManyArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * The data used to create many Activities.
     */
    data: ActivityCreateManyInput | ActivityCreateManyInput[];
    skipDuplicates?: boolean;
  };

  /**
   * Activity createManyAndReturn
   */
  export type ActivityCreateManyAndReturnArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * Select specific fields to fetch from the Activity
     */
    select?: ActivitySelectCreateManyAndReturn<ExtArgs> | null;
    /**
     * Omit specific fields from the Activity
     */
    omit?: ActivityOmit<ExtArgs> | null;
    /**
     * The data used to create many Activities.
     */
    data: ActivityCreateManyInput | ActivityCreateManyInput[];
    skipDuplicates?: boolean;
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ActivityIncludeCreateManyAndReturn<ExtArgs> | null;
  };

  /**
   * Activity update
   */
  export type ActivityUpdateArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * Select specific fields to fetch from the Activity
     */
    select?: ActivitySelect<ExtArgs> | null;
    /**
     * Omit specific fields from the Activity
     */
    omit?: ActivityOmit<ExtArgs> | null;
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ActivityInclude<ExtArgs> | null;
    /**
     * The data needed to update a Activity.
     */
    data: XOR<ActivityUpdateInput, ActivityUncheckedUpdateInput>;
    /**
     * Choose, which Activity to update.
     */
    where: ActivityWhereUniqueInput;
  };

  /**
   * Activity updateMany
   */
  export type ActivityUpdateManyArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * The data used to update Activities.
     */
    data: XOR<
      ActivityUpdateManyMutationInput,
      ActivityUncheckedUpdateManyInput
    >;
    /**
     * Filter which Activities to update
     */
    where?: ActivityWhereInput;
    /**
     * Limit how many Activities to update.
     */
    limit?: number;
  };

  /**
   * Activity updateManyAndReturn
   */
  export type ActivityUpdateManyAndReturnArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * Select specific fields to fetch from the Activity
     */
    select?: ActivitySelectUpdateManyAndReturn<ExtArgs> | null;
    /**
     * Omit specific fields from the Activity
     */
    omit?: ActivityOmit<ExtArgs> | null;
    /**
     * The data used to update Activities.
     */
    data: XOR<
      ActivityUpdateManyMutationInput,
      ActivityUncheckedUpdateManyInput
    >;
    /**
     * Filter which Activities to update
     */
    where?: ActivityWhereInput;
    /**
     * Limit how many Activities to update.
     */
    limit?: number;
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ActivityIncludeUpdateManyAndReturn<ExtArgs> | null;
  };

  /**
   * Activity upsert
   */
  export type ActivityUpsertArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * Select specific fields to fetch from the Activity
     */
    select?: ActivitySelect<ExtArgs> | null;
    /**
     * Omit specific fields from the Activity
     */
    omit?: ActivityOmit<ExtArgs> | null;
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ActivityInclude<ExtArgs> | null;
    /**
     * The filter to search for the Activity to update in case it exists.
     */
    where: ActivityWhereUniqueInput;
    /**
     * In case the Activity found by the `where` argument doesn't exist, create a new Activity with this data.
     */
    create: XOR<ActivityCreateInput, ActivityUncheckedCreateInput>;
    /**
     * In case the Activity was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ActivityUpdateInput, ActivityUncheckedUpdateInput>;
  };

  /**
   * Activity delete
   */
  export type ActivityDeleteArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * Select specific fields to fetch from the Activity
     */
    select?: ActivitySelect<ExtArgs> | null;
    /**
     * Omit specific fields from the Activity
     */
    omit?: ActivityOmit<ExtArgs> | null;
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ActivityInclude<ExtArgs> | null;
    /**
     * Filter which Activity to delete.
     */
    where: ActivityWhereUniqueInput;
  };

  /**
   * Activity deleteMany
   */
  export type ActivityDeleteManyArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * Filter which Activities to delete
     */
    where?: ActivityWhereInput;
    /**
     * Limit how many Activities to delete.
     */
    limit?: number;
  };

  /**
   * Activity.task
   */
  export type Activity$taskArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * Select specific fields to fetch from the Task
     */
    select?: TaskSelect<ExtArgs> | null;
    /**
     * Omit specific fields from the Task
     */
    omit?: TaskOmit<ExtArgs> | null;
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TaskInclude<ExtArgs> | null;
    where?: TaskWhereInput;
  };

  /**
   * Activity without action
   */
  export type ActivityDefaultArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * Select specific fields to fetch from the Activity
     */
    select?: ActivitySelect<ExtArgs> | null;
    /**
     * Omit specific fields from the Activity
     */
    omit?: ActivityOmit<ExtArgs> | null;
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ActivityInclude<ExtArgs> | null;
  };

  /**
   * Model Notification
   */

  export type AggregateNotification = {
    _count: NotificationCountAggregateOutputType | null;
    _min: NotificationMinAggregateOutputType | null;
    _max: NotificationMaxAggregateOutputType | null;
  };

  export type NotificationMinAggregateOutputType = {
    id: string | null;
    title: string | null;
    content: string | null;
    isRead: boolean | null;
    createdAt: Date | null;
    userId: string | null;
  };

  export type NotificationMaxAggregateOutputType = {
    id: string | null;
    title: string | null;
    content: string | null;
    isRead: boolean | null;
    createdAt: Date | null;
    userId: string | null;
  };

  export type NotificationCountAggregateOutputType = {
    id: number;
    title: number;
    content: number;
    isRead: number;
    createdAt: number;
    userId: number;
    _all: number;
  };

  export type NotificationMinAggregateInputType = {
    id?: true;
    title?: true;
    content?: true;
    isRead?: true;
    createdAt?: true;
    userId?: true;
  };

  export type NotificationMaxAggregateInputType = {
    id?: true;
    title?: true;
    content?: true;
    isRead?: true;
    createdAt?: true;
    userId?: true;
  };

  export type NotificationCountAggregateInputType = {
    id?: true;
    title?: true;
    content?: true;
    isRead?: true;
    createdAt?: true;
    userId?: true;
    _all?: true;
  };

  export type NotificationAggregateArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * Filter which Notification to aggregate.
     */
    where?: NotificationWhereInput;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     *
     * Determine the order of Notifications to fetch.
     */
    orderBy?:
      | NotificationOrderByWithRelationInput
      | NotificationOrderByWithRelationInput[];
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     *
     * Sets the start position
     */
    cursor?: NotificationWhereUniqueInput;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     *
     * Take `±n` Notifications from the position of the cursor.
     */
    take?: number;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     *
     * Skip the first `n` Notifications.
     */
    skip?: number;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     *
     * Count returned Notifications
     **/
    _count?: true | NotificationCountAggregateInputType;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     *
     * Select which fields to find the minimum value
     **/
    _min?: NotificationMinAggregateInputType;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     *
     * Select which fields to find the maximum value
     **/
    _max?: NotificationMaxAggregateInputType;
  };

  export type GetNotificationAggregateType<
    T extends NotificationAggregateArgs,
  > = {
    [P in keyof T & keyof AggregateNotification]: P extends "_count" | "count"
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateNotification[P]>
      : GetScalarType<T[P], AggregateNotification[P]>;
  };

  export type NotificationGroupByArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    where?: NotificationWhereInput;
    orderBy?:
      | NotificationOrderByWithAggregationInput
      | NotificationOrderByWithAggregationInput[];
    by: NotificationScalarFieldEnum[] | NotificationScalarFieldEnum;
    having?: NotificationScalarWhereWithAggregatesInput;
    take?: number;
    skip?: number;
    _count?: NotificationCountAggregateInputType | true;
    _min?: NotificationMinAggregateInputType;
    _max?: NotificationMaxAggregateInputType;
  };

  export type NotificationGroupByOutputType = {
    id: string;
    title: string;
    content: string;
    isRead: boolean;
    createdAt: Date;
    userId: string;
    _count: NotificationCountAggregateOutputType | null;
    _min: NotificationMinAggregateOutputType | null;
    _max: NotificationMaxAggregateOutputType | null;
  };

  type GetNotificationGroupByPayload<T extends NotificationGroupByArgs> =
    Prisma.PrismaPromise<
      Array<
        PickEnumerable<NotificationGroupByOutputType, T["by"]> & {
          [P in keyof T &
            keyof NotificationGroupByOutputType]: P extends "_count"
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], NotificationGroupByOutputType[P]>
            : GetScalarType<T[P], NotificationGroupByOutputType[P]>;
        }
      >
    >;

  export type NotificationSelect<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = $Extensions.GetSelect<
    {
      id?: boolean;
      title?: boolean;
      content?: boolean;
      isRead?: boolean;
      createdAt?: boolean;
      userId?: boolean;
      user?: boolean | UserDefaultArgs<ExtArgs>;
    },
    ExtArgs["result"]["notification"]
  >;

  export type NotificationSelectCreateManyAndReturn<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = $Extensions.GetSelect<
    {
      id?: boolean;
      title?: boolean;
      content?: boolean;
      isRead?: boolean;
      createdAt?: boolean;
      userId?: boolean;
      user?: boolean | UserDefaultArgs<ExtArgs>;
    },
    ExtArgs["result"]["notification"]
  >;

  export type NotificationSelectUpdateManyAndReturn<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = $Extensions.GetSelect<
    {
      id?: boolean;
      title?: boolean;
      content?: boolean;
      isRead?: boolean;
      createdAt?: boolean;
      userId?: boolean;
      user?: boolean | UserDefaultArgs<ExtArgs>;
    },
    ExtArgs["result"]["notification"]
  >;

  export type NotificationSelectScalar = {
    id?: boolean;
    title?: boolean;
    content?: boolean;
    isRead?: boolean;
    createdAt?: boolean;
    userId?: boolean;
  };

  export type NotificationOmit<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = $Extensions.GetOmit<
    "id" | "title" | "content" | "isRead" | "createdAt" | "userId",
    ExtArgs["result"]["notification"]
  >;
  export type NotificationInclude<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    user?: boolean | UserDefaultArgs<ExtArgs>;
  };
  export type NotificationIncludeCreateManyAndReturn<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    user?: boolean | UserDefaultArgs<ExtArgs>;
  };
  export type NotificationIncludeUpdateManyAndReturn<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    user?: boolean | UserDefaultArgs<ExtArgs>;
  };

  export type $NotificationPayload<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    name: "Notification";
    objects: {
      user: Prisma.$UserPayload<ExtArgs>;
    };
    scalars: $Extensions.GetPayloadResult<
      {
        id: string;
        title: string;
        content: string;
        isRead: boolean;
        createdAt: Date;
        userId: string;
      },
      ExtArgs["result"]["notification"]
    >;
    composites: {};
  };

  type NotificationGetPayload<
    S extends boolean | null | undefined | NotificationDefaultArgs,
  > = $Result.GetResult<Prisma.$NotificationPayload, S>;

  type NotificationCountArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = Omit<
    NotificationFindManyArgs,
    "select" | "include" | "distinct" | "omit"
  > & {
    select?: NotificationCountAggregateInputType | true;
  };

  export interface NotificationDelegate<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
    GlobalOmitOptions = {},
  > {
    [K: symbol]: {
      types: Prisma.TypeMap<ExtArgs>["model"]["Notification"];
      meta: { name: "Notification" };
    };
    /**
     * Find zero or one Notification that matches the filter.
     * @param {NotificationFindUniqueArgs} args - Arguments to find a Notification
     * @example
     * // Get one Notification
     * const notification = await prisma.notification.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends NotificationFindUniqueArgs>(
      args: SelectSubset<T, NotificationFindUniqueArgs<ExtArgs>>,
    ): Prisma__NotificationClient<
      $Result.GetResult<
        Prisma.$NotificationPayload<ExtArgs>,
        T,
        "findUnique",
        GlobalOmitOptions
      > | null,
      null,
      ExtArgs,
      GlobalOmitOptions
    >;

    /**
     * Find one Notification that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {NotificationFindUniqueOrThrowArgs} args - Arguments to find a Notification
     * @example
     * // Get one Notification
     * const notification = await prisma.notification.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends NotificationFindUniqueOrThrowArgs>(
      args: SelectSubset<T, NotificationFindUniqueOrThrowArgs<ExtArgs>>,
    ): Prisma__NotificationClient<
      $Result.GetResult<
        Prisma.$NotificationPayload<ExtArgs>,
        T,
        "findUniqueOrThrow",
        GlobalOmitOptions
      >,
      never,
      ExtArgs,
      GlobalOmitOptions
    >;

    /**
     * Find the first Notification that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationFindFirstArgs} args - Arguments to find a Notification
     * @example
     * // Get one Notification
     * const notification = await prisma.notification.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends NotificationFindFirstArgs>(
      args?: SelectSubset<T, NotificationFindFirstArgs<ExtArgs>>,
    ): Prisma__NotificationClient<
      $Result.GetResult<
        Prisma.$NotificationPayload<ExtArgs>,
        T,
        "findFirst",
        GlobalOmitOptions
      > | null,
      null,
      ExtArgs,
      GlobalOmitOptions
    >;

    /**
     * Find the first Notification that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationFindFirstOrThrowArgs} args - Arguments to find a Notification
     * @example
     * // Get one Notification
     * const notification = await prisma.notification.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends NotificationFindFirstOrThrowArgs>(
      args?: SelectSubset<T, NotificationFindFirstOrThrowArgs<ExtArgs>>,
    ): Prisma__NotificationClient<
      $Result.GetResult<
        Prisma.$NotificationPayload<ExtArgs>,
        T,
        "findFirstOrThrow",
        GlobalOmitOptions
      >,
      never,
      ExtArgs,
      GlobalOmitOptions
    >;

    /**
     * Find zero or more Notifications that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Notifications
     * const notifications = await prisma.notification.findMany()
     *
     * // Get first 10 Notifications
     * const notifications = await prisma.notification.findMany({ take: 10 })
     *
     * // Only select the `id`
     * const notificationWithIdOnly = await prisma.notification.findMany({ select: { id: true } })
     *
     */
    findMany<T extends NotificationFindManyArgs>(
      args?: SelectSubset<T, NotificationFindManyArgs<ExtArgs>>,
    ): Prisma.PrismaPromise<
      $Result.GetResult<
        Prisma.$NotificationPayload<ExtArgs>,
        T,
        "findMany",
        GlobalOmitOptions
      >
    >;

    /**
     * Create a Notification.
     * @param {NotificationCreateArgs} args - Arguments to create a Notification.
     * @example
     * // Create one Notification
     * const Notification = await prisma.notification.create({
     *   data: {
     *     // ... data to create a Notification
     *   }
     * })
     *
     */
    create<T extends NotificationCreateArgs>(
      args: SelectSubset<T, NotificationCreateArgs<ExtArgs>>,
    ): Prisma__NotificationClient<
      $Result.GetResult<
        Prisma.$NotificationPayload<ExtArgs>,
        T,
        "create",
        GlobalOmitOptions
      >,
      never,
      ExtArgs,
      GlobalOmitOptions
    >;

    /**
     * Create many Notifications.
     * @param {NotificationCreateManyArgs} args - Arguments to create many Notifications.
     * @example
     * // Create many Notifications
     * const notification = await prisma.notification.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *
     */
    createMany<T extends NotificationCreateManyArgs>(
      args?: SelectSubset<T, NotificationCreateManyArgs<ExtArgs>>,
    ): Prisma.PrismaPromise<BatchPayload>;

    /**
     * Create many Notifications and returns the data saved in the database.
     * @param {NotificationCreateManyAndReturnArgs} args - Arguments to create many Notifications.
     * @example
     * // Create many Notifications
     * const notification = await prisma.notification.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *
     * // Create many Notifications and only return the `id`
     * const notificationWithIdOnly = await prisma.notification.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     *
     */
    createManyAndReturn<T extends NotificationCreateManyAndReturnArgs>(
      args?: SelectSubset<T, NotificationCreateManyAndReturnArgs<ExtArgs>>,
    ): Prisma.PrismaPromise<
      $Result.GetResult<
        Prisma.$NotificationPayload<ExtArgs>,
        T,
        "createManyAndReturn",
        GlobalOmitOptions
      >
    >;

    /**
     * Delete a Notification.
     * @param {NotificationDeleteArgs} args - Arguments to delete one Notification.
     * @example
     * // Delete one Notification
     * const Notification = await prisma.notification.delete({
     *   where: {
     *     // ... filter to delete one Notification
     *   }
     * })
     *
     */
    delete<T extends NotificationDeleteArgs>(
      args: SelectSubset<T, NotificationDeleteArgs<ExtArgs>>,
    ): Prisma__NotificationClient<
      $Result.GetResult<
        Prisma.$NotificationPayload<ExtArgs>,
        T,
        "delete",
        GlobalOmitOptions
      >,
      never,
      ExtArgs,
      GlobalOmitOptions
    >;

    /**
     * Update one Notification.
     * @param {NotificationUpdateArgs} args - Arguments to update one Notification.
     * @example
     * // Update one Notification
     * const notification = await prisma.notification.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     *
     */
    update<T extends NotificationUpdateArgs>(
      args: SelectSubset<T, NotificationUpdateArgs<ExtArgs>>,
    ): Prisma__NotificationClient<
      $Result.GetResult<
        Prisma.$NotificationPayload<ExtArgs>,
        T,
        "update",
        GlobalOmitOptions
      >,
      never,
      ExtArgs,
      GlobalOmitOptions
    >;

    /**
     * Delete zero or more Notifications.
     * @param {NotificationDeleteManyArgs} args - Arguments to filter Notifications to delete.
     * @example
     * // Delete a few Notifications
     * const { count } = await prisma.notification.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     *
     */
    deleteMany<T extends NotificationDeleteManyArgs>(
      args?: SelectSubset<T, NotificationDeleteManyArgs<ExtArgs>>,
    ): Prisma.PrismaPromise<BatchPayload>;

    /**
     * Update zero or more Notifications.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Notifications
     * const notification = await prisma.notification.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     *
     */
    updateMany<T extends NotificationUpdateManyArgs>(
      args: SelectSubset<T, NotificationUpdateManyArgs<ExtArgs>>,
    ): Prisma.PrismaPromise<BatchPayload>;

    /**
     * Update zero or more Notifications and returns the data updated in the database.
     * @param {NotificationUpdateManyAndReturnArgs} args - Arguments to update many Notifications.
     * @example
     * // Update many Notifications
     * const notification = await prisma.notification.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *
     * // Update zero or more Notifications and only return the `id`
     * const notificationWithIdOnly = await prisma.notification.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     *
     */
    updateManyAndReturn<T extends NotificationUpdateManyAndReturnArgs>(
      args: SelectSubset<T, NotificationUpdateManyAndReturnArgs<ExtArgs>>,
    ): Prisma.PrismaPromise<
      $Result.GetResult<
        Prisma.$NotificationPayload<ExtArgs>,
        T,
        "updateManyAndReturn",
        GlobalOmitOptions
      >
    >;

    /**
     * Create or update one Notification.
     * @param {NotificationUpsertArgs} args - Arguments to update or create a Notification.
     * @example
     * // Update or create a Notification
     * const notification = await prisma.notification.upsert({
     *   create: {
     *     // ... data to create a Notification
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Notification we want to update
     *   }
     * })
     */
    upsert<T extends NotificationUpsertArgs>(
      args: SelectSubset<T, NotificationUpsertArgs<ExtArgs>>,
    ): Prisma__NotificationClient<
      $Result.GetResult<
        Prisma.$NotificationPayload<ExtArgs>,
        T,
        "upsert",
        GlobalOmitOptions
      >,
      never,
      ExtArgs,
      GlobalOmitOptions
    >;

    /**
     * Count the number of Notifications.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationCountArgs} args - Arguments to filter Notifications to count.
     * @example
     * // Count the number of Notifications
     * const count = await prisma.notification.count({
     *   where: {
     *     // ... the filter for the Notifications we want to count
     *   }
     * })
     **/
    count<T extends NotificationCountArgs>(
      args?: Subset<T, NotificationCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<"select", any>
        ? T["select"] extends true
          ? number
          : GetScalarType<T["select"], NotificationCountAggregateOutputType>
        : number
    >;

    /**
     * Allows you to perform aggregations operations on a Notification.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
     **/
    aggregate<T extends NotificationAggregateArgs>(
      args: Subset<T, NotificationAggregateArgs>,
    ): Prisma.PrismaPromise<GetNotificationAggregateType<T>>;

    /**
     * Group by Notification.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     *
     **/
    groupBy<
      T extends NotificationGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<"skip", Keys<T>>,
        Extends<"take", Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: NotificationGroupByArgs["orderBy"] }
        : { orderBy?: NotificationGroupByArgs["orderBy"] },
      OrderFields extends ExcludeUnderscoreKeys<
        Keys<MaybeTupleToUnion<T["orderBy"]>>
      >,
      ByFields extends MaybeTupleToUnion<T["by"]>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T["having"]>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T["by"] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
        ? `Error: "by" must not be empty.`
        : HavingValid extends False
          ? {
              [P in HavingFields]: P extends ByFields
                ? never
                : P extends string
                  ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
                  : [
                      Error,
                      "Field ",
                      P,
                      ` in "having" needs to be provided in "by"`,
                    ];
            }[HavingFields]
          : "take" extends Keys<T>
            ? "orderBy" extends Keys<T>
              ? ByValid extends True
                ? {}
                : {
                    [P in OrderFields]: P extends ByFields
                      ? never
                      : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
                  }[OrderFields]
              : 'Error: If you provide "take", you also need to provide "orderBy"'
            : "skip" extends Keys<T>
              ? "orderBy" extends Keys<T>
                ? ByValid extends True
                  ? {}
                  : {
                      [P in OrderFields]: P extends ByFields
                        ? never
                        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
                    }[OrderFields]
                : 'Error: If you provide "skip", you also need to provide "orderBy"'
              : ByValid extends True
                ? {}
                : {
                    [P in OrderFields]: P extends ByFields
                      ? never
                      : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
                  }[OrderFields],
    >(
      args: SubsetIntersection<T, NotificationGroupByArgs, OrderByArg> &
        InputErrors,
    ): {} extends InputErrors
      ? GetNotificationGroupByPayload<T>
      : Prisma.PrismaPromise<InputErrors>;
    /**
     * Fields of the Notification model
     */
    readonly fields: NotificationFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Notification.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__NotificationClient<
    T,
    Null = never,
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
    GlobalOmitOptions = {},
  > extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise";
    user<T extends UserDefaultArgs<ExtArgs> = {}>(
      args?: Subset<T, UserDefaultArgs<ExtArgs>>,
    ): Prisma__UserClient<
      | $Result.GetResult<
          Prisma.$UserPayload<ExtArgs>,
          T,
          "findUniqueOrThrow",
          GlobalOmitOptions
        >
      | Null,
      Null,
      ExtArgs,
      GlobalOmitOptions
    >;
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(
      onfulfilled?:
        | ((value: T) => TResult1 | PromiseLike<TResult1>)
        | undefined
        | null,
      onrejected?:
        | ((reason: any) => TResult2 | PromiseLike<TResult2>)
        | undefined
        | null,
    ): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(
      onrejected?:
        | ((reason: any) => TResult | PromiseLike<TResult>)
        | undefined
        | null,
    ): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }

  /**
   * Fields of the Notification model
   */
  interface NotificationFieldRefs {
    readonly id: FieldRef<"Notification", "String">;
    readonly title: FieldRef<"Notification", "String">;
    readonly content: FieldRef<"Notification", "String">;
    readonly isRead: FieldRef<"Notification", "Boolean">;
    readonly createdAt: FieldRef<"Notification", "DateTime">;
    readonly userId: FieldRef<"Notification", "String">;
  }

  // Custom InputTypes
  /**
   * Notification findUnique
   */
  export type NotificationFindUniqueArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null;
    /**
     * Omit specific fields from the Notification
     */
    omit?: NotificationOmit<ExtArgs> | null;
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationInclude<ExtArgs> | null;
    /**
     * Filter, which Notification to fetch.
     */
    where: NotificationWhereUniqueInput;
  };

  /**
   * Notification findUniqueOrThrow
   */
  export type NotificationFindUniqueOrThrowArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null;
    /**
     * Omit specific fields from the Notification
     */
    omit?: NotificationOmit<ExtArgs> | null;
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationInclude<ExtArgs> | null;
    /**
     * Filter, which Notification to fetch.
     */
    where: NotificationWhereUniqueInput;
  };

  /**
   * Notification findFirst
   */
  export type NotificationFindFirstArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null;
    /**
     * Omit specific fields from the Notification
     */
    omit?: NotificationOmit<ExtArgs> | null;
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationInclude<ExtArgs> | null;
    /**
     * Filter, which Notification to fetch.
     */
    where?: NotificationWhereInput;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     *
     * Determine the order of Notifications to fetch.
     */
    orderBy?:
      | NotificationOrderByWithRelationInput
      | NotificationOrderByWithRelationInput[];
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     *
     * Sets the position for searching for Notifications.
     */
    cursor?: NotificationWhereUniqueInput;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     *
     * Take `±n` Notifications from the position of the cursor.
     */
    take?: number;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     *
     * Skip the first `n` Notifications.
     */
    skip?: number;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     *
     * Filter by unique combinations of Notifications.
     */
    distinct?: NotificationScalarFieldEnum | NotificationScalarFieldEnum[];
  };

  /**
   * Notification findFirstOrThrow
   */
  export type NotificationFindFirstOrThrowArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null;
    /**
     * Omit specific fields from the Notification
     */
    omit?: NotificationOmit<ExtArgs> | null;
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationInclude<ExtArgs> | null;
    /**
     * Filter, which Notification to fetch.
     */
    where?: NotificationWhereInput;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     *
     * Determine the order of Notifications to fetch.
     */
    orderBy?:
      | NotificationOrderByWithRelationInput
      | NotificationOrderByWithRelationInput[];
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     *
     * Sets the position for searching for Notifications.
     */
    cursor?: NotificationWhereUniqueInput;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     *
     * Take `±n` Notifications from the position of the cursor.
     */
    take?: number;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     *
     * Skip the first `n` Notifications.
     */
    skip?: number;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     *
     * Filter by unique combinations of Notifications.
     */
    distinct?: NotificationScalarFieldEnum | NotificationScalarFieldEnum[];
  };

  /**
   * Notification findMany
   */
  export type NotificationFindManyArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null;
    /**
     * Omit specific fields from the Notification
     */
    omit?: NotificationOmit<ExtArgs> | null;
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationInclude<ExtArgs> | null;
    /**
     * Filter, which Notifications to fetch.
     */
    where?: NotificationWhereInput;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     *
     * Determine the order of Notifications to fetch.
     */
    orderBy?:
      | NotificationOrderByWithRelationInput
      | NotificationOrderByWithRelationInput[];
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     *
     * Sets the position for listing Notifications.
     */
    cursor?: NotificationWhereUniqueInput;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     *
     * Take `±n` Notifications from the position of the cursor.
     */
    take?: number;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     *
     * Skip the first `n` Notifications.
     */
    skip?: number;
    distinct?: NotificationScalarFieldEnum | NotificationScalarFieldEnum[];
  };

  /**
   * Notification create
   */
  export type NotificationCreateArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null;
    /**
     * Omit specific fields from the Notification
     */
    omit?: NotificationOmit<ExtArgs> | null;
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationInclude<ExtArgs> | null;
    /**
     * The data needed to create a Notification.
     */
    data: XOR<NotificationCreateInput, NotificationUncheckedCreateInput>;
  };

  /**
   * Notification createMany
   */
  export type NotificationCreateManyArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * The data used to create many Notifications.
     */
    data: NotificationCreateManyInput | NotificationCreateManyInput[];
    skipDuplicates?: boolean;
  };

  /**
   * Notification createManyAndReturn
   */
  export type NotificationCreateManyAndReturnArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelectCreateManyAndReturn<ExtArgs> | null;
    /**
     * Omit specific fields from the Notification
     */
    omit?: NotificationOmit<ExtArgs> | null;
    /**
     * The data used to create many Notifications.
     */
    data: NotificationCreateManyInput | NotificationCreateManyInput[];
    skipDuplicates?: boolean;
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationIncludeCreateManyAndReturn<ExtArgs> | null;
  };

  /**
   * Notification update
   */
  export type NotificationUpdateArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null;
    /**
     * Omit specific fields from the Notification
     */
    omit?: NotificationOmit<ExtArgs> | null;
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationInclude<ExtArgs> | null;
    /**
     * The data needed to update a Notification.
     */
    data: XOR<NotificationUpdateInput, NotificationUncheckedUpdateInput>;
    /**
     * Choose, which Notification to update.
     */
    where: NotificationWhereUniqueInput;
  };

  /**
   * Notification updateMany
   */
  export type NotificationUpdateManyArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * The data used to update Notifications.
     */
    data: XOR<
      NotificationUpdateManyMutationInput,
      NotificationUncheckedUpdateManyInput
    >;
    /**
     * Filter which Notifications to update
     */
    where?: NotificationWhereInput;
    /**
     * Limit how many Notifications to update.
     */
    limit?: number;
  };

  /**
   * Notification updateManyAndReturn
   */
  export type NotificationUpdateManyAndReturnArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelectUpdateManyAndReturn<ExtArgs> | null;
    /**
     * Omit specific fields from the Notification
     */
    omit?: NotificationOmit<ExtArgs> | null;
    /**
     * The data used to update Notifications.
     */
    data: XOR<
      NotificationUpdateManyMutationInput,
      NotificationUncheckedUpdateManyInput
    >;
    /**
     * Filter which Notifications to update
     */
    where?: NotificationWhereInput;
    /**
     * Limit how many Notifications to update.
     */
    limit?: number;
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationIncludeUpdateManyAndReturn<ExtArgs> | null;
  };

  /**
   * Notification upsert
   */
  export type NotificationUpsertArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null;
    /**
     * Omit specific fields from the Notification
     */
    omit?: NotificationOmit<ExtArgs> | null;
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationInclude<ExtArgs> | null;
    /**
     * The filter to search for the Notification to update in case it exists.
     */
    where: NotificationWhereUniqueInput;
    /**
     * In case the Notification found by the `where` argument doesn't exist, create a new Notification with this data.
     */
    create: XOR<NotificationCreateInput, NotificationUncheckedCreateInput>;
    /**
     * In case the Notification was found with the provided `where` argument, update it with this data.
     */
    update: XOR<NotificationUpdateInput, NotificationUncheckedUpdateInput>;
  };

  /**
   * Notification delete
   */
  export type NotificationDeleteArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null;
    /**
     * Omit specific fields from the Notification
     */
    omit?: NotificationOmit<ExtArgs> | null;
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationInclude<ExtArgs> | null;
    /**
     * Filter which Notification to delete.
     */
    where: NotificationWhereUniqueInput;
  };

  /**
   * Notification deleteMany
   */
  export type NotificationDeleteManyArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * Filter which Notifications to delete
     */
    where?: NotificationWhereInput;
    /**
     * Limit how many Notifications to delete.
     */
    limit?: number;
  };

  /**
   * Notification without action
   */
  export type NotificationDefaultArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null;
    /**
     * Omit specific fields from the Notification
     */
    omit?: NotificationOmit<ExtArgs> | null;
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationInclude<ExtArgs> | null;
  };

  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: "ReadUncommitted";
    ReadCommitted: "ReadCommitted";
    RepeatableRead: "RepeatableRead";
    Serializable: "Serializable";
  };

  export type TransactionIsolationLevel =
    (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel];

  export const UserScalarFieldEnum: {
    id: "id";
    email: "email";
    name: "name";
    role: "role";
    createdAt: "createdAt";
    updatedAt: "updatedAt";
  };

  export type UserScalarFieldEnum =
    (typeof UserScalarFieldEnum)[keyof typeof UserScalarFieldEnum];

  export const RoomScalarFieldEnum: {
    id: "id";
    name: "name";
    ownerId: "ownerId";
    createdAt: "createdAt";
    whiteboardData: "whiteboardData";
  };

  export type RoomScalarFieldEnum =
    (typeof RoomScalarFieldEnum)[keyof typeof RoomScalarFieldEnum];

  export const ChatMessageScalarFieldEnum: {
    id: "id";
    roomName: "roomName";
    userId: "userId";
    message: "message";
    createdAt: "createdAt";
  };

  export type ChatMessageScalarFieldEnum =
    (typeof ChatMessageScalarFieldEnum)[keyof typeof ChatMessageScalarFieldEnum];

  export const WorkspaceScalarFieldEnum: {
    id: "id";
    name: "name";
    createdAt: "createdAt";
    updatedAt: "updatedAt";
  };

  export type WorkspaceScalarFieldEnum =
    (typeof WorkspaceScalarFieldEnum)[keyof typeof WorkspaceScalarFieldEnum];

  export const WorkspaceMemberScalarFieldEnum: {
    id: "id";
    workspaceId: "workspaceId";
    userId: "userId";
    role: "role";
    joinedAt: "joinedAt";
  };

  export type WorkspaceMemberScalarFieldEnum =
    (typeof WorkspaceMemberScalarFieldEnum)[keyof typeof WorkspaceMemberScalarFieldEnum];

  export const ProjectScalarFieldEnum: {
    id: "id";
    name: "name";
    description: "description";
    key: "key";
    status: "status";
    progress: "progress";
    createdAt: "createdAt";
    updatedAt: "updatedAt";
    workspaceId: "workspaceId";
  };

  export type ProjectScalarFieldEnum =
    (typeof ProjectScalarFieldEnum)[keyof typeof ProjectScalarFieldEnum];

  export const TaskScalarFieldEnum: {
    id: "id";
    title: "title";
    description: "description";
    type: "type";
    status: "status";
    priority: "priority";
    storyPoints: "storyPoints";
    dueDate: "dueDate";
    createdAt: "createdAt";
    updatedAt: "updatedAt";
    projectId: "projectId";
    sprintId: "sprintId";
    assigneeId: "assigneeId";
    creatorId: "creatorId";
    parentId: "parentId";
  };

  export type TaskScalarFieldEnum =
    (typeof TaskScalarFieldEnum)[keyof typeof TaskScalarFieldEnum];

  export const TaskTagScalarFieldEnum: {
    id: "id";
    name: "name";
    color: "color";
    taskId: "taskId";
  };

  export type TaskTagScalarFieldEnum =
    (typeof TaskTagScalarFieldEnum)[keyof typeof TaskTagScalarFieldEnum];

  export const SprintScalarFieldEnum: {
    id: "id";
    name: "name";
    goal: "goal";
    status: "status";
    startDate: "startDate";
    endDate: "endDate";
    progress: "progress";
    createdAt: "createdAt";
    updatedAt: "updatedAt";
    projectId: "projectId";
    ownerId: "ownerId";
  };

  export type SprintScalarFieldEnum =
    (typeof SprintScalarFieldEnum)[keyof typeof SprintScalarFieldEnum];

  export const MilestoneScalarFieldEnum: {
    id: "id";
    title: "title";
    description: "description";
    status: "status";
    progress: "progress";
    startDate: "startDate";
    endDate: "endDate";
    createdAt: "createdAt";
    updatedAt: "updatedAt";
    projectId: "projectId";
    ownerId: "ownerId";
  };

  export type MilestoneScalarFieldEnum =
    (typeof MilestoneScalarFieldEnum)[keyof typeof MilestoneScalarFieldEnum];

  export const MilestoneDependencyScalarFieldEnum: {
    id: "id";
    milestoneId: "milestoneId";
    dependsOnId: "dependsOnId";
  };

  export type MilestoneDependencyScalarFieldEnum =
    (typeof MilestoneDependencyScalarFieldEnum)[keyof typeof MilestoneDependencyScalarFieldEnum];

  export const ActivityScalarFieldEnum: {
    id: "id";
    type: "type";
    content: "content";
    createdAt: "createdAt";
    userId: "userId";
    taskId: "taskId";
  };

  export type ActivityScalarFieldEnum =
    (typeof ActivityScalarFieldEnum)[keyof typeof ActivityScalarFieldEnum];

  export const NotificationScalarFieldEnum: {
    id: "id";
    title: "title";
    content: "content";
    isRead: "isRead";
    createdAt: "createdAt";
    userId: "userId";
  };

  export type NotificationScalarFieldEnum =
    (typeof NotificationScalarFieldEnum)[keyof typeof NotificationScalarFieldEnum];

  export const SortOrder: {
    asc: "asc";
    desc: "desc";
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder];

  export const NullableJsonNullValueInput: {
    DbNull: typeof DbNull;
    JsonNull: typeof JsonNull;
  };

  export type NullableJsonNullValueInput =
    (typeof NullableJsonNullValueInput)[keyof typeof NullableJsonNullValueInput];

  export const QueryMode: {
    default: "default";
    insensitive: "insensitive";
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode];

  export const NullsOrder: {
    first: "first";
    last: "last";
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder];

  export const JsonNullValueFilter: {
    DbNull: typeof DbNull;
    JsonNull: typeof JsonNull;
    AnyNull: typeof AnyNull;
  };

  export type JsonNullValueFilter =
    (typeof JsonNullValueFilter)[keyof typeof JsonNullValueFilter];

  /**
   * Field references
   */

  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<
    $PrismaModel,
    "String"
  >;

  /**
   * Reference to a field of type 'String[]'
   */
  export type ListStringFieldRefInput<$PrismaModel> = FieldRefInputType<
    $PrismaModel,
    "String[]"
  >;

  /**
   * Reference to a field of type 'UserRole'
   */
  export type EnumUserRoleFieldRefInput<$PrismaModel> = FieldRefInputType<
    $PrismaModel,
    "UserRole"
  >;

  /**
   * Reference to a field of type 'UserRole[]'
   */
  export type ListEnumUserRoleFieldRefInput<$PrismaModel> = FieldRefInputType<
    $PrismaModel,
    "UserRole[]"
  >;

  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<
    $PrismaModel,
    "DateTime"
  >;

  /**
   * Reference to a field of type 'DateTime[]'
   */
  export type ListDateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<
    $PrismaModel,
    "DateTime[]"
  >;

  /**
   * Reference to a field of type 'Json'
   */
  export type JsonFieldRefInput<$PrismaModel> = FieldRefInputType<
    $PrismaModel,
    "Json"
  >;

  /**
   * Reference to a field of type 'QueryMode'
   */
  export type EnumQueryModeFieldRefInput<$PrismaModel> = FieldRefInputType<
    $PrismaModel,
    "QueryMode"
  >;

  /**
   * Reference to a field of type 'ProjectStatus'
   */
  export type EnumProjectStatusFieldRefInput<$PrismaModel> = FieldRefInputType<
    $PrismaModel,
    "ProjectStatus"
  >;

  /**
   * Reference to a field of type 'ProjectStatus[]'
   */
  export type ListEnumProjectStatusFieldRefInput<$PrismaModel> =
    FieldRefInputType<$PrismaModel, "ProjectStatus[]">;

  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<
    $PrismaModel,
    "Int"
  >;

  /**
   * Reference to a field of type 'Int[]'
   */
  export type ListIntFieldRefInput<$PrismaModel> = FieldRefInputType<
    $PrismaModel,
    "Int[]"
  >;

  /**
   * Reference to a field of type 'TaskType'
   */
  export type EnumTaskTypeFieldRefInput<$PrismaModel> = FieldRefInputType<
    $PrismaModel,
    "TaskType"
  >;

  /**
   * Reference to a field of type 'TaskType[]'
   */
  export type ListEnumTaskTypeFieldRefInput<$PrismaModel> = FieldRefInputType<
    $PrismaModel,
    "TaskType[]"
  >;

  /**
   * Reference to a field of type 'TaskStatus'
   */
  export type EnumTaskStatusFieldRefInput<$PrismaModel> = FieldRefInputType<
    $PrismaModel,
    "TaskStatus"
  >;

  /**
   * Reference to a field of type 'TaskStatus[]'
   */
  export type ListEnumTaskStatusFieldRefInput<$PrismaModel> = FieldRefInputType<
    $PrismaModel,
    "TaskStatus[]"
  >;

  /**
   * Reference to a field of type 'Priority'
   */
  export type EnumPriorityFieldRefInput<$PrismaModel> = FieldRefInputType<
    $PrismaModel,
    "Priority"
  >;

  /**
   * Reference to a field of type 'Priority[]'
   */
  export type ListEnumPriorityFieldRefInput<$PrismaModel> = FieldRefInputType<
    $PrismaModel,
    "Priority[]"
  >;

  /**
   * Reference to a field of type 'SprintStatus'
   */
  export type EnumSprintStatusFieldRefInput<$PrismaModel> = FieldRefInputType<
    $PrismaModel,
    "SprintStatus"
  >;

  /**
   * Reference to a field of type 'SprintStatus[]'
   */
  export type ListEnumSprintStatusFieldRefInput<$PrismaModel> =
    FieldRefInputType<$PrismaModel, "SprintStatus[]">;

  /**
   * Reference to a field of type 'MilestoneStatus'
   */
  export type EnumMilestoneStatusFieldRefInput<$PrismaModel> =
    FieldRefInputType<$PrismaModel, "MilestoneStatus">;

  /**
   * Reference to a field of type 'MilestoneStatus[]'
   */
  export type ListEnumMilestoneStatusFieldRefInput<$PrismaModel> =
    FieldRefInputType<$PrismaModel, "MilestoneStatus[]">;

  /**
   * Reference to a field of type 'ActivityType'
   */
  export type EnumActivityTypeFieldRefInput<$PrismaModel> = FieldRefInputType<
    $PrismaModel,
    "ActivityType"
  >;

  /**
   * Reference to a field of type 'ActivityType[]'
   */
  export type ListEnumActivityTypeFieldRefInput<$PrismaModel> =
    FieldRefInputType<$PrismaModel, "ActivityType[]">;

  /**
   * Reference to a field of type 'Boolean'
   */
  export type BooleanFieldRefInput<$PrismaModel> = FieldRefInputType<
    $PrismaModel,
    "Boolean"
  >;

  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<
    $PrismaModel,
    "Float"
  >;

  /**
   * Reference to a field of type 'Float[]'
   */
  export type ListFloatFieldRefInput<$PrismaModel> = FieldRefInputType<
    $PrismaModel,
    "Float[]"
  >;

  /**
   * Deep Input Types
   */

  export type UserWhereInput = {
    AND?: UserWhereInput | UserWhereInput[];
    OR?: UserWhereInput[];
    NOT?: UserWhereInput | UserWhereInput[];
    id?: StringFilter<"User"> | string;
    email?: StringNullableFilter<"User"> | string | null;
    name?: StringNullableFilter<"User"> | string | null;
    role?: EnumUserRoleFilter<"User"> | $Enums.UserRole;
    createdAt?: DateTimeFilter<"User"> | Date | string;
    updatedAt?: DateTimeFilter<"User"> | Date | string;
    assignedTasks?: TaskListRelationFilter;
    createdTasks?: TaskListRelationFilter;
    ownedMilestones?: MilestoneListRelationFilter;
    ownedSprints?: SprintListRelationFilter;
    workspaces?: WorkspaceMemberListRelationFilter;
    notifications?: NotificationListRelationFilter;
    activities?: ActivityListRelationFilter;
    rooms?: RoomListRelationFilter;
    messages?: ChatMessageListRelationFilter;
  };

  export type UserOrderByWithRelationInput = {
    id?: SortOrder;
    email?: SortOrderInput | SortOrder;
    name?: SortOrderInput | SortOrder;
    role?: SortOrder;
    createdAt?: SortOrder;
    updatedAt?: SortOrder;
    assignedTasks?: TaskOrderByRelationAggregateInput;
    createdTasks?: TaskOrderByRelationAggregateInput;
    ownedMilestones?: MilestoneOrderByRelationAggregateInput;
    ownedSprints?: SprintOrderByRelationAggregateInput;
    workspaces?: WorkspaceMemberOrderByRelationAggregateInput;
    notifications?: NotificationOrderByRelationAggregateInput;
    activities?: ActivityOrderByRelationAggregateInput;
    rooms?: RoomOrderByRelationAggregateInput;
    messages?: ChatMessageOrderByRelationAggregateInput;
  };

  export type UserWhereUniqueInput = Prisma.AtLeast<
    {
      id?: string;
      email?: string;
      AND?: UserWhereInput | UserWhereInput[];
      OR?: UserWhereInput[];
      NOT?: UserWhereInput | UserWhereInput[];
      name?: StringNullableFilter<"User"> | string | null;
      role?: EnumUserRoleFilter<"User"> | $Enums.UserRole;
      createdAt?: DateTimeFilter<"User"> | Date | string;
      updatedAt?: DateTimeFilter<"User"> | Date | string;
      assignedTasks?: TaskListRelationFilter;
      createdTasks?: TaskListRelationFilter;
      ownedMilestones?: MilestoneListRelationFilter;
      ownedSprints?: SprintListRelationFilter;
      workspaces?: WorkspaceMemberListRelationFilter;
      notifications?: NotificationListRelationFilter;
      activities?: ActivityListRelationFilter;
      rooms?: RoomListRelationFilter;
      messages?: ChatMessageListRelationFilter;
    },
    "id" | "email"
  >;

  export type UserOrderByWithAggregationInput = {
    id?: SortOrder;
    email?: SortOrderInput | SortOrder;
    name?: SortOrderInput | SortOrder;
    role?: SortOrder;
    createdAt?: SortOrder;
    updatedAt?: SortOrder;
    _count?: UserCountOrderByAggregateInput;
    _max?: UserMaxOrderByAggregateInput;
    _min?: UserMinOrderByAggregateInput;
  };

  export type UserScalarWhereWithAggregatesInput = {
    AND?:
      | UserScalarWhereWithAggregatesInput
      | UserScalarWhereWithAggregatesInput[];
    OR?: UserScalarWhereWithAggregatesInput[];
    NOT?:
      | UserScalarWhereWithAggregatesInput
      | UserScalarWhereWithAggregatesInput[];
    id?: StringWithAggregatesFilter<"User"> | string;
    email?: StringNullableWithAggregatesFilter<"User"> | string | null;
    name?: StringNullableWithAggregatesFilter<"User"> | string | null;
    role?: EnumUserRoleWithAggregatesFilter<"User"> | $Enums.UserRole;
    createdAt?: DateTimeWithAggregatesFilter<"User"> | Date | string;
    updatedAt?: DateTimeWithAggregatesFilter<"User"> | Date | string;
  };

  export type RoomWhereInput = {
    AND?: RoomWhereInput | RoomWhereInput[];
    OR?: RoomWhereInput[];
    NOT?: RoomWhereInput | RoomWhereInput[];
    id?: StringFilter<"Room"> | string;
    name?: StringFilter<"Room"> | string;
    ownerId?: StringFilter<"Room"> | string;
    createdAt?: DateTimeFilter<"Room"> | Date | string;
    whiteboardData?: JsonNullableFilter<"Room">;
    owner?: XOR<UserScalarRelationFilter, UserWhereInput>;
    chatMessages?: ChatMessageListRelationFilter;
  };

  export type RoomOrderByWithRelationInput = {
    id?: SortOrder;
    name?: SortOrder;
    ownerId?: SortOrder;
    createdAt?: SortOrder;
    whiteboardData?: SortOrderInput | SortOrder;
    owner?: UserOrderByWithRelationInput;
    chatMessages?: ChatMessageOrderByRelationAggregateInput;
  };

  export type RoomWhereUniqueInput = Prisma.AtLeast<
    {
      id?: string;
      name?: string;
      AND?: RoomWhereInput | RoomWhereInput[];
      OR?: RoomWhereInput[];
      NOT?: RoomWhereInput | RoomWhereInput[];
      ownerId?: StringFilter<"Room"> | string;
      createdAt?: DateTimeFilter<"Room"> | Date | string;
      whiteboardData?: JsonNullableFilter<"Room">;
      owner?: XOR<UserScalarRelationFilter, UserWhereInput>;
      chatMessages?: ChatMessageListRelationFilter;
    },
    "id" | "name"
  >;

  export type RoomOrderByWithAggregationInput = {
    id?: SortOrder;
    name?: SortOrder;
    ownerId?: SortOrder;
    createdAt?: SortOrder;
    whiteboardData?: SortOrderInput | SortOrder;
    _count?: RoomCountOrderByAggregateInput;
    _max?: RoomMaxOrderByAggregateInput;
    _min?: RoomMinOrderByAggregateInput;
  };

  export type RoomScalarWhereWithAggregatesInput = {
    AND?:
      | RoomScalarWhereWithAggregatesInput
      | RoomScalarWhereWithAggregatesInput[];
    OR?: RoomScalarWhereWithAggregatesInput[];
    NOT?:
      | RoomScalarWhereWithAggregatesInput
      | RoomScalarWhereWithAggregatesInput[];
    id?: StringWithAggregatesFilter<"Room"> | string;
    name?: StringWithAggregatesFilter<"Room"> | string;
    ownerId?: StringWithAggregatesFilter<"Room"> | string;
    createdAt?: DateTimeWithAggregatesFilter<"Room"> | Date | string;
    whiteboardData?: JsonNullableWithAggregatesFilter<"Room">;
  };

  export type ChatMessageWhereInput = {
    AND?: ChatMessageWhereInput | ChatMessageWhereInput[];
    OR?: ChatMessageWhereInput[];
    NOT?: ChatMessageWhereInput | ChatMessageWhereInput[];
    id?: StringFilter<"ChatMessage"> | string;
    roomName?: StringFilter<"ChatMessage"> | string;
    userId?: StringFilter<"ChatMessage"> | string;
    message?: StringFilter<"ChatMessage"> | string;
    createdAt?: DateTimeFilter<"ChatMessage"> | Date | string;
    room?: XOR<RoomScalarRelationFilter, RoomWhereInput>;
    user?: XOR<UserScalarRelationFilter, UserWhereInput>;
  };

  export type ChatMessageOrderByWithRelationInput = {
    id?: SortOrder;
    roomName?: SortOrder;
    userId?: SortOrder;
    message?: SortOrder;
    createdAt?: SortOrder;
    room?: RoomOrderByWithRelationInput;
    user?: UserOrderByWithRelationInput;
  };

  export type ChatMessageWhereUniqueInput = Prisma.AtLeast<
    {
      id?: string;
      AND?: ChatMessageWhereInput | ChatMessageWhereInput[];
      OR?: ChatMessageWhereInput[];
      NOT?: ChatMessageWhereInput | ChatMessageWhereInput[];
      roomName?: StringFilter<"ChatMessage"> | string;
      userId?: StringFilter<"ChatMessage"> | string;
      message?: StringFilter<"ChatMessage"> | string;
      createdAt?: DateTimeFilter<"ChatMessage"> | Date | string;
      room?: XOR<RoomScalarRelationFilter, RoomWhereInput>;
      user?: XOR<UserScalarRelationFilter, UserWhereInput>;
    },
    "id"
  >;

  export type ChatMessageOrderByWithAggregationInput = {
    id?: SortOrder;
    roomName?: SortOrder;
    userId?: SortOrder;
    message?: SortOrder;
    createdAt?: SortOrder;
    _count?: ChatMessageCountOrderByAggregateInput;
    _max?: ChatMessageMaxOrderByAggregateInput;
    _min?: ChatMessageMinOrderByAggregateInput;
  };

  export type ChatMessageScalarWhereWithAggregatesInput = {
    AND?:
      | ChatMessageScalarWhereWithAggregatesInput
      | ChatMessageScalarWhereWithAggregatesInput[];
    OR?: ChatMessageScalarWhereWithAggregatesInput[];
    NOT?:
      | ChatMessageScalarWhereWithAggregatesInput
      | ChatMessageScalarWhereWithAggregatesInput[];
    id?: StringWithAggregatesFilter<"ChatMessage"> | string;
    roomName?: StringWithAggregatesFilter<"ChatMessage"> | string;
    userId?: StringWithAggregatesFilter<"ChatMessage"> | string;
    message?: StringWithAggregatesFilter<"ChatMessage"> | string;
    createdAt?: DateTimeWithAggregatesFilter<"ChatMessage"> | Date | string;
  };

  export type WorkspaceWhereInput = {
    AND?: WorkspaceWhereInput | WorkspaceWhereInput[];
    OR?: WorkspaceWhereInput[];
    NOT?: WorkspaceWhereInput | WorkspaceWhereInput[];
    id?: StringFilter<"Workspace"> | string;
    name?: StringFilter<"Workspace"> | string;
    createdAt?: DateTimeFilter<"Workspace"> | Date | string;
    updatedAt?: DateTimeFilter<"Workspace"> | Date | string;
    members?: WorkspaceMemberListRelationFilter;
    projects?: ProjectListRelationFilter;
  };

  export type WorkspaceOrderByWithRelationInput = {
    id?: SortOrder;
    name?: SortOrder;
    createdAt?: SortOrder;
    updatedAt?: SortOrder;
    members?: WorkspaceMemberOrderByRelationAggregateInput;
    projects?: ProjectOrderByRelationAggregateInput;
  };

  export type WorkspaceWhereUniqueInput = Prisma.AtLeast<
    {
      id?: string;
      name?: string;
      AND?: WorkspaceWhereInput | WorkspaceWhereInput[];
      OR?: WorkspaceWhereInput[];
      NOT?: WorkspaceWhereInput | WorkspaceWhereInput[];
      createdAt?: DateTimeFilter<"Workspace"> | Date | string;
      updatedAt?: DateTimeFilter<"Workspace"> | Date | string;
      members?: WorkspaceMemberListRelationFilter;
      projects?: ProjectListRelationFilter;
    },
    "id" | "name"
  >;

  export type WorkspaceOrderByWithAggregationInput = {
    id?: SortOrder;
    name?: SortOrder;
    createdAt?: SortOrder;
    updatedAt?: SortOrder;
    _count?: WorkspaceCountOrderByAggregateInput;
    _max?: WorkspaceMaxOrderByAggregateInput;
    _min?: WorkspaceMinOrderByAggregateInput;
  };

  export type WorkspaceScalarWhereWithAggregatesInput = {
    AND?:
      | WorkspaceScalarWhereWithAggregatesInput
      | WorkspaceScalarWhereWithAggregatesInput[];
    OR?: WorkspaceScalarWhereWithAggregatesInput[];
    NOT?:
      | WorkspaceScalarWhereWithAggregatesInput
      | WorkspaceScalarWhereWithAggregatesInput[];
    id?: StringWithAggregatesFilter<"Workspace"> | string;
    name?: StringWithAggregatesFilter<"Workspace"> | string;
    createdAt?: DateTimeWithAggregatesFilter<"Workspace"> | Date | string;
    updatedAt?: DateTimeWithAggregatesFilter<"Workspace"> | Date | string;
  };

  export type WorkspaceMemberWhereInput = {
    AND?: WorkspaceMemberWhereInput | WorkspaceMemberWhereInput[];
    OR?: WorkspaceMemberWhereInput[];
    NOT?: WorkspaceMemberWhereInput | WorkspaceMemberWhereInput[];
    id?: StringFilter<"WorkspaceMember"> | string;
    workspaceId?: StringFilter<"WorkspaceMember"> | string;
    userId?: StringFilter<"WorkspaceMember"> | string;
    role?: EnumUserRoleFilter<"WorkspaceMember"> | $Enums.UserRole;
    joinedAt?: DateTimeFilter<"WorkspaceMember"> | Date | string;
    workspace?: XOR<WorkspaceScalarRelationFilter, WorkspaceWhereInput>;
    user?: XOR<UserScalarRelationFilter, UserWhereInput>;
  };

  export type WorkspaceMemberOrderByWithRelationInput = {
    id?: SortOrder;
    workspaceId?: SortOrder;
    userId?: SortOrder;
    role?: SortOrder;
    joinedAt?: SortOrder;
    workspace?: WorkspaceOrderByWithRelationInput;
    user?: UserOrderByWithRelationInput;
  };

  export type WorkspaceMemberWhereUniqueInput = Prisma.AtLeast<
    {
      id?: string;
      workspaceId_userId?: WorkspaceMemberWorkspaceIdUserIdCompoundUniqueInput;
      AND?: WorkspaceMemberWhereInput | WorkspaceMemberWhereInput[];
      OR?: WorkspaceMemberWhereInput[];
      NOT?: WorkspaceMemberWhereInput | WorkspaceMemberWhereInput[];
      workspaceId?: StringFilter<"WorkspaceMember"> | string;
      userId?: StringFilter<"WorkspaceMember"> | string;
      role?: EnumUserRoleFilter<"WorkspaceMember"> | $Enums.UserRole;
      joinedAt?: DateTimeFilter<"WorkspaceMember"> | Date | string;
      workspace?: XOR<WorkspaceScalarRelationFilter, WorkspaceWhereInput>;
      user?: XOR<UserScalarRelationFilter, UserWhereInput>;
    },
    "id" | "workspaceId_userId"
  >;

  export type WorkspaceMemberOrderByWithAggregationInput = {
    id?: SortOrder;
    workspaceId?: SortOrder;
    userId?: SortOrder;
    role?: SortOrder;
    joinedAt?: SortOrder;
    _count?: WorkspaceMemberCountOrderByAggregateInput;
    _max?: WorkspaceMemberMaxOrderByAggregateInput;
    _min?: WorkspaceMemberMinOrderByAggregateInput;
  };

  export type WorkspaceMemberScalarWhereWithAggregatesInput = {
    AND?:
      | WorkspaceMemberScalarWhereWithAggregatesInput
      | WorkspaceMemberScalarWhereWithAggregatesInput[];
    OR?: WorkspaceMemberScalarWhereWithAggregatesInput[];
    NOT?:
      | WorkspaceMemberScalarWhereWithAggregatesInput
      | WorkspaceMemberScalarWhereWithAggregatesInput[];
    id?: StringWithAggregatesFilter<"WorkspaceMember"> | string;
    workspaceId?: StringWithAggregatesFilter<"WorkspaceMember"> | string;
    userId?: StringWithAggregatesFilter<"WorkspaceMember"> | string;
    role?:
      | EnumUserRoleWithAggregatesFilter<"WorkspaceMember">
      | $Enums.UserRole;
    joinedAt?: DateTimeWithAggregatesFilter<"WorkspaceMember"> | Date | string;
  };

  export type ProjectWhereInput = {
    AND?: ProjectWhereInput | ProjectWhereInput[];
    OR?: ProjectWhereInput[];
    NOT?: ProjectWhereInput | ProjectWhereInput[];
    id?: StringFilter<"Project"> | string;
    name?: StringFilter<"Project"> | string;
    description?: StringNullableFilter<"Project"> | string | null;
    key?: StringFilter<"Project"> | string;
    status?: EnumProjectStatusFilter<"Project"> | $Enums.ProjectStatus;
    progress?: IntFilter<"Project"> | number;
    createdAt?: DateTimeFilter<"Project"> | Date | string;
    updatedAt?: DateTimeFilter<"Project"> | Date | string;
    workspaceId?: StringFilter<"Project"> | string;
    workspace?: XOR<WorkspaceScalarRelationFilter, WorkspaceWhereInput>;
    tasks?: TaskListRelationFilter;
    sprints?: SprintListRelationFilter;
    milestones?: MilestoneListRelationFilter;
  };

  export type ProjectOrderByWithRelationInput = {
    id?: SortOrder;
    name?: SortOrder;
    description?: SortOrderInput | SortOrder;
    key?: SortOrder;
    status?: SortOrder;
    progress?: SortOrder;
    createdAt?: SortOrder;
    updatedAt?: SortOrder;
    workspaceId?: SortOrder;
    workspace?: WorkspaceOrderByWithRelationInput;
    tasks?: TaskOrderByRelationAggregateInput;
    sprints?: SprintOrderByRelationAggregateInput;
    milestones?: MilestoneOrderByRelationAggregateInput;
  };

  export type ProjectWhereUniqueInput = Prisma.AtLeast<
    {
      id?: string;
      AND?: ProjectWhereInput | ProjectWhereInput[];
      OR?: ProjectWhereInput[];
      NOT?: ProjectWhereInput | ProjectWhereInput[];
      name?: StringFilter<"Project"> | string;
      description?: StringNullableFilter<"Project"> | string | null;
      key?: StringFilter<"Project"> | string;
      status?: EnumProjectStatusFilter<"Project"> | $Enums.ProjectStatus;
      progress?: IntFilter<"Project"> | number;
      createdAt?: DateTimeFilter<"Project"> | Date | string;
      updatedAt?: DateTimeFilter<"Project"> | Date | string;
      workspaceId?: StringFilter<"Project"> | string;
      workspace?: XOR<WorkspaceScalarRelationFilter, WorkspaceWhereInput>;
      tasks?: TaskListRelationFilter;
      sprints?: SprintListRelationFilter;
      milestones?: MilestoneListRelationFilter;
    },
    "id"
  >;

  export type ProjectOrderByWithAggregationInput = {
    id?: SortOrder;
    name?: SortOrder;
    description?: SortOrderInput | SortOrder;
    key?: SortOrder;
    status?: SortOrder;
    progress?: SortOrder;
    createdAt?: SortOrder;
    updatedAt?: SortOrder;
    workspaceId?: SortOrder;
    _count?: ProjectCountOrderByAggregateInput;
    _avg?: ProjectAvgOrderByAggregateInput;
    _max?: ProjectMaxOrderByAggregateInput;
    _min?: ProjectMinOrderByAggregateInput;
    _sum?: ProjectSumOrderByAggregateInput;
  };

  export type ProjectScalarWhereWithAggregatesInput = {
    AND?:
      | ProjectScalarWhereWithAggregatesInput
      | ProjectScalarWhereWithAggregatesInput[];
    OR?: ProjectScalarWhereWithAggregatesInput[];
    NOT?:
      | ProjectScalarWhereWithAggregatesInput
      | ProjectScalarWhereWithAggregatesInput[];
    id?: StringWithAggregatesFilter<"Project"> | string;
    name?: StringWithAggregatesFilter<"Project"> | string;
    description?: StringNullableWithAggregatesFilter<"Project"> | string | null;
    key?: StringWithAggregatesFilter<"Project"> | string;
    status?:
      | EnumProjectStatusWithAggregatesFilter<"Project">
      | $Enums.ProjectStatus;
    progress?: IntWithAggregatesFilter<"Project"> | number;
    createdAt?: DateTimeWithAggregatesFilter<"Project"> | Date | string;
    updatedAt?: DateTimeWithAggregatesFilter<"Project"> | Date | string;
    workspaceId?: StringWithAggregatesFilter<"Project"> | string;
  };

  export type TaskWhereInput = {
    AND?: TaskWhereInput | TaskWhereInput[];
    OR?: TaskWhereInput[];
    NOT?: TaskWhereInput | TaskWhereInput[];
    id?: StringFilter<"Task"> | string;
    title?: StringFilter<"Task"> | string;
    description?: StringNullableFilter<"Task"> | string | null;
    type?: EnumTaskTypeFilter<"Task"> | $Enums.TaskType;
    status?: EnumTaskStatusFilter<"Task"> | $Enums.TaskStatus;
    priority?: EnumPriorityFilter<"Task"> | $Enums.Priority;
    storyPoints?: IntNullableFilter<"Task"> | number | null;
    dueDate?: DateTimeNullableFilter<"Task"> | Date | string | null;
    createdAt?: DateTimeFilter<"Task"> | Date | string;
    updatedAt?: DateTimeFilter<"Task"> | Date | string;
    projectId?: StringFilter<"Task"> | string;
    sprintId?: StringNullableFilter<"Task"> | string | null;
    assigneeId?: StringNullableFilter<"Task"> | string | null;
    creatorId?: StringFilter<"Task"> | string;
    parentId?: StringNullableFilter<"Task"> | string | null;
    project?: XOR<ProjectScalarRelationFilter, ProjectWhereInput>;
    sprint?: XOR<SprintNullableScalarRelationFilter, SprintWhereInput> | null;
    assignee?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null;
    creator?: XOR<UserScalarRelationFilter, UserWhereInput>;
    tags?: TaskTagListRelationFilter;
    activities?: ActivityListRelationFilter;
  };

  export type TaskOrderByWithRelationInput = {
    id?: SortOrder;
    title?: SortOrder;
    description?: SortOrderInput | SortOrder;
    type?: SortOrder;
    status?: SortOrder;
    priority?: SortOrder;
    storyPoints?: SortOrderInput | SortOrder;
    dueDate?: SortOrderInput | SortOrder;
    createdAt?: SortOrder;
    updatedAt?: SortOrder;
    projectId?: SortOrder;
    sprintId?: SortOrderInput | SortOrder;
    assigneeId?: SortOrderInput | SortOrder;
    creatorId?: SortOrder;
    parentId?: SortOrderInput | SortOrder;
    project?: ProjectOrderByWithRelationInput;
    sprint?: SprintOrderByWithRelationInput;
    assignee?: UserOrderByWithRelationInput;
    creator?: UserOrderByWithRelationInput;
    tags?: TaskTagOrderByRelationAggregateInput;
    activities?: ActivityOrderByRelationAggregateInput;
  };

  export type TaskWhereUniqueInput = Prisma.AtLeast<
    {
      id?: string;
      AND?: TaskWhereInput | TaskWhereInput[];
      OR?: TaskWhereInput[];
      NOT?: TaskWhereInput | TaskWhereInput[];
      title?: StringFilter<"Task"> | string;
      description?: StringNullableFilter<"Task"> | string | null;
      type?: EnumTaskTypeFilter<"Task"> | $Enums.TaskType;
      status?: EnumTaskStatusFilter<"Task"> | $Enums.TaskStatus;
      priority?: EnumPriorityFilter<"Task"> | $Enums.Priority;
      storyPoints?: IntNullableFilter<"Task"> | number | null;
      dueDate?: DateTimeNullableFilter<"Task"> | Date | string | null;
      createdAt?: DateTimeFilter<"Task"> | Date | string;
      updatedAt?: DateTimeFilter<"Task"> | Date | string;
      projectId?: StringFilter<"Task"> | string;
      sprintId?: StringNullableFilter<"Task"> | string | null;
      assigneeId?: StringNullableFilter<"Task"> | string | null;
      creatorId?: StringFilter<"Task"> | string;
      parentId?: StringNullableFilter<"Task"> | string | null;
      project?: XOR<ProjectScalarRelationFilter, ProjectWhereInput>;
      sprint?: XOR<SprintNullableScalarRelationFilter, SprintWhereInput> | null;
      assignee?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null;
      creator?: XOR<UserScalarRelationFilter, UserWhereInput>;
      tags?: TaskTagListRelationFilter;
      activities?: ActivityListRelationFilter;
    },
    "id"
  >;

  export type TaskOrderByWithAggregationInput = {
    id?: SortOrder;
    title?: SortOrder;
    description?: SortOrderInput | SortOrder;
    type?: SortOrder;
    status?: SortOrder;
    priority?: SortOrder;
    storyPoints?: SortOrderInput | SortOrder;
    dueDate?: SortOrderInput | SortOrder;
    createdAt?: SortOrder;
    updatedAt?: SortOrder;
    projectId?: SortOrder;
    sprintId?: SortOrderInput | SortOrder;
    assigneeId?: SortOrderInput | SortOrder;
    creatorId?: SortOrder;
    parentId?: SortOrderInput | SortOrder;
    _count?: TaskCountOrderByAggregateInput;
    _avg?: TaskAvgOrderByAggregateInput;
    _max?: TaskMaxOrderByAggregateInput;
    _min?: TaskMinOrderByAggregateInput;
    _sum?: TaskSumOrderByAggregateInput;
  };

  export type TaskScalarWhereWithAggregatesInput = {
    AND?:
      | TaskScalarWhereWithAggregatesInput
      | TaskScalarWhereWithAggregatesInput[];
    OR?: TaskScalarWhereWithAggregatesInput[];
    NOT?:
      | TaskScalarWhereWithAggregatesInput
      | TaskScalarWhereWithAggregatesInput[];
    id?: StringWithAggregatesFilter<"Task"> | string;
    title?: StringWithAggregatesFilter<"Task"> | string;
    description?: StringNullableWithAggregatesFilter<"Task"> | string | null;
    type?: EnumTaskTypeWithAggregatesFilter<"Task"> | $Enums.TaskType;
    status?: EnumTaskStatusWithAggregatesFilter<"Task"> | $Enums.TaskStatus;
    priority?: EnumPriorityWithAggregatesFilter<"Task"> | $Enums.Priority;
    storyPoints?: IntNullableWithAggregatesFilter<"Task"> | number | null;
    dueDate?:
      | DateTimeNullableWithAggregatesFilter<"Task">
      | Date
      | string
      | null;
    createdAt?: DateTimeWithAggregatesFilter<"Task"> | Date | string;
    updatedAt?: DateTimeWithAggregatesFilter<"Task"> | Date | string;
    projectId?: StringWithAggregatesFilter<"Task"> | string;
    sprintId?: StringNullableWithAggregatesFilter<"Task"> | string | null;
    assigneeId?: StringNullableWithAggregatesFilter<"Task"> | string | null;
    creatorId?: StringWithAggregatesFilter<"Task"> | string;
    parentId?: StringNullableWithAggregatesFilter<"Task"> | string | null;
  };

  export type TaskTagWhereInput = {
    AND?: TaskTagWhereInput | TaskTagWhereInput[];
    OR?: TaskTagWhereInput[];
    NOT?: TaskTagWhereInput | TaskTagWhereInput[];
    id?: StringFilter<"TaskTag"> | string;
    name?: StringFilter<"TaskTag"> | string;
    color?: StringNullableFilter<"TaskTag"> | string | null;
    taskId?: StringFilter<"TaskTag"> | string;
    task?: XOR<TaskScalarRelationFilter, TaskWhereInput>;
  };

  export type TaskTagOrderByWithRelationInput = {
    id?: SortOrder;
    name?: SortOrder;
    color?: SortOrderInput | SortOrder;
    taskId?: SortOrder;
    task?: TaskOrderByWithRelationInput;
  };

  export type TaskTagWhereUniqueInput = Prisma.AtLeast<
    {
      id?: string;
      taskId_name?: TaskTagTaskIdNameCompoundUniqueInput;
      AND?: TaskTagWhereInput | TaskTagWhereInput[];
      OR?: TaskTagWhereInput[];
      NOT?: TaskTagWhereInput | TaskTagWhereInput[];
      name?: StringFilter<"TaskTag"> | string;
      color?: StringNullableFilter<"TaskTag"> | string | null;
      taskId?: StringFilter<"TaskTag"> | string;
      task?: XOR<TaskScalarRelationFilter, TaskWhereInput>;
    },
    "id" | "taskId_name"
  >;

  export type TaskTagOrderByWithAggregationInput = {
    id?: SortOrder;
    name?: SortOrder;
    color?: SortOrderInput | SortOrder;
    taskId?: SortOrder;
    _count?: TaskTagCountOrderByAggregateInput;
    _max?: TaskTagMaxOrderByAggregateInput;
    _min?: TaskTagMinOrderByAggregateInput;
  };

  export type TaskTagScalarWhereWithAggregatesInput = {
    AND?:
      | TaskTagScalarWhereWithAggregatesInput
      | TaskTagScalarWhereWithAggregatesInput[];
    OR?: TaskTagScalarWhereWithAggregatesInput[];
    NOT?:
      | TaskTagScalarWhereWithAggregatesInput
      | TaskTagScalarWhereWithAggregatesInput[];
    id?: StringWithAggregatesFilter<"TaskTag"> | string;
    name?: StringWithAggregatesFilter<"TaskTag"> | string;
    color?: StringNullableWithAggregatesFilter<"TaskTag"> | string | null;
    taskId?: StringWithAggregatesFilter<"TaskTag"> | string;
  };

  export type SprintWhereInput = {
    AND?: SprintWhereInput | SprintWhereInput[];
    OR?: SprintWhereInput[];
    NOT?: SprintWhereInput | SprintWhereInput[];
    id?: StringFilter<"Sprint"> | string;
    name?: StringFilter<"Sprint"> | string;
    goal?: StringNullableFilter<"Sprint"> | string | null;
    status?: EnumSprintStatusFilter<"Sprint"> | $Enums.SprintStatus;
    startDate?: DateTimeNullableFilter<"Sprint"> | Date | string | null;
    endDate?: DateTimeNullableFilter<"Sprint"> | Date | string | null;
    progress?: IntFilter<"Sprint"> | number;
    createdAt?: DateTimeFilter<"Sprint"> | Date | string;
    updatedAt?: DateTimeFilter<"Sprint"> | Date | string;
    projectId?: StringFilter<"Sprint"> | string;
    ownerId?: StringFilter<"Sprint"> | string;
    project?: XOR<ProjectScalarRelationFilter, ProjectWhereInput>;
    owner?: XOR<UserScalarRelationFilter, UserWhereInput>;
    tasks?: TaskListRelationFilter;
  };

  export type SprintOrderByWithRelationInput = {
    id?: SortOrder;
    name?: SortOrder;
    goal?: SortOrderInput | SortOrder;
    status?: SortOrder;
    startDate?: SortOrderInput | SortOrder;
    endDate?: SortOrderInput | SortOrder;
    progress?: SortOrder;
    createdAt?: SortOrder;
    updatedAt?: SortOrder;
    projectId?: SortOrder;
    ownerId?: SortOrder;
    project?: ProjectOrderByWithRelationInput;
    owner?: UserOrderByWithRelationInput;
    tasks?: TaskOrderByRelationAggregateInput;
  };

  export type SprintWhereUniqueInput = Prisma.AtLeast<
    {
      id?: string;
      AND?: SprintWhereInput | SprintWhereInput[];
      OR?: SprintWhereInput[];
      NOT?: SprintWhereInput | SprintWhereInput[];
      name?: StringFilter<"Sprint"> | string;
      goal?: StringNullableFilter<"Sprint"> | string | null;
      status?: EnumSprintStatusFilter<"Sprint"> | $Enums.SprintStatus;
      startDate?: DateTimeNullableFilter<"Sprint"> | Date | string | null;
      endDate?: DateTimeNullableFilter<"Sprint"> | Date | string | null;
      progress?: IntFilter<"Sprint"> | number;
      createdAt?: DateTimeFilter<"Sprint"> | Date | string;
      updatedAt?: DateTimeFilter<"Sprint"> | Date | string;
      projectId?: StringFilter<"Sprint"> | string;
      ownerId?: StringFilter<"Sprint"> | string;
      project?: XOR<ProjectScalarRelationFilter, ProjectWhereInput>;
      owner?: XOR<UserScalarRelationFilter, UserWhereInput>;
      tasks?: TaskListRelationFilter;
    },
    "id"
  >;

  export type SprintOrderByWithAggregationInput = {
    id?: SortOrder;
    name?: SortOrder;
    goal?: SortOrderInput | SortOrder;
    status?: SortOrder;
    startDate?: SortOrderInput | SortOrder;
    endDate?: SortOrderInput | SortOrder;
    progress?: SortOrder;
    createdAt?: SortOrder;
    updatedAt?: SortOrder;
    projectId?: SortOrder;
    ownerId?: SortOrder;
    _count?: SprintCountOrderByAggregateInput;
    _avg?: SprintAvgOrderByAggregateInput;
    _max?: SprintMaxOrderByAggregateInput;
    _min?: SprintMinOrderByAggregateInput;
    _sum?: SprintSumOrderByAggregateInput;
  };

  export type SprintScalarWhereWithAggregatesInput = {
    AND?:
      | SprintScalarWhereWithAggregatesInput
      | SprintScalarWhereWithAggregatesInput[];
    OR?: SprintScalarWhereWithAggregatesInput[];
    NOT?:
      | SprintScalarWhereWithAggregatesInput
      | SprintScalarWhereWithAggregatesInput[];
    id?: StringWithAggregatesFilter<"Sprint"> | string;
    name?: StringWithAggregatesFilter<"Sprint"> | string;
    goal?: StringNullableWithAggregatesFilter<"Sprint"> | string | null;
    status?:
      | EnumSprintStatusWithAggregatesFilter<"Sprint">
      | $Enums.SprintStatus;
    startDate?:
      | DateTimeNullableWithAggregatesFilter<"Sprint">
      | Date
      | string
      | null;
    endDate?:
      | DateTimeNullableWithAggregatesFilter<"Sprint">
      | Date
      | string
      | null;
    progress?: IntWithAggregatesFilter<"Sprint"> | number;
    createdAt?: DateTimeWithAggregatesFilter<"Sprint"> | Date | string;
    updatedAt?: DateTimeWithAggregatesFilter<"Sprint"> | Date | string;
    projectId?: StringWithAggregatesFilter<"Sprint"> | string;
    ownerId?: StringWithAggregatesFilter<"Sprint"> | string;
  };

  export type MilestoneWhereInput = {
    AND?: MilestoneWhereInput | MilestoneWhereInput[];
    OR?: MilestoneWhereInput[];
    NOT?: MilestoneWhereInput | MilestoneWhereInput[];
    id?: StringFilter<"Milestone"> | string;
    title?: StringFilter<"Milestone"> | string;
    description?: StringNullableFilter<"Milestone"> | string | null;
    status?: EnumMilestoneStatusFilter<"Milestone"> | $Enums.MilestoneStatus;
    progress?: IntFilter<"Milestone"> | number;
    startDate?: DateTimeNullableFilter<"Milestone"> | Date | string | null;
    endDate?: DateTimeNullableFilter<"Milestone"> | Date | string | null;
    createdAt?: DateTimeFilter<"Milestone"> | Date | string;
    updatedAt?: DateTimeFilter<"Milestone"> | Date | string;
    projectId?: StringFilter<"Milestone"> | string;
    ownerId?: StringFilter<"Milestone"> | string;
    project?: XOR<ProjectScalarRelationFilter, ProjectWhereInput>;
    owner?: XOR<UserScalarRelationFilter, UserWhereInput>;
    dependencies?: MilestoneDependencyListRelationFilter;
    dependents?: MilestoneDependencyListRelationFilter;
  };

  export type MilestoneOrderByWithRelationInput = {
    id?: SortOrder;
    title?: SortOrder;
    description?: SortOrderInput | SortOrder;
    status?: SortOrder;
    progress?: SortOrder;
    startDate?: SortOrderInput | SortOrder;
    endDate?: SortOrderInput | SortOrder;
    createdAt?: SortOrder;
    updatedAt?: SortOrder;
    projectId?: SortOrder;
    ownerId?: SortOrder;
    project?: ProjectOrderByWithRelationInput;
    owner?: UserOrderByWithRelationInput;
    dependencies?: MilestoneDependencyOrderByRelationAggregateInput;
    dependents?: MilestoneDependencyOrderByRelationAggregateInput;
  };

  export type MilestoneWhereUniqueInput = Prisma.AtLeast<
    {
      id?: string;
      AND?: MilestoneWhereInput | MilestoneWhereInput[];
      OR?: MilestoneWhereInput[];
      NOT?: MilestoneWhereInput | MilestoneWhereInput[];
      title?: StringFilter<"Milestone"> | string;
      description?: StringNullableFilter<"Milestone"> | string | null;
      status?: EnumMilestoneStatusFilter<"Milestone"> | $Enums.MilestoneStatus;
      progress?: IntFilter<"Milestone"> | number;
      startDate?: DateTimeNullableFilter<"Milestone"> | Date | string | null;
      endDate?: DateTimeNullableFilter<"Milestone"> | Date | string | null;
      createdAt?: DateTimeFilter<"Milestone"> | Date | string;
      updatedAt?: DateTimeFilter<"Milestone"> | Date | string;
      projectId?: StringFilter<"Milestone"> | string;
      ownerId?: StringFilter<"Milestone"> | string;
      project?: XOR<ProjectScalarRelationFilter, ProjectWhereInput>;
      owner?: XOR<UserScalarRelationFilter, UserWhereInput>;
      dependencies?: MilestoneDependencyListRelationFilter;
      dependents?: MilestoneDependencyListRelationFilter;
    },
    "id"
  >;

  export type MilestoneOrderByWithAggregationInput = {
    id?: SortOrder;
    title?: SortOrder;
    description?: SortOrderInput | SortOrder;
    status?: SortOrder;
    progress?: SortOrder;
    startDate?: SortOrderInput | SortOrder;
    endDate?: SortOrderInput | SortOrder;
    createdAt?: SortOrder;
    updatedAt?: SortOrder;
    projectId?: SortOrder;
    ownerId?: SortOrder;
    _count?: MilestoneCountOrderByAggregateInput;
    _avg?: MilestoneAvgOrderByAggregateInput;
    _max?: MilestoneMaxOrderByAggregateInput;
    _min?: MilestoneMinOrderByAggregateInput;
    _sum?: MilestoneSumOrderByAggregateInput;
  };

  export type MilestoneScalarWhereWithAggregatesInput = {
    AND?:
      | MilestoneScalarWhereWithAggregatesInput
      | MilestoneScalarWhereWithAggregatesInput[];
    OR?: MilestoneScalarWhereWithAggregatesInput[];
    NOT?:
      | MilestoneScalarWhereWithAggregatesInput
      | MilestoneScalarWhereWithAggregatesInput[];
    id?: StringWithAggregatesFilter<"Milestone"> | string;
    title?: StringWithAggregatesFilter<"Milestone"> | string;
    description?:
      | StringNullableWithAggregatesFilter<"Milestone">
      | string
      | null;
    status?:
      | EnumMilestoneStatusWithAggregatesFilter<"Milestone">
      | $Enums.MilestoneStatus;
    progress?: IntWithAggregatesFilter<"Milestone"> | number;
    startDate?:
      | DateTimeNullableWithAggregatesFilter<"Milestone">
      | Date
      | string
      | null;
    endDate?:
      | DateTimeNullableWithAggregatesFilter<"Milestone">
      | Date
      | string
      | null;
    createdAt?: DateTimeWithAggregatesFilter<"Milestone"> | Date | string;
    updatedAt?: DateTimeWithAggregatesFilter<"Milestone"> | Date | string;
    projectId?: StringWithAggregatesFilter<"Milestone"> | string;
    ownerId?: StringWithAggregatesFilter<"Milestone"> | string;
  };

  export type MilestoneDependencyWhereInput = {
    AND?: MilestoneDependencyWhereInput | MilestoneDependencyWhereInput[];
    OR?: MilestoneDependencyWhereInput[];
    NOT?: MilestoneDependencyWhereInput | MilestoneDependencyWhereInput[];
    id?: StringFilter<"MilestoneDependency"> | string;
    milestoneId?: StringFilter<"MilestoneDependency"> | string;
    dependsOnId?: StringFilter<"MilestoneDependency"> | string;
    milestone?: XOR<MilestoneScalarRelationFilter, MilestoneWhereInput>;
    dependsOn?: XOR<MilestoneScalarRelationFilter, MilestoneWhereInput>;
  };

  export type MilestoneDependencyOrderByWithRelationInput = {
    id?: SortOrder;
    milestoneId?: SortOrder;
    dependsOnId?: SortOrder;
    milestone?: MilestoneOrderByWithRelationInput;
    dependsOn?: MilestoneOrderByWithRelationInput;
  };

  export type MilestoneDependencyWhereUniqueInput = Prisma.AtLeast<
    {
      id?: string;
      milestoneId_dependsOnId?: MilestoneDependencyMilestoneIdDependsOnIdCompoundUniqueInput;
      AND?: MilestoneDependencyWhereInput | MilestoneDependencyWhereInput[];
      OR?: MilestoneDependencyWhereInput[];
      NOT?: MilestoneDependencyWhereInput | MilestoneDependencyWhereInput[];
      milestoneId?: StringFilter<"MilestoneDependency"> | string;
      dependsOnId?: StringFilter<"MilestoneDependency"> | string;
      milestone?: XOR<MilestoneScalarRelationFilter, MilestoneWhereInput>;
      dependsOn?: XOR<MilestoneScalarRelationFilter, MilestoneWhereInput>;
    },
    "id" | "milestoneId_dependsOnId"
  >;

  export type MilestoneDependencyOrderByWithAggregationInput = {
    id?: SortOrder;
    milestoneId?: SortOrder;
    dependsOnId?: SortOrder;
    _count?: MilestoneDependencyCountOrderByAggregateInput;
    _max?: MilestoneDependencyMaxOrderByAggregateInput;
    _min?: MilestoneDependencyMinOrderByAggregateInput;
  };

  export type MilestoneDependencyScalarWhereWithAggregatesInput = {
    AND?:
      | MilestoneDependencyScalarWhereWithAggregatesInput
      | MilestoneDependencyScalarWhereWithAggregatesInput[];
    OR?: MilestoneDependencyScalarWhereWithAggregatesInput[];
    NOT?:
      | MilestoneDependencyScalarWhereWithAggregatesInput
      | MilestoneDependencyScalarWhereWithAggregatesInput[];
    id?: StringWithAggregatesFilter<"MilestoneDependency"> | string;
    milestoneId?: StringWithAggregatesFilter<"MilestoneDependency"> | string;
    dependsOnId?: StringWithAggregatesFilter<"MilestoneDependency"> | string;
  };

  export type ActivityWhereInput = {
    AND?: ActivityWhereInput | ActivityWhereInput[];
    OR?: ActivityWhereInput[];
    NOT?: ActivityWhereInput | ActivityWhereInput[];
    id?: StringFilter<"Activity"> | string;
    type?: EnumActivityTypeFilter<"Activity"> | $Enums.ActivityType;
    content?: StringFilter<"Activity"> | string;
    createdAt?: DateTimeFilter<"Activity"> | Date | string;
    userId?: StringFilter<"Activity"> | string;
    taskId?: StringNullableFilter<"Activity"> | string | null;
    user?: XOR<UserScalarRelationFilter, UserWhereInput>;
    task?: XOR<TaskNullableScalarRelationFilter, TaskWhereInput> | null;
  };

  export type ActivityOrderByWithRelationInput = {
    id?: SortOrder;
    type?: SortOrder;
    content?: SortOrder;
    createdAt?: SortOrder;
    userId?: SortOrder;
    taskId?: SortOrderInput | SortOrder;
    user?: UserOrderByWithRelationInput;
    task?: TaskOrderByWithRelationInput;
  };

  export type ActivityWhereUniqueInput = Prisma.AtLeast<
    {
      id?: string;
      AND?: ActivityWhereInput | ActivityWhereInput[];
      OR?: ActivityWhereInput[];
      NOT?: ActivityWhereInput | ActivityWhereInput[];
      type?: EnumActivityTypeFilter<"Activity"> | $Enums.ActivityType;
      content?: StringFilter<"Activity"> | string;
      createdAt?: DateTimeFilter<"Activity"> | Date | string;
      userId?: StringFilter<"Activity"> | string;
      taskId?: StringNullableFilter<"Activity"> | string | null;
      user?: XOR<UserScalarRelationFilter, UserWhereInput>;
      task?: XOR<TaskNullableScalarRelationFilter, TaskWhereInput> | null;
    },
    "id"
  >;

  export type ActivityOrderByWithAggregationInput = {
    id?: SortOrder;
    type?: SortOrder;
    content?: SortOrder;
    createdAt?: SortOrder;
    userId?: SortOrder;
    taskId?: SortOrderInput | SortOrder;
    _count?: ActivityCountOrderByAggregateInput;
    _max?: ActivityMaxOrderByAggregateInput;
    _min?: ActivityMinOrderByAggregateInput;
  };

  export type ActivityScalarWhereWithAggregatesInput = {
    AND?:
      | ActivityScalarWhereWithAggregatesInput
      | ActivityScalarWhereWithAggregatesInput[];
    OR?: ActivityScalarWhereWithAggregatesInput[];
    NOT?:
      | ActivityScalarWhereWithAggregatesInput
      | ActivityScalarWhereWithAggregatesInput[];
    id?: StringWithAggregatesFilter<"Activity"> | string;
    type?:
      | EnumActivityTypeWithAggregatesFilter<"Activity">
      | $Enums.ActivityType;
    content?: StringWithAggregatesFilter<"Activity"> | string;
    createdAt?: DateTimeWithAggregatesFilter<"Activity"> | Date | string;
    userId?: StringWithAggregatesFilter<"Activity"> | string;
    taskId?: StringNullableWithAggregatesFilter<"Activity"> | string | null;
  };

  export type NotificationWhereInput = {
    AND?: NotificationWhereInput | NotificationWhereInput[];
    OR?: NotificationWhereInput[];
    NOT?: NotificationWhereInput | NotificationWhereInput[];
    id?: StringFilter<"Notification"> | string;
    title?: StringFilter<"Notification"> | string;
    content?: StringFilter<"Notification"> | string;
    isRead?: BoolFilter<"Notification"> | boolean;
    createdAt?: DateTimeFilter<"Notification"> | Date | string;
    userId?: StringFilter<"Notification"> | string;
    user?: XOR<UserScalarRelationFilter, UserWhereInput>;
  };

  export type NotificationOrderByWithRelationInput = {
    id?: SortOrder;
    title?: SortOrder;
    content?: SortOrder;
    isRead?: SortOrder;
    createdAt?: SortOrder;
    userId?: SortOrder;
    user?: UserOrderByWithRelationInput;
  };

  export type NotificationWhereUniqueInput = Prisma.AtLeast<
    {
      id?: string;
      AND?: NotificationWhereInput | NotificationWhereInput[];
      OR?: NotificationWhereInput[];
      NOT?: NotificationWhereInput | NotificationWhereInput[];
      title?: StringFilter<"Notification"> | string;
      content?: StringFilter<"Notification"> | string;
      isRead?: BoolFilter<"Notification"> | boolean;
      createdAt?: DateTimeFilter<"Notification"> | Date | string;
      userId?: StringFilter<"Notification"> | string;
      user?: XOR<UserScalarRelationFilter, UserWhereInput>;
    },
    "id"
  >;

  export type NotificationOrderByWithAggregationInput = {
    id?: SortOrder;
    title?: SortOrder;
    content?: SortOrder;
    isRead?: SortOrder;
    createdAt?: SortOrder;
    userId?: SortOrder;
    _count?: NotificationCountOrderByAggregateInput;
    _max?: NotificationMaxOrderByAggregateInput;
    _min?: NotificationMinOrderByAggregateInput;
  };

  export type NotificationScalarWhereWithAggregatesInput = {
    AND?:
      | NotificationScalarWhereWithAggregatesInput
      | NotificationScalarWhereWithAggregatesInput[];
    OR?: NotificationScalarWhereWithAggregatesInput[];
    NOT?:
      | NotificationScalarWhereWithAggregatesInput
      | NotificationScalarWhereWithAggregatesInput[];
    id?: StringWithAggregatesFilter<"Notification"> | string;
    title?: StringWithAggregatesFilter<"Notification"> | string;
    content?: StringWithAggregatesFilter<"Notification"> | string;
    isRead?: BoolWithAggregatesFilter<"Notification"> | boolean;
    createdAt?: DateTimeWithAggregatesFilter<"Notification"> | Date | string;
    userId?: StringWithAggregatesFilter<"Notification"> | string;
  };

  export type UserCreateInput = {
    id?: string;
    email?: string | null;
    name?: string | null;
    role?: $Enums.UserRole;
    createdAt?: Date | string;
    updatedAt?: Date | string;
    assignedTasks?: TaskCreateNestedManyWithoutAssigneeInput;
    createdTasks?: TaskCreateNestedManyWithoutCreatorInput;
    ownedMilestones?: MilestoneCreateNestedManyWithoutOwnerInput;
    ownedSprints?: SprintCreateNestedManyWithoutOwnerInput;
    workspaces?: WorkspaceMemberCreateNestedManyWithoutUserInput;
    notifications?: NotificationCreateNestedManyWithoutUserInput;
    activities?: ActivityCreateNestedManyWithoutUserInput;
    rooms?: RoomCreateNestedManyWithoutOwnerInput;
    messages?: ChatMessageCreateNestedManyWithoutUserInput;
  };

  export type UserUncheckedCreateInput = {
    id?: string;
    email?: string | null;
    name?: string | null;
    role?: $Enums.UserRole;
    createdAt?: Date | string;
    updatedAt?: Date | string;
    assignedTasks?: TaskUncheckedCreateNestedManyWithoutAssigneeInput;
    createdTasks?: TaskUncheckedCreateNestedManyWithoutCreatorInput;
    ownedMilestones?: MilestoneUncheckedCreateNestedManyWithoutOwnerInput;
    ownedSprints?: SprintUncheckedCreateNestedManyWithoutOwnerInput;
    workspaces?: WorkspaceMemberUncheckedCreateNestedManyWithoutUserInput;
    notifications?: NotificationUncheckedCreateNestedManyWithoutUserInput;
    activities?: ActivityUncheckedCreateNestedManyWithoutUserInput;
    rooms?: RoomUncheckedCreateNestedManyWithoutOwnerInput;
    messages?: ChatMessageUncheckedCreateNestedManyWithoutUserInput;
  };

  export type UserUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string;
    email?: NullableStringFieldUpdateOperationsInput | string | null;
    name?: NullableStringFieldUpdateOperationsInput | string | null;
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole;
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string;
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string;
    assignedTasks?: TaskUpdateManyWithoutAssigneeNestedInput;
    createdTasks?: TaskUpdateManyWithoutCreatorNestedInput;
    ownedMilestones?: MilestoneUpdateManyWithoutOwnerNestedInput;
    ownedSprints?: SprintUpdateManyWithoutOwnerNestedInput;
    workspaces?: WorkspaceMemberUpdateManyWithoutUserNestedInput;
    notifications?: NotificationUpdateManyWithoutUserNestedInput;
    activities?: ActivityUpdateManyWithoutUserNestedInput;
    rooms?: RoomUpdateManyWithoutOwnerNestedInput;
    messages?: ChatMessageUpdateManyWithoutUserNestedInput;
  };

  export type UserUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string;
    email?: NullableStringFieldUpdateOperationsInput | string | null;
    name?: NullableStringFieldUpdateOperationsInput | string | null;
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole;
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string;
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string;
    assignedTasks?: TaskUncheckedUpdateManyWithoutAssigneeNestedInput;
    createdTasks?: TaskUncheckedUpdateManyWithoutCreatorNestedInput;
    ownedMilestones?: MilestoneUncheckedUpdateManyWithoutOwnerNestedInput;
    ownedSprints?: SprintUncheckedUpdateManyWithoutOwnerNestedInput;
    workspaces?: WorkspaceMemberUncheckedUpdateManyWithoutUserNestedInput;
    notifications?: NotificationUncheckedUpdateManyWithoutUserNestedInput;
    activities?: ActivityUncheckedUpdateManyWithoutUserNestedInput;
    rooms?: RoomUncheckedUpdateManyWithoutOwnerNestedInput;
    messages?: ChatMessageUncheckedUpdateManyWithoutUserNestedInput;
  };

  export type UserCreateManyInput = {
    id?: string;
    email?: string | null;
    name?: string | null;
    role?: $Enums.UserRole;
    createdAt?: Date | string;
    updatedAt?: Date | string;
  };

  export type UserUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string;
    email?: NullableStringFieldUpdateOperationsInput | string | null;
    name?: NullableStringFieldUpdateOperationsInput | string | null;
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole;
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string;
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string;
  };

  export type UserUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string;
    email?: NullableStringFieldUpdateOperationsInput | string | null;
    name?: NullableStringFieldUpdateOperationsInput | string | null;
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole;
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string;
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string;
  };

  export type RoomCreateInput = {
    id?: string;
    name: string;
    createdAt?: Date | string;
    whiteboardData?: NullableJsonNullValueInput | InputJsonValue;
    owner: UserCreateNestedOneWithoutRoomsInput;
    chatMessages?: ChatMessageCreateNestedManyWithoutRoomInput;
  };

  export type RoomUncheckedCreateInput = {
    id?: string;
    name: string;
    ownerId: string;
    createdAt?: Date | string;
    whiteboardData?: NullableJsonNullValueInput | InputJsonValue;
    chatMessages?: ChatMessageUncheckedCreateNestedManyWithoutRoomInput;
  };

  export type RoomUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string;
    name?: StringFieldUpdateOperationsInput | string;
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string;
    whiteboardData?: NullableJsonNullValueInput | InputJsonValue;
    owner?: UserUpdateOneRequiredWithoutRoomsNestedInput;
    chatMessages?: ChatMessageUpdateManyWithoutRoomNestedInput;
  };

  export type RoomUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string;
    name?: StringFieldUpdateOperationsInput | string;
    ownerId?: StringFieldUpdateOperationsInput | string;
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string;
    whiteboardData?: NullableJsonNullValueInput | InputJsonValue;
    chatMessages?: ChatMessageUncheckedUpdateManyWithoutRoomNestedInput;
  };

  export type RoomCreateManyInput = {
    id?: string;
    name: string;
    ownerId: string;
    createdAt?: Date | string;
    whiteboardData?: NullableJsonNullValueInput | InputJsonValue;
  };

  export type RoomUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string;
    name?: StringFieldUpdateOperationsInput | string;
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string;
    whiteboardData?: NullableJsonNullValueInput | InputJsonValue;
  };

  export type RoomUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string;
    name?: StringFieldUpdateOperationsInput | string;
    ownerId?: StringFieldUpdateOperationsInput | string;
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string;
    whiteboardData?: NullableJsonNullValueInput | InputJsonValue;
  };

  export type ChatMessageCreateInput = {
    id?: string;
    message: string;
    createdAt?: Date | string;
    room: RoomCreateNestedOneWithoutChatMessagesInput;
    user: UserCreateNestedOneWithoutMessagesInput;
  };

  export type ChatMessageUncheckedCreateInput = {
    id?: string;
    roomName: string;
    userId: string;
    message: string;
    createdAt?: Date | string;
  };

  export type ChatMessageUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string;
    message?: StringFieldUpdateOperationsInput | string;
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string;
    room?: RoomUpdateOneRequiredWithoutChatMessagesNestedInput;
    user?: UserUpdateOneRequiredWithoutMessagesNestedInput;
  };

  export type ChatMessageUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string;
    roomName?: StringFieldUpdateOperationsInput | string;
    userId?: StringFieldUpdateOperationsInput | string;
    message?: StringFieldUpdateOperationsInput | string;
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string;
  };

  export type ChatMessageCreateManyInput = {
    id?: string;
    roomName: string;
    userId: string;
    message: string;
    createdAt?: Date | string;
  };

  export type ChatMessageUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string;
    message?: StringFieldUpdateOperationsInput | string;
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string;
  };

  export type ChatMessageUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string;
    roomName?: StringFieldUpdateOperationsInput | string;
    userId?: StringFieldUpdateOperationsInput | string;
    message?: StringFieldUpdateOperationsInput | string;
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string;
  };

  export type WorkspaceCreateInput = {
    id?: string;
    name: string;
    createdAt?: Date | string;
    updatedAt?: Date | string;
    members?: WorkspaceMemberCreateNestedManyWithoutWorkspaceInput;
    projects?: ProjectCreateNestedManyWithoutWorkspaceInput;
  };

  export type WorkspaceUncheckedCreateInput = {
    id?: string;
    name: string;
    createdAt?: Date | string;
    updatedAt?: Date | string;
    members?: WorkspaceMemberUncheckedCreateNestedManyWithoutWorkspaceInput;
    projects?: ProjectUncheckedCreateNestedManyWithoutWorkspaceInput;
  };

  export type WorkspaceUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string;
    name?: StringFieldUpdateOperationsInput | string;
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string;
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string;
    members?: WorkspaceMemberUpdateManyWithoutWorkspaceNestedInput;
    projects?: ProjectUpdateManyWithoutWorkspaceNestedInput;
  };

  export type WorkspaceUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string;
    name?: StringFieldUpdateOperationsInput | string;
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string;
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string;
    members?: WorkspaceMemberUncheckedUpdateManyWithoutWorkspaceNestedInput;
    projects?: ProjectUncheckedUpdateManyWithoutWorkspaceNestedInput;
  };

  export type WorkspaceCreateManyInput = {
    id?: string;
    name: string;
    createdAt?: Date | string;
    updatedAt?: Date | string;
  };

  export type WorkspaceUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string;
    name?: StringFieldUpdateOperationsInput | string;
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string;
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string;
  };

  export type WorkspaceUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string;
    name?: StringFieldUpdateOperationsInput | string;
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string;
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string;
  };

  export type WorkspaceMemberCreateInput = {
    id?: string;
    role?: $Enums.UserRole;
    joinedAt?: Date | string;
    workspace: WorkspaceCreateNestedOneWithoutMembersInput;
    user: UserCreateNestedOneWithoutWorkspacesInput;
  };

  export type WorkspaceMemberUncheckedCreateInput = {
    id?: string;
    workspaceId: string;
    userId: string;
    role?: $Enums.UserRole;
    joinedAt?: Date | string;
  };

  export type WorkspaceMemberUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string;
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole;
    joinedAt?: DateTimeFieldUpdateOperationsInput | Date | string;
    workspace?: WorkspaceUpdateOneRequiredWithoutMembersNestedInput;
    user?: UserUpdateOneRequiredWithoutWorkspacesNestedInput;
  };

  export type WorkspaceMemberUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string;
    workspaceId?: StringFieldUpdateOperationsInput | string;
    userId?: StringFieldUpdateOperationsInput | string;
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole;
    joinedAt?: DateTimeFieldUpdateOperationsInput | Date | string;
  };

  export type WorkspaceMemberCreateManyInput = {
    id?: string;
    workspaceId: string;
    userId: string;
    role?: $Enums.UserRole;
    joinedAt?: Date | string;
  };

  export type WorkspaceMemberUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string;
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole;
    joinedAt?: DateTimeFieldUpdateOperationsInput | Date | string;
  };

  export type WorkspaceMemberUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string;
    workspaceId?: StringFieldUpdateOperationsInput | string;
    userId?: StringFieldUpdateOperationsInput | string;
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole;
    joinedAt?: DateTimeFieldUpdateOperationsInput | Date | string;
  };

  export type ProjectCreateInput = {
    id?: string;
    name: string;
    description?: string | null;
    key: string;
    status?: $Enums.ProjectStatus;
    progress?: number;
    createdAt?: Date | string;
    updatedAt?: Date | string;
    workspace: WorkspaceCreateNestedOneWithoutProjectsInput;
    tasks?: TaskCreateNestedManyWithoutProjectInput;
    sprints?: SprintCreateNestedManyWithoutProjectInput;
    milestones?: MilestoneCreateNestedManyWithoutProjectInput;
  };

  export type ProjectUncheckedCreateInput = {
    id?: string;
    name: string;
    description?: string | null;
    key: string;
    status?: $Enums.ProjectStatus;
    progress?: number;
    createdAt?: Date | string;
    updatedAt?: Date | string;
    workspaceId: string;
    tasks?: TaskUncheckedCreateNestedManyWithoutProjectInput;
    sprints?: SprintUncheckedCreateNestedManyWithoutProjectInput;
    milestones?: MilestoneUncheckedCreateNestedManyWithoutProjectInput;
  };

  export type ProjectUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string;
    name?: StringFieldUpdateOperationsInput | string;
    description?: NullableStringFieldUpdateOperationsInput | string | null;
    key?: StringFieldUpdateOperationsInput | string;
    status?: EnumProjectStatusFieldUpdateOperationsInput | $Enums.ProjectStatus;
    progress?: IntFieldUpdateOperationsInput | number;
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string;
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string;
    workspace?: WorkspaceUpdateOneRequiredWithoutProjectsNestedInput;
    tasks?: TaskUpdateManyWithoutProjectNestedInput;
    sprints?: SprintUpdateManyWithoutProjectNestedInput;
    milestones?: MilestoneUpdateManyWithoutProjectNestedInput;
  };

  export type ProjectUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string;
    name?: StringFieldUpdateOperationsInput | string;
    description?: NullableStringFieldUpdateOperationsInput | string | null;
    key?: StringFieldUpdateOperationsInput | string;
    status?: EnumProjectStatusFieldUpdateOperationsInput | $Enums.ProjectStatus;
    progress?: IntFieldUpdateOperationsInput | number;
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string;
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string;
    workspaceId?: StringFieldUpdateOperationsInput | string;
    tasks?: TaskUncheckedUpdateManyWithoutProjectNestedInput;
    sprints?: SprintUncheckedUpdateManyWithoutProjectNestedInput;
    milestones?: MilestoneUncheckedUpdateManyWithoutProjectNestedInput;
  };

  export type ProjectCreateManyInput = {
    id?: string;
    name: string;
    description?: string | null;
    key: string;
    status?: $Enums.ProjectStatus;
    progress?: number;
    createdAt?: Date | string;
    updatedAt?: Date | string;
    workspaceId: string;
  };

  export type ProjectUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string;
    name?: StringFieldUpdateOperationsInput | string;
    description?: NullableStringFieldUpdateOperationsInput | string | null;
    key?: StringFieldUpdateOperationsInput | string;
    status?: EnumProjectStatusFieldUpdateOperationsInput | $Enums.ProjectStatus;
    progress?: IntFieldUpdateOperationsInput | number;
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string;
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string;
  };

  export type ProjectUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string;
    name?: StringFieldUpdateOperationsInput | string;
    description?: NullableStringFieldUpdateOperationsInput | string | null;
    key?: StringFieldUpdateOperationsInput | string;
    status?: EnumProjectStatusFieldUpdateOperationsInput | $Enums.ProjectStatus;
    progress?: IntFieldUpdateOperationsInput | number;
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string;
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string;
    workspaceId?: StringFieldUpdateOperationsInput | string;
  };

  export type TaskCreateInput = {
    id?: string;
    title: string;
    description?: string | null;
    type?: $Enums.TaskType;
    status?: $Enums.TaskStatus;
    priority?: $Enums.Priority;
    storyPoints?: number | null;
    dueDate?: Date | string | null;
    createdAt?: Date | string;
    updatedAt?: Date | string;
    parentId?: string | null;
    project: ProjectCreateNestedOneWithoutTasksInput;
    sprint?: SprintCreateNestedOneWithoutTasksInput;
    assignee?: UserCreateNestedOneWithoutAssignedTasksInput;
    creator: UserCreateNestedOneWithoutCreatedTasksInput;
    tags?: TaskTagCreateNestedManyWithoutTaskInput;
    activities?: ActivityCreateNestedManyWithoutTaskInput;
  };

  export type TaskUncheckedCreateInput = {
    id?: string;
    title: string;
    description?: string | null;
    type?: $Enums.TaskType;
    status?: $Enums.TaskStatus;
    priority?: $Enums.Priority;
    storyPoints?: number | null;
    dueDate?: Date | string | null;
    createdAt?: Date | string;
    updatedAt?: Date | string;
    projectId: string;
    sprintId?: string | null;
    assigneeId?: string | null;
    creatorId: string;
    parentId?: string | null;
    tags?: TaskTagUncheckedCreateNestedManyWithoutTaskInput;
    activities?: ActivityUncheckedCreateNestedManyWithoutTaskInput;
  };

  export type TaskUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string;
    title?: StringFieldUpdateOperationsInput | string;
    description?: NullableStringFieldUpdateOperationsInput | string | null;
    type?: EnumTaskTypeFieldUpdateOperationsInput | $Enums.TaskType;
    status?: EnumTaskStatusFieldUpdateOperationsInput | $Enums.TaskStatus;
    priority?: EnumPriorityFieldUpdateOperationsInput | $Enums.Priority;
    storyPoints?: NullableIntFieldUpdateOperationsInput | number | null;
    dueDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null;
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string;
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string;
    parentId?: NullableStringFieldUpdateOperationsInput | string | null;
    project?: ProjectUpdateOneRequiredWithoutTasksNestedInput;
    sprint?: SprintUpdateOneWithoutTasksNestedInput;
    assignee?: UserUpdateOneWithoutAssignedTasksNestedInput;
    creator?: UserUpdateOneRequiredWithoutCreatedTasksNestedInput;
    tags?: TaskTagUpdateManyWithoutTaskNestedInput;
    activities?: ActivityUpdateManyWithoutTaskNestedInput;
  };

  export type TaskUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string;
    title?: StringFieldUpdateOperationsInput | string;
    description?: NullableStringFieldUpdateOperationsInput | string | null;
    type?: EnumTaskTypeFieldUpdateOperationsInput | $Enums.TaskType;
    status?: EnumTaskStatusFieldUpdateOperationsInput | $Enums.TaskStatus;
    priority?: EnumPriorityFieldUpdateOperationsInput | $Enums.Priority;
    storyPoints?: NullableIntFieldUpdateOperationsInput | number | null;
    dueDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null;
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string;
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string;
    projectId?: StringFieldUpdateOperationsInput | string;
    sprintId?: NullableStringFieldUpdateOperationsInput | string | null;
    assigneeId?: NullableStringFieldUpdateOperationsInput | string | null;
    creatorId?: StringFieldUpdateOperationsInput | string;
    parentId?: NullableStringFieldUpdateOperationsInput | string | null;
    tags?: TaskTagUncheckedUpdateManyWithoutTaskNestedInput;
    activities?: ActivityUncheckedUpdateManyWithoutTaskNestedInput;
  };

  export type TaskCreateManyInput = {
    id?: string;
    title: string;
    description?: string | null;
    type?: $Enums.TaskType;
    status?: $Enums.TaskStatus;
    priority?: $Enums.Priority;
    storyPoints?: number | null;
    dueDate?: Date | string | null;
    createdAt?: Date | string;
    updatedAt?: Date | string;
    projectId: string;
    sprintId?: string | null;
    assigneeId?: string | null;
    creatorId: string;
    parentId?: string | null;
  };

  export type TaskUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string;
    title?: StringFieldUpdateOperationsInput | string;
    description?: NullableStringFieldUpdateOperationsInput | string | null;
    type?: EnumTaskTypeFieldUpdateOperationsInput | $Enums.TaskType;
    status?: EnumTaskStatusFieldUpdateOperationsInput | $Enums.TaskStatus;
    priority?: EnumPriorityFieldUpdateOperationsInput | $Enums.Priority;
    storyPoints?: NullableIntFieldUpdateOperationsInput | number | null;
    dueDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null;
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string;
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string;
    parentId?: NullableStringFieldUpdateOperationsInput | string | null;
  };

  export type TaskUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string;
    title?: StringFieldUpdateOperationsInput | string;
    description?: NullableStringFieldUpdateOperationsInput | string | null;
    type?: EnumTaskTypeFieldUpdateOperationsInput | $Enums.TaskType;
    status?: EnumTaskStatusFieldUpdateOperationsInput | $Enums.TaskStatus;
    priority?: EnumPriorityFieldUpdateOperationsInput | $Enums.Priority;
    storyPoints?: NullableIntFieldUpdateOperationsInput | number | null;
    dueDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null;
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string;
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string;
    projectId?: StringFieldUpdateOperationsInput | string;
    sprintId?: NullableStringFieldUpdateOperationsInput | string | null;
    assigneeId?: NullableStringFieldUpdateOperationsInput | string | null;
    creatorId?: StringFieldUpdateOperationsInput | string;
    parentId?: NullableStringFieldUpdateOperationsInput | string | null;
  };

  export type TaskTagCreateInput = {
    id?: string;
    name: string;
    color?: string | null;
    task: TaskCreateNestedOneWithoutTagsInput;
  };

  export type TaskTagUncheckedCreateInput = {
    id?: string;
    name: string;
    color?: string | null;
    taskId: string;
  };

  export type TaskTagUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string;
    name?: StringFieldUpdateOperationsInput | string;
    color?: NullableStringFieldUpdateOperationsInput | string | null;
    task?: TaskUpdateOneRequiredWithoutTagsNestedInput;
  };

  export type TaskTagUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string;
    name?: StringFieldUpdateOperationsInput | string;
    color?: NullableStringFieldUpdateOperationsInput | string | null;
    taskId?: StringFieldUpdateOperationsInput | string;
  };

  export type TaskTagCreateManyInput = {
    id?: string;
    name: string;
    color?: string | null;
    taskId: string;
  };

  export type TaskTagUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string;
    name?: StringFieldUpdateOperationsInput | string;
    color?: NullableStringFieldUpdateOperationsInput | string | null;
  };

  export type TaskTagUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string;
    name?: StringFieldUpdateOperationsInput | string;
    color?: NullableStringFieldUpdateOperationsInput | string | null;
    taskId?: StringFieldUpdateOperationsInput | string;
  };

  export type SprintCreateInput = {
    id?: string;
    name: string;
    goal?: string | null;
    status?: $Enums.SprintStatus;
    startDate?: Date | string | null;
    endDate?: Date | string | null;
    progress?: number;
    createdAt?: Date | string;
    updatedAt?: Date | string;
    project: ProjectCreateNestedOneWithoutSprintsInput;
    owner: UserCreateNestedOneWithoutOwnedSprintsInput;
    tasks?: TaskCreateNestedManyWithoutSprintInput;
  };

  export type SprintUncheckedCreateInput = {
    id?: string;
    name: string;
    goal?: string | null;
    status?: $Enums.SprintStatus;
    startDate?: Date | string | null;
    endDate?: Date | string | null;
    progress?: number;
    createdAt?: Date | string;
    updatedAt?: Date | string;
    projectId: string;
    ownerId: string;
    tasks?: TaskUncheckedCreateNestedManyWithoutSprintInput;
  };

  export type SprintUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string;
    name?: StringFieldUpdateOperationsInput | string;
    goal?: NullableStringFieldUpdateOperationsInput | string | null;
    status?: EnumSprintStatusFieldUpdateOperationsInput | $Enums.SprintStatus;
    startDate?:
      | NullableDateTimeFieldUpdateOperationsInput
      | Date
      | string
      | null;
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null;
    progress?: IntFieldUpdateOperationsInput | number;
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string;
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string;
    project?: ProjectUpdateOneRequiredWithoutSprintsNestedInput;
    owner?: UserUpdateOneRequiredWithoutOwnedSprintsNestedInput;
    tasks?: TaskUpdateManyWithoutSprintNestedInput;
  };

  export type SprintUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string;
    name?: StringFieldUpdateOperationsInput | string;
    goal?: NullableStringFieldUpdateOperationsInput | string | null;
    status?: EnumSprintStatusFieldUpdateOperationsInput | $Enums.SprintStatus;
    startDate?:
      | NullableDateTimeFieldUpdateOperationsInput
      | Date
      | string
      | null;
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null;
    progress?: IntFieldUpdateOperationsInput | number;
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string;
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string;
    projectId?: StringFieldUpdateOperationsInput | string;
    ownerId?: StringFieldUpdateOperationsInput | string;
    tasks?: TaskUncheckedUpdateManyWithoutSprintNestedInput;
  };

  export type SprintCreateManyInput = {
    id?: string;
    name: string;
    goal?: string | null;
    status?: $Enums.SprintStatus;
    startDate?: Date | string | null;
    endDate?: Date | string | null;
    progress?: number;
    createdAt?: Date | string;
    updatedAt?: Date | string;
    projectId: string;
    ownerId: string;
  };

  export type SprintUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string;
    name?: StringFieldUpdateOperationsInput | string;
    goal?: NullableStringFieldUpdateOperationsInput | string | null;
    status?: EnumSprintStatusFieldUpdateOperationsInput | $Enums.SprintStatus;
    startDate?:
      | NullableDateTimeFieldUpdateOperationsInput
      | Date
      | string
      | null;
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null;
    progress?: IntFieldUpdateOperationsInput | number;
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string;
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string;
  };

  export type SprintUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string;
    name?: StringFieldUpdateOperationsInput | string;
    goal?: NullableStringFieldUpdateOperationsInput | string | null;
    status?: EnumSprintStatusFieldUpdateOperationsInput | $Enums.SprintStatus;
    startDate?:
      | NullableDateTimeFieldUpdateOperationsInput
      | Date
      | string
      | null;
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null;
    progress?: IntFieldUpdateOperationsInput | number;
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string;
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string;
    projectId?: StringFieldUpdateOperationsInput | string;
    ownerId?: StringFieldUpdateOperationsInput | string;
  };

  export type MilestoneCreateInput = {
    id?: string;
    title: string;
    description?: string | null;
    status?: $Enums.MilestoneStatus;
    progress?: number;
    startDate?: Date | string | null;
    endDate?: Date | string | null;
    createdAt?: Date | string;
    updatedAt?: Date | string;
    project: ProjectCreateNestedOneWithoutMilestonesInput;
    owner: UserCreateNestedOneWithoutOwnedMilestonesInput;
    dependencies?: MilestoneDependencyCreateNestedManyWithoutMilestoneInput;
    dependents?: MilestoneDependencyCreateNestedManyWithoutDependsOnInput;
  };

  export type MilestoneUncheckedCreateInput = {
    id?: string;
    title: string;
    description?: string | null;
    status?: $Enums.MilestoneStatus;
    progress?: number;
    startDate?: Date | string | null;
    endDate?: Date | string | null;
    createdAt?: Date | string;
    updatedAt?: Date | string;
    projectId: string;
    ownerId: string;
    dependencies?: MilestoneDependencyUncheckedCreateNestedManyWithoutMilestoneInput;
    dependents?: MilestoneDependencyUncheckedCreateNestedManyWithoutDependsOnInput;
  };

  export type MilestoneUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string;
    title?: StringFieldUpdateOperationsInput | string;
    description?: NullableStringFieldUpdateOperationsInput | string | null;
    status?:
      | EnumMilestoneStatusFieldUpdateOperationsInput
      | $Enums.MilestoneStatus;
    progress?: IntFieldUpdateOperationsInput | number;
    startDate?:
      | NullableDateTimeFieldUpdateOperationsInput
      | Date
      | string
      | null;
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null;
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string;
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string;
    project?: ProjectUpdateOneRequiredWithoutMilestonesNestedInput;
    owner?: UserUpdateOneRequiredWithoutOwnedMilestonesNestedInput;
    dependencies?: MilestoneDependencyUpdateManyWithoutMilestoneNestedInput;
    dependents?: MilestoneDependencyUpdateManyWithoutDependsOnNestedInput;
  };

  export type MilestoneUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string;
    title?: StringFieldUpdateOperationsInput | string;
    description?: NullableStringFieldUpdateOperationsInput | string | null;
    status?:
      | EnumMilestoneStatusFieldUpdateOperationsInput
      | $Enums.MilestoneStatus;
    progress?: IntFieldUpdateOperationsInput | number;
    startDate?:
      | NullableDateTimeFieldUpdateOperationsInput
      | Date
      | string
      | null;
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null;
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string;
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string;
    projectId?: StringFieldUpdateOperationsInput | string;
    ownerId?: StringFieldUpdateOperationsInput | string;
    dependencies?: MilestoneDependencyUncheckedUpdateManyWithoutMilestoneNestedInput;
    dependents?: MilestoneDependencyUncheckedUpdateManyWithoutDependsOnNestedInput;
  };

  export type MilestoneCreateManyInput = {
    id?: string;
    title: string;
    description?: string | null;
    status?: $Enums.MilestoneStatus;
    progress?: number;
    startDate?: Date | string | null;
    endDate?: Date | string | null;
    createdAt?: Date | string;
    updatedAt?: Date | string;
    projectId: string;
    ownerId: string;
  };

  export type MilestoneUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string;
    title?: StringFieldUpdateOperationsInput | string;
    description?: NullableStringFieldUpdateOperationsInput | string | null;
    status?:
      | EnumMilestoneStatusFieldUpdateOperationsInput
      | $Enums.MilestoneStatus;
    progress?: IntFieldUpdateOperationsInput | number;
    startDate?:
      | NullableDateTimeFieldUpdateOperationsInput
      | Date
      | string
      | null;
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null;
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string;
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string;
  };

  export type MilestoneUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string;
    title?: StringFieldUpdateOperationsInput | string;
    description?: NullableStringFieldUpdateOperationsInput | string | null;
    status?:
      | EnumMilestoneStatusFieldUpdateOperationsInput
      | $Enums.MilestoneStatus;
    progress?: IntFieldUpdateOperationsInput | number;
    startDate?:
      | NullableDateTimeFieldUpdateOperationsInput
      | Date
      | string
      | null;
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null;
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string;
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string;
    projectId?: StringFieldUpdateOperationsInput | string;
    ownerId?: StringFieldUpdateOperationsInput | string;
  };

  export type MilestoneDependencyCreateInput = {
    id?: string;
    milestone: MilestoneCreateNestedOneWithoutDependenciesInput;
    dependsOn: MilestoneCreateNestedOneWithoutDependentsInput;
  };

  export type MilestoneDependencyUncheckedCreateInput = {
    id?: string;
    milestoneId: string;
    dependsOnId: string;
  };

  export type MilestoneDependencyUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string;
    milestone?: MilestoneUpdateOneRequiredWithoutDependenciesNestedInput;
    dependsOn?: MilestoneUpdateOneRequiredWithoutDependentsNestedInput;
  };

  export type MilestoneDependencyUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string;
    milestoneId?: StringFieldUpdateOperationsInput | string;
    dependsOnId?: StringFieldUpdateOperationsInput | string;
  };

  export type MilestoneDependencyCreateManyInput = {
    id?: string;
    milestoneId: string;
    dependsOnId: string;
  };

  export type MilestoneDependencyUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string;
  };

  export type MilestoneDependencyUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string;
    milestoneId?: StringFieldUpdateOperationsInput | string;
    dependsOnId?: StringFieldUpdateOperationsInput | string;
  };

  export type ActivityCreateInput = {
    id?: string;
    type: $Enums.ActivityType;
    content: string;
    createdAt?: Date | string;
    user: UserCreateNestedOneWithoutActivitiesInput;
    task?: TaskCreateNestedOneWithoutActivitiesInput;
  };

  export type ActivityUncheckedCreateInput = {
    id?: string;
    type: $Enums.ActivityType;
    content: string;
    createdAt?: Date | string;
    userId: string;
    taskId?: string | null;
  };

  export type ActivityUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string;
    type?: EnumActivityTypeFieldUpdateOperationsInput | $Enums.ActivityType;
    content?: StringFieldUpdateOperationsInput | string;
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string;
    user?: UserUpdateOneRequiredWithoutActivitiesNestedInput;
    task?: TaskUpdateOneWithoutActivitiesNestedInput;
  };

  export type ActivityUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string;
    type?: EnumActivityTypeFieldUpdateOperationsInput | $Enums.ActivityType;
    content?: StringFieldUpdateOperationsInput | string;
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string;
    userId?: StringFieldUpdateOperationsInput | string;
    taskId?: NullableStringFieldUpdateOperationsInput | string | null;
  };

  export type ActivityCreateManyInput = {
    id?: string;
    type: $Enums.ActivityType;
    content: string;
    createdAt?: Date | string;
    userId: string;
    taskId?: string | null;
  };

  export type ActivityUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string;
    type?: EnumActivityTypeFieldUpdateOperationsInput | $Enums.ActivityType;
    content?: StringFieldUpdateOperationsInput | string;
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string;
  };

  export type ActivityUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string;
    type?: EnumActivityTypeFieldUpdateOperationsInput | $Enums.ActivityType;
    content?: StringFieldUpdateOperationsInput | string;
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string;
    userId?: StringFieldUpdateOperationsInput | string;
    taskId?: NullableStringFieldUpdateOperationsInput | string | null;
  };

  export type NotificationCreateInput = {
    id?: string;
    title: string;
    content: string;
    isRead?: boolean;
    createdAt?: Date | string;
    user: UserCreateNestedOneWithoutNotificationsInput;
  };

  export type NotificationUncheckedCreateInput = {
    id?: string;
    title: string;
    content: string;
    isRead?: boolean;
    createdAt?: Date | string;
    userId: string;
  };

  export type NotificationUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string;
    title?: StringFieldUpdateOperationsInput | string;
    content?: StringFieldUpdateOperationsInput | string;
    isRead?: BoolFieldUpdateOperationsInput | boolean;
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string;
    user?: UserUpdateOneRequiredWithoutNotificationsNestedInput;
  };

  export type NotificationUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string;
    title?: StringFieldUpdateOperationsInput | string;
    content?: StringFieldUpdateOperationsInput | string;
    isRead?: BoolFieldUpdateOperationsInput | boolean;
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string;
    userId?: StringFieldUpdateOperationsInput | string;
  };

  export type NotificationCreateManyInput = {
    id?: string;
    title: string;
    content: string;
    isRead?: boolean;
    createdAt?: Date | string;
    userId: string;
  };

  export type NotificationUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string;
    title?: StringFieldUpdateOperationsInput | string;
    content?: StringFieldUpdateOperationsInput | string;
    isRead?: BoolFieldUpdateOperationsInput | boolean;
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string;
  };

  export type NotificationUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string;
    title?: StringFieldUpdateOperationsInput | string;
    content?: StringFieldUpdateOperationsInput | string;
    isRead?: BoolFieldUpdateOperationsInput | boolean;
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string;
    userId?: StringFieldUpdateOperationsInput | string;
  };

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>;
    in?: string[] | ListStringFieldRefInput<$PrismaModel>;
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>;
    lt?: string | StringFieldRefInput<$PrismaModel>;
    lte?: string | StringFieldRefInput<$PrismaModel>;
    gt?: string | StringFieldRefInput<$PrismaModel>;
    gte?: string | StringFieldRefInput<$PrismaModel>;
    contains?: string | StringFieldRefInput<$PrismaModel>;
    startsWith?: string | StringFieldRefInput<$PrismaModel>;
    endsWith?: string | StringFieldRefInput<$PrismaModel>;
    mode?: QueryMode;
    not?: NestedStringFilter<$PrismaModel> | string;
  };

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null;
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null;
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null;
    lt?: string | StringFieldRefInput<$PrismaModel>;
    lte?: string | StringFieldRefInput<$PrismaModel>;
    gt?: string | StringFieldRefInput<$PrismaModel>;
    gte?: string | StringFieldRefInput<$PrismaModel>;
    contains?: string | StringFieldRefInput<$PrismaModel>;
    startsWith?: string | StringFieldRefInput<$PrismaModel>;
    endsWith?: string | StringFieldRefInput<$PrismaModel>;
    mode?: QueryMode;
    not?: NestedStringNullableFilter<$PrismaModel> | string | null;
  };

  export type EnumUserRoleFilter<$PrismaModel = never> = {
    equals?: $Enums.UserRole | EnumUserRoleFieldRefInput<$PrismaModel>;
    in?: $Enums.UserRole[] | ListEnumUserRoleFieldRefInput<$PrismaModel>;
    notIn?: $Enums.UserRole[] | ListEnumUserRoleFieldRefInput<$PrismaModel>;
    not?: NestedEnumUserRoleFilter<$PrismaModel> | $Enums.UserRole;
  };

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>;
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>;
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>;
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>;
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>;
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>;
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>;
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string;
  };

  export type TaskListRelationFilter = {
    every?: TaskWhereInput;
    some?: TaskWhereInput;
    none?: TaskWhereInput;
  };

  export type MilestoneListRelationFilter = {
    every?: MilestoneWhereInput;
    some?: MilestoneWhereInput;
    none?: MilestoneWhereInput;
  };

  export type SprintListRelationFilter = {
    every?: SprintWhereInput;
    some?: SprintWhereInput;
    none?: SprintWhereInput;
  };

  export type WorkspaceMemberListRelationFilter = {
    every?: WorkspaceMemberWhereInput;
    some?: WorkspaceMemberWhereInput;
    none?: WorkspaceMemberWhereInput;
  };

  export type NotificationListRelationFilter = {
    every?: NotificationWhereInput;
    some?: NotificationWhereInput;
    none?: NotificationWhereInput;
  };

  export type ActivityListRelationFilter = {
    every?: ActivityWhereInput;
    some?: ActivityWhereInput;
    none?: ActivityWhereInput;
  };

  export type RoomListRelationFilter = {
    every?: RoomWhereInput;
    some?: RoomWhereInput;
    none?: RoomWhereInput;
  };

  export type ChatMessageListRelationFilter = {
    every?: ChatMessageWhereInput;
    some?: ChatMessageWhereInput;
    none?: ChatMessageWhereInput;
  };

  export type SortOrderInput = {
    sort: SortOrder;
    nulls?: NullsOrder;
  };

  export type TaskOrderByRelationAggregateInput = {
    _count?: SortOrder;
  };

  export type MilestoneOrderByRelationAggregateInput = {
    _count?: SortOrder;
  };

  export type SprintOrderByRelationAggregateInput = {
    _count?: SortOrder;
  };

  export type WorkspaceMemberOrderByRelationAggregateInput = {
    _count?: SortOrder;
  };

  export type NotificationOrderByRelationAggregateInput = {
    _count?: SortOrder;
  };

  export type ActivityOrderByRelationAggregateInput = {
    _count?: SortOrder;
  };

  export type RoomOrderByRelationAggregateInput = {
    _count?: SortOrder;
  };

  export type ChatMessageOrderByRelationAggregateInput = {
    _count?: SortOrder;
  };

  export type UserCountOrderByAggregateInput = {
    id?: SortOrder;
    email?: SortOrder;
    name?: SortOrder;
    role?: SortOrder;
    createdAt?: SortOrder;
    updatedAt?: SortOrder;
  };

  export type UserMaxOrderByAggregateInput = {
    id?: SortOrder;
    email?: SortOrder;
    name?: SortOrder;
    role?: SortOrder;
    createdAt?: SortOrder;
    updatedAt?: SortOrder;
  };

  export type UserMinOrderByAggregateInput = {
    id?: SortOrder;
    email?: SortOrder;
    name?: SortOrder;
    role?: SortOrder;
    createdAt?: SortOrder;
    updatedAt?: SortOrder;
  };

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>;
    in?: string[] | ListStringFieldRefInput<$PrismaModel>;
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>;
    lt?: string | StringFieldRefInput<$PrismaModel>;
    lte?: string | StringFieldRefInput<$PrismaModel>;
    gt?: string | StringFieldRefInput<$PrismaModel>;
    gte?: string | StringFieldRefInput<$PrismaModel>;
    contains?: string | StringFieldRefInput<$PrismaModel>;
    startsWith?: string | StringFieldRefInput<$PrismaModel>;
    endsWith?: string | StringFieldRefInput<$PrismaModel>;
    mode?: QueryMode;
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string;
    _count?: NestedIntFilter<$PrismaModel>;
    _min?: NestedStringFilter<$PrismaModel>;
    _max?: NestedStringFilter<$PrismaModel>;
  };

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null;
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null;
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null;
    lt?: string | StringFieldRefInput<$PrismaModel>;
    lte?: string | StringFieldRefInput<$PrismaModel>;
    gt?: string | StringFieldRefInput<$PrismaModel>;
    gte?: string | StringFieldRefInput<$PrismaModel>;
    contains?: string | StringFieldRefInput<$PrismaModel>;
    startsWith?: string | StringFieldRefInput<$PrismaModel>;
    endsWith?: string | StringFieldRefInput<$PrismaModel>;
    mode?: QueryMode;
    not?:
      | NestedStringNullableWithAggregatesFilter<$PrismaModel>
      | string
      | null;
    _count?: NestedIntNullableFilter<$PrismaModel>;
    _min?: NestedStringNullableFilter<$PrismaModel>;
    _max?: NestedStringNullableFilter<$PrismaModel>;
  };

  export type EnumUserRoleWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.UserRole | EnumUserRoleFieldRefInput<$PrismaModel>;
    in?: $Enums.UserRole[] | ListEnumUserRoleFieldRefInput<$PrismaModel>;
    notIn?: $Enums.UserRole[] | ListEnumUserRoleFieldRefInput<$PrismaModel>;
    not?:
      | NestedEnumUserRoleWithAggregatesFilter<$PrismaModel>
      | $Enums.UserRole;
    _count?: NestedIntFilter<$PrismaModel>;
    _min?: NestedEnumUserRoleFilter<$PrismaModel>;
    _max?: NestedEnumUserRoleFilter<$PrismaModel>;
  };

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>;
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>;
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>;
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>;
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>;
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>;
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>;
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string;
    _count?: NestedIntFilter<$PrismaModel>;
    _min?: NestedDateTimeFilter<$PrismaModel>;
    _max?: NestedDateTimeFilter<$PrismaModel>;
  };
  export type JsonNullableFilter<$PrismaModel = never> =
    | PatchUndefined<
        Either<
          Required<JsonNullableFilterBase<$PrismaModel>>,
          Exclude<keyof Required<JsonNullableFilterBase<$PrismaModel>>, "path">
        >,
        Required<JsonNullableFilterBase<$PrismaModel>>
      >
    | OptionalFlat<
        Omit<Required<JsonNullableFilterBase<$PrismaModel>>, "path">
      >;

  export type JsonNullableFilterBase<$PrismaModel = never> = {
    equals?:
      | InputJsonValue
      | JsonFieldRefInput<$PrismaModel>
      | JsonNullValueFilter;
    path?: string[];
    mode?: QueryMode | EnumQueryModeFieldRefInput<$PrismaModel>;
    string_contains?: string | StringFieldRefInput<$PrismaModel>;
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>;
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>;
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null;
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null;
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null;
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>;
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>;
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>;
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>;
    not?:
      | InputJsonValue
      | JsonFieldRefInput<$PrismaModel>
      | JsonNullValueFilter;
  };

  export type UserScalarRelationFilter = {
    is?: UserWhereInput;
    isNot?: UserWhereInput;
  };

  export type RoomCountOrderByAggregateInput = {
    id?: SortOrder;
    name?: SortOrder;
    ownerId?: SortOrder;
    createdAt?: SortOrder;
    whiteboardData?: SortOrder;
  };

  export type RoomMaxOrderByAggregateInput = {
    id?: SortOrder;
    name?: SortOrder;
    ownerId?: SortOrder;
    createdAt?: SortOrder;
  };

  export type RoomMinOrderByAggregateInput = {
    id?: SortOrder;
    name?: SortOrder;
    ownerId?: SortOrder;
    createdAt?: SortOrder;
  };
  export type JsonNullableWithAggregatesFilter<$PrismaModel = never> =
    | PatchUndefined<
        Either<
          Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>,
          Exclude<
            keyof Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>,
            "path"
          >
        >,
        Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>
      >
    | OptionalFlat<
        Omit<
          Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>,
          "path"
        >
      >;

  export type JsonNullableWithAggregatesFilterBase<$PrismaModel = never> = {
    equals?:
      | InputJsonValue
      | JsonFieldRefInput<$PrismaModel>
      | JsonNullValueFilter;
    path?: string[];
    mode?: QueryMode | EnumQueryModeFieldRefInput<$PrismaModel>;
    string_contains?: string | StringFieldRefInput<$PrismaModel>;
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>;
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>;
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null;
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null;
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null;
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>;
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>;
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>;
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>;
    not?:
      | InputJsonValue
      | JsonFieldRefInput<$PrismaModel>
      | JsonNullValueFilter;
    _count?: NestedIntNullableFilter<$PrismaModel>;
    _min?: NestedJsonNullableFilter<$PrismaModel>;
    _max?: NestedJsonNullableFilter<$PrismaModel>;
  };

  export type RoomScalarRelationFilter = {
    is?: RoomWhereInput;
    isNot?: RoomWhereInput;
  };

  export type ChatMessageCountOrderByAggregateInput = {
    id?: SortOrder;
    roomName?: SortOrder;
    userId?: SortOrder;
    message?: SortOrder;
    createdAt?: SortOrder;
  };

  export type ChatMessageMaxOrderByAggregateInput = {
    id?: SortOrder;
    roomName?: SortOrder;
    userId?: SortOrder;
    message?: SortOrder;
    createdAt?: SortOrder;
  };

  export type ChatMessageMinOrderByAggregateInput = {
    id?: SortOrder;
    roomName?: SortOrder;
    userId?: SortOrder;
    message?: SortOrder;
    createdAt?: SortOrder;
  };

  export type ProjectListRelationFilter = {
    every?: ProjectWhereInput;
    some?: ProjectWhereInput;
    none?: ProjectWhereInput;
  };

  export type ProjectOrderByRelationAggregateInput = {
    _count?: SortOrder;
  };

  export type WorkspaceCountOrderByAggregateInput = {
    id?: SortOrder;
    name?: SortOrder;
    createdAt?: SortOrder;
    updatedAt?: SortOrder;
  };

  export type WorkspaceMaxOrderByAggregateInput = {
    id?: SortOrder;
    name?: SortOrder;
    createdAt?: SortOrder;
    updatedAt?: SortOrder;
  };

  export type WorkspaceMinOrderByAggregateInput = {
    id?: SortOrder;
    name?: SortOrder;
    createdAt?: SortOrder;
    updatedAt?: SortOrder;
  };

  export type WorkspaceScalarRelationFilter = {
    is?: WorkspaceWhereInput;
    isNot?: WorkspaceWhereInput;
  };

  export type WorkspaceMemberWorkspaceIdUserIdCompoundUniqueInput = {
    workspaceId: string;
    userId: string;
  };

  export type WorkspaceMemberCountOrderByAggregateInput = {
    id?: SortOrder;
    workspaceId?: SortOrder;
    userId?: SortOrder;
    role?: SortOrder;
    joinedAt?: SortOrder;
  };

  export type WorkspaceMemberMaxOrderByAggregateInput = {
    id?: SortOrder;
    workspaceId?: SortOrder;
    userId?: SortOrder;
    role?: SortOrder;
    joinedAt?: SortOrder;
  };

  export type WorkspaceMemberMinOrderByAggregateInput = {
    id?: SortOrder;
    workspaceId?: SortOrder;
    userId?: SortOrder;
    role?: SortOrder;
    joinedAt?: SortOrder;
  };

  export type EnumProjectStatusFilter<$PrismaModel = never> = {
    equals?:
      | $Enums.ProjectStatus
      | EnumProjectStatusFieldRefInput<$PrismaModel>;
    in?:
      | $Enums.ProjectStatus[]
      | ListEnumProjectStatusFieldRefInput<$PrismaModel>;
    notIn?:
      | $Enums.ProjectStatus[]
      | ListEnumProjectStatusFieldRefInput<$PrismaModel>;
    not?: NestedEnumProjectStatusFilter<$PrismaModel> | $Enums.ProjectStatus;
  };

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>;
    in?: number[] | ListIntFieldRefInput<$PrismaModel>;
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>;
    lt?: number | IntFieldRefInput<$PrismaModel>;
    lte?: number | IntFieldRefInput<$PrismaModel>;
    gt?: number | IntFieldRefInput<$PrismaModel>;
    gte?: number | IntFieldRefInput<$PrismaModel>;
    not?: NestedIntFilter<$PrismaModel> | number;
  };

  export type ProjectCountOrderByAggregateInput = {
    id?: SortOrder;
    name?: SortOrder;
    description?: SortOrder;
    key?: SortOrder;
    status?: SortOrder;
    progress?: SortOrder;
    createdAt?: SortOrder;
    updatedAt?: SortOrder;
    workspaceId?: SortOrder;
  };

  export type ProjectAvgOrderByAggregateInput = {
    progress?: SortOrder;
  };

  export type ProjectMaxOrderByAggregateInput = {
    id?: SortOrder;
    name?: SortOrder;
    description?: SortOrder;
    key?: SortOrder;
    status?: SortOrder;
    progress?: SortOrder;
    createdAt?: SortOrder;
    updatedAt?: SortOrder;
    workspaceId?: SortOrder;
  };

  export type ProjectMinOrderByAggregateInput = {
    id?: SortOrder;
    name?: SortOrder;
    description?: SortOrder;
    key?: SortOrder;
    status?: SortOrder;
    progress?: SortOrder;
    createdAt?: SortOrder;
    updatedAt?: SortOrder;
    workspaceId?: SortOrder;
  };

  export type ProjectSumOrderByAggregateInput = {
    progress?: SortOrder;
  };

  export type EnumProjectStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?:
      | $Enums.ProjectStatus
      | EnumProjectStatusFieldRefInput<$PrismaModel>;
    in?:
      | $Enums.ProjectStatus[]
      | ListEnumProjectStatusFieldRefInput<$PrismaModel>;
    notIn?:
      | $Enums.ProjectStatus[]
      | ListEnumProjectStatusFieldRefInput<$PrismaModel>;
    not?:
      | NestedEnumProjectStatusWithAggregatesFilter<$PrismaModel>
      | $Enums.ProjectStatus;
    _count?: NestedIntFilter<$PrismaModel>;
    _min?: NestedEnumProjectStatusFilter<$PrismaModel>;
    _max?: NestedEnumProjectStatusFilter<$PrismaModel>;
  };

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>;
    in?: number[] | ListIntFieldRefInput<$PrismaModel>;
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>;
    lt?: number | IntFieldRefInput<$PrismaModel>;
    lte?: number | IntFieldRefInput<$PrismaModel>;
    gt?: number | IntFieldRefInput<$PrismaModel>;
    gte?: number | IntFieldRefInput<$PrismaModel>;
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number;
    _count?: NestedIntFilter<$PrismaModel>;
    _avg?: NestedFloatFilter<$PrismaModel>;
    _sum?: NestedIntFilter<$PrismaModel>;
    _min?: NestedIntFilter<$PrismaModel>;
    _max?: NestedIntFilter<$PrismaModel>;
  };

  export type EnumTaskTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.TaskType | EnumTaskTypeFieldRefInput<$PrismaModel>;
    in?: $Enums.TaskType[] | ListEnumTaskTypeFieldRefInput<$PrismaModel>;
    notIn?: $Enums.TaskType[] | ListEnumTaskTypeFieldRefInput<$PrismaModel>;
    not?: NestedEnumTaskTypeFilter<$PrismaModel> | $Enums.TaskType;
  };

  export type EnumTaskStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.TaskStatus | EnumTaskStatusFieldRefInput<$PrismaModel>;
    in?: $Enums.TaskStatus[] | ListEnumTaskStatusFieldRefInput<$PrismaModel>;
    notIn?: $Enums.TaskStatus[] | ListEnumTaskStatusFieldRefInput<$PrismaModel>;
    not?: NestedEnumTaskStatusFilter<$PrismaModel> | $Enums.TaskStatus;
  };

  export type EnumPriorityFilter<$PrismaModel = never> = {
    equals?: $Enums.Priority | EnumPriorityFieldRefInput<$PrismaModel>;
    in?: $Enums.Priority[] | ListEnumPriorityFieldRefInput<$PrismaModel>;
    notIn?: $Enums.Priority[] | ListEnumPriorityFieldRefInput<$PrismaModel>;
    not?: NestedEnumPriorityFilter<$PrismaModel> | $Enums.Priority;
  };

  export type IntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null;
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null;
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null;
    lt?: number | IntFieldRefInput<$PrismaModel>;
    lte?: number | IntFieldRefInput<$PrismaModel>;
    gt?: number | IntFieldRefInput<$PrismaModel>;
    gte?: number | IntFieldRefInput<$PrismaModel>;
    not?: NestedIntNullableFilter<$PrismaModel> | number | null;
  };

  export type DateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null;
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null;
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null;
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>;
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>;
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>;
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>;
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null;
  };

  export type ProjectScalarRelationFilter = {
    is?: ProjectWhereInput;
    isNot?: ProjectWhereInput;
  };

  export type SprintNullableScalarRelationFilter = {
    is?: SprintWhereInput | null;
    isNot?: SprintWhereInput | null;
  };

  export type UserNullableScalarRelationFilter = {
    is?: UserWhereInput | null;
    isNot?: UserWhereInput | null;
  };

  export type TaskTagListRelationFilter = {
    every?: TaskTagWhereInput;
    some?: TaskTagWhereInput;
    none?: TaskTagWhereInput;
  };

  export type TaskTagOrderByRelationAggregateInput = {
    _count?: SortOrder;
  };

  export type TaskCountOrderByAggregateInput = {
    id?: SortOrder;
    title?: SortOrder;
    description?: SortOrder;
    type?: SortOrder;
    status?: SortOrder;
    priority?: SortOrder;
    storyPoints?: SortOrder;
    dueDate?: SortOrder;
    createdAt?: SortOrder;
    updatedAt?: SortOrder;
    projectId?: SortOrder;
    sprintId?: SortOrder;
    assigneeId?: SortOrder;
    creatorId?: SortOrder;
    parentId?: SortOrder;
  };

  export type TaskAvgOrderByAggregateInput = {
    storyPoints?: SortOrder;
  };

  export type TaskMaxOrderByAggregateInput = {
    id?: SortOrder;
    title?: SortOrder;
    description?: SortOrder;
    type?: SortOrder;
    status?: SortOrder;
    priority?: SortOrder;
    storyPoints?: SortOrder;
    dueDate?: SortOrder;
    createdAt?: SortOrder;
    updatedAt?: SortOrder;
    projectId?: SortOrder;
    sprintId?: SortOrder;
    assigneeId?: SortOrder;
    creatorId?: SortOrder;
    parentId?: SortOrder;
  };

  export type TaskMinOrderByAggregateInput = {
    id?: SortOrder;
    title?: SortOrder;
    description?: SortOrder;
    type?: SortOrder;
    status?: SortOrder;
    priority?: SortOrder;
    storyPoints?: SortOrder;
    dueDate?: SortOrder;
    createdAt?: SortOrder;
    updatedAt?: SortOrder;
    projectId?: SortOrder;
    sprintId?: SortOrder;
    assigneeId?: SortOrder;
    creatorId?: SortOrder;
    parentId?: SortOrder;
  };

  export type TaskSumOrderByAggregateInput = {
    storyPoints?: SortOrder;
  };

  export type EnumTaskTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.TaskType | EnumTaskTypeFieldRefInput<$PrismaModel>;
    in?: $Enums.TaskType[] | ListEnumTaskTypeFieldRefInput<$PrismaModel>;
    notIn?: $Enums.TaskType[] | ListEnumTaskTypeFieldRefInput<$PrismaModel>;
    not?:
      | NestedEnumTaskTypeWithAggregatesFilter<$PrismaModel>
      | $Enums.TaskType;
    _count?: NestedIntFilter<$PrismaModel>;
    _min?: NestedEnumTaskTypeFilter<$PrismaModel>;
    _max?: NestedEnumTaskTypeFilter<$PrismaModel>;
  };

  export type EnumTaskStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.TaskStatus | EnumTaskStatusFieldRefInput<$PrismaModel>;
    in?: $Enums.TaskStatus[] | ListEnumTaskStatusFieldRefInput<$PrismaModel>;
    notIn?: $Enums.TaskStatus[] | ListEnumTaskStatusFieldRefInput<$PrismaModel>;
    not?:
      | NestedEnumTaskStatusWithAggregatesFilter<$PrismaModel>
      | $Enums.TaskStatus;
    _count?: NestedIntFilter<$PrismaModel>;
    _min?: NestedEnumTaskStatusFilter<$PrismaModel>;
    _max?: NestedEnumTaskStatusFilter<$PrismaModel>;
  };

  export type EnumPriorityWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.Priority | EnumPriorityFieldRefInput<$PrismaModel>;
    in?: $Enums.Priority[] | ListEnumPriorityFieldRefInput<$PrismaModel>;
    notIn?: $Enums.Priority[] | ListEnumPriorityFieldRefInput<$PrismaModel>;
    not?:
      | NestedEnumPriorityWithAggregatesFilter<$PrismaModel>
      | $Enums.Priority;
    _count?: NestedIntFilter<$PrismaModel>;
    _min?: NestedEnumPriorityFilter<$PrismaModel>;
    _max?: NestedEnumPriorityFilter<$PrismaModel>;
  };

  export type IntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null;
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null;
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null;
    lt?: number | IntFieldRefInput<$PrismaModel>;
    lte?: number | IntFieldRefInput<$PrismaModel>;
    gt?: number | IntFieldRefInput<$PrismaModel>;
    gte?: number | IntFieldRefInput<$PrismaModel>;
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null;
    _count?: NestedIntNullableFilter<$PrismaModel>;
    _avg?: NestedFloatNullableFilter<$PrismaModel>;
    _sum?: NestedIntNullableFilter<$PrismaModel>;
    _min?: NestedIntNullableFilter<$PrismaModel>;
    _max?: NestedIntNullableFilter<$PrismaModel>;
  };

  export type DateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null;
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null;
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null;
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>;
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>;
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>;
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>;
    not?:
      | NestedDateTimeNullableWithAggregatesFilter<$PrismaModel>
      | Date
      | string
      | null;
    _count?: NestedIntNullableFilter<$PrismaModel>;
    _min?: NestedDateTimeNullableFilter<$PrismaModel>;
    _max?: NestedDateTimeNullableFilter<$PrismaModel>;
  };

  export type TaskScalarRelationFilter = {
    is?: TaskWhereInput;
    isNot?: TaskWhereInput;
  };

  export type TaskTagTaskIdNameCompoundUniqueInput = {
    taskId: string;
    name: string;
  };

  export type TaskTagCountOrderByAggregateInput = {
    id?: SortOrder;
    name?: SortOrder;
    color?: SortOrder;
    taskId?: SortOrder;
  };

  export type TaskTagMaxOrderByAggregateInput = {
    id?: SortOrder;
    name?: SortOrder;
    color?: SortOrder;
    taskId?: SortOrder;
  };

  export type TaskTagMinOrderByAggregateInput = {
    id?: SortOrder;
    name?: SortOrder;
    color?: SortOrder;
    taskId?: SortOrder;
  };

  export type EnumSprintStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.SprintStatus | EnumSprintStatusFieldRefInput<$PrismaModel>;
    in?:
      | $Enums.SprintStatus[]
      | ListEnumSprintStatusFieldRefInput<$PrismaModel>;
    notIn?:
      | $Enums.SprintStatus[]
      | ListEnumSprintStatusFieldRefInput<$PrismaModel>;
    not?: NestedEnumSprintStatusFilter<$PrismaModel> | $Enums.SprintStatus;
  };

  export type SprintCountOrderByAggregateInput = {
    id?: SortOrder;
    name?: SortOrder;
    goal?: SortOrder;
    status?: SortOrder;
    startDate?: SortOrder;
    endDate?: SortOrder;
    progress?: SortOrder;
    createdAt?: SortOrder;
    updatedAt?: SortOrder;
    projectId?: SortOrder;
    ownerId?: SortOrder;
  };

  export type SprintAvgOrderByAggregateInput = {
    progress?: SortOrder;
  };

  export type SprintMaxOrderByAggregateInput = {
    id?: SortOrder;
    name?: SortOrder;
    goal?: SortOrder;
    status?: SortOrder;
    startDate?: SortOrder;
    endDate?: SortOrder;
    progress?: SortOrder;
    createdAt?: SortOrder;
    updatedAt?: SortOrder;
    projectId?: SortOrder;
    ownerId?: SortOrder;
  };

  export type SprintMinOrderByAggregateInput = {
    id?: SortOrder;
    name?: SortOrder;
    goal?: SortOrder;
    status?: SortOrder;
    startDate?: SortOrder;
    endDate?: SortOrder;
    progress?: SortOrder;
    createdAt?: SortOrder;
    updatedAt?: SortOrder;
    projectId?: SortOrder;
    ownerId?: SortOrder;
  };

  export type SprintSumOrderByAggregateInput = {
    progress?: SortOrder;
  };

  export type EnumSprintStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.SprintStatus | EnumSprintStatusFieldRefInput<$PrismaModel>;
    in?:
      | $Enums.SprintStatus[]
      | ListEnumSprintStatusFieldRefInput<$PrismaModel>;
    notIn?:
      | $Enums.SprintStatus[]
      | ListEnumSprintStatusFieldRefInput<$PrismaModel>;
    not?:
      | NestedEnumSprintStatusWithAggregatesFilter<$PrismaModel>
      | $Enums.SprintStatus;
    _count?: NestedIntFilter<$PrismaModel>;
    _min?: NestedEnumSprintStatusFilter<$PrismaModel>;
    _max?: NestedEnumSprintStatusFilter<$PrismaModel>;
  };

  export type EnumMilestoneStatusFilter<$PrismaModel = never> = {
    equals?:
      | $Enums.MilestoneStatus
      | EnumMilestoneStatusFieldRefInput<$PrismaModel>;
    in?:
      | $Enums.MilestoneStatus[]
      | ListEnumMilestoneStatusFieldRefInput<$PrismaModel>;
    notIn?:
      | $Enums.MilestoneStatus[]
      | ListEnumMilestoneStatusFieldRefInput<$PrismaModel>;
    not?:
      | NestedEnumMilestoneStatusFilter<$PrismaModel>
      | $Enums.MilestoneStatus;
  };

  export type MilestoneDependencyListRelationFilter = {
    every?: MilestoneDependencyWhereInput;
    some?: MilestoneDependencyWhereInput;
    none?: MilestoneDependencyWhereInput;
  };

  export type MilestoneDependencyOrderByRelationAggregateInput = {
    _count?: SortOrder;
  };

  export type MilestoneCountOrderByAggregateInput = {
    id?: SortOrder;
    title?: SortOrder;
    description?: SortOrder;
    status?: SortOrder;
    progress?: SortOrder;
    startDate?: SortOrder;
    endDate?: SortOrder;
    createdAt?: SortOrder;
    updatedAt?: SortOrder;
    projectId?: SortOrder;
    ownerId?: SortOrder;
  };

  export type MilestoneAvgOrderByAggregateInput = {
    progress?: SortOrder;
  };

  export type MilestoneMaxOrderByAggregateInput = {
    id?: SortOrder;
    title?: SortOrder;
    description?: SortOrder;
    status?: SortOrder;
    progress?: SortOrder;
    startDate?: SortOrder;
    endDate?: SortOrder;
    createdAt?: SortOrder;
    updatedAt?: SortOrder;
    projectId?: SortOrder;
    ownerId?: SortOrder;
  };

  export type MilestoneMinOrderByAggregateInput = {
    id?: SortOrder;
    title?: SortOrder;
    description?: SortOrder;
    status?: SortOrder;
    progress?: SortOrder;
    startDate?: SortOrder;
    endDate?: SortOrder;
    createdAt?: SortOrder;
    updatedAt?: SortOrder;
    projectId?: SortOrder;
    ownerId?: SortOrder;
  };

  export type MilestoneSumOrderByAggregateInput = {
    progress?: SortOrder;
  };

  export type EnumMilestoneStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?:
      | $Enums.MilestoneStatus
      | EnumMilestoneStatusFieldRefInput<$PrismaModel>;
    in?:
      | $Enums.MilestoneStatus[]
      | ListEnumMilestoneStatusFieldRefInput<$PrismaModel>;
    notIn?:
      | $Enums.MilestoneStatus[]
      | ListEnumMilestoneStatusFieldRefInput<$PrismaModel>;
    not?:
      | NestedEnumMilestoneStatusWithAggregatesFilter<$PrismaModel>
      | $Enums.MilestoneStatus;
    _count?: NestedIntFilter<$PrismaModel>;
    _min?: NestedEnumMilestoneStatusFilter<$PrismaModel>;
    _max?: NestedEnumMilestoneStatusFilter<$PrismaModel>;
  };

  export type MilestoneScalarRelationFilter = {
    is?: MilestoneWhereInput;
    isNot?: MilestoneWhereInput;
  };

  export type MilestoneDependencyMilestoneIdDependsOnIdCompoundUniqueInput = {
    milestoneId: string;
    dependsOnId: string;
  };

  export type MilestoneDependencyCountOrderByAggregateInput = {
    id?: SortOrder;
    milestoneId?: SortOrder;
    dependsOnId?: SortOrder;
  };

  export type MilestoneDependencyMaxOrderByAggregateInput = {
    id?: SortOrder;
    milestoneId?: SortOrder;
    dependsOnId?: SortOrder;
  };

  export type MilestoneDependencyMinOrderByAggregateInput = {
    id?: SortOrder;
    milestoneId?: SortOrder;
    dependsOnId?: SortOrder;
  };

  export type EnumActivityTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.ActivityType | EnumActivityTypeFieldRefInput<$PrismaModel>;
    in?:
      | $Enums.ActivityType[]
      | ListEnumActivityTypeFieldRefInput<$PrismaModel>;
    notIn?:
      | $Enums.ActivityType[]
      | ListEnumActivityTypeFieldRefInput<$PrismaModel>;
    not?: NestedEnumActivityTypeFilter<$PrismaModel> | $Enums.ActivityType;
  };

  export type TaskNullableScalarRelationFilter = {
    is?: TaskWhereInput | null;
    isNot?: TaskWhereInput | null;
  };

  export type ActivityCountOrderByAggregateInput = {
    id?: SortOrder;
    type?: SortOrder;
    content?: SortOrder;
    createdAt?: SortOrder;
    userId?: SortOrder;
    taskId?: SortOrder;
  };

  export type ActivityMaxOrderByAggregateInput = {
    id?: SortOrder;
    type?: SortOrder;
    content?: SortOrder;
    createdAt?: SortOrder;
    userId?: SortOrder;
    taskId?: SortOrder;
  };

  export type ActivityMinOrderByAggregateInput = {
    id?: SortOrder;
    type?: SortOrder;
    content?: SortOrder;
    createdAt?: SortOrder;
    userId?: SortOrder;
    taskId?: SortOrder;
  };

  export type EnumActivityTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.ActivityType | EnumActivityTypeFieldRefInput<$PrismaModel>;
    in?:
      | $Enums.ActivityType[]
      | ListEnumActivityTypeFieldRefInput<$PrismaModel>;
    notIn?:
      | $Enums.ActivityType[]
      | ListEnumActivityTypeFieldRefInput<$PrismaModel>;
    not?:
      | NestedEnumActivityTypeWithAggregatesFilter<$PrismaModel>
      | $Enums.ActivityType;
    _count?: NestedIntFilter<$PrismaModel>;
    _min?: NestedEnumActivityTypeFilter<$PrismaModel>;
    _max?: NestedEnumActivityTypeFilter<$PrismaModel>;
  };

  export type BoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>;
    not?: NestedBoolFilter<$PrismaModel> | boolean;
  };

  export type NotificationCountOrderByAggregateInput = {
    id?: SortOrder;
    title?: SortOrder;
    content?: SortOrder;
    isRead?: SortOrder;
    createdAt?: SortOrder;
    userId?: SortOrder;
  };

  export type NotificationMaxOrderByAggregateInput = {
    id?: SortOrder;
    title?: SortOrder;
    content?: SortOrder;
    isRead?: SortOrder;
    createdAt?: SortOrder;
    userId?: SortOrder;
  };

  export type NotificationMinOrderByAggregateInput = {
    id?: SortOrder;
    title?: SortOrder;
    content?: SortOrder;
    isRead?: SortOrder;
    createdAt?: SortOrder;
    userId?: SortOrder;
  };

  export type BoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>;
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean;
    _count?: NestedIntFilter<$PrismaModel>;
    _min?: NestedBoolFilter<$PrismaModel>;
    _max?: NestedBoolFilter<$PrismaModel>;
  };

  export type TaskCreateNestedManyWithoutAssigneeInput = {
    create?:
      | XOR<
          TaskCreateWithoutAssigneeInput,
          TaskUncheckedCreateWithoutAssigneeInput
        >
      | TaskCreateWithoutAssigneeInput[]
      | TaskUncheckedCreateWithoutAssigneeInput[];
    connectOrCreate?:
      | TaskCreateOrConnectWithoutAssigneeInput
      | TaskCreateOrConnectWithoutAssigneeInput[];
    createMany?: TaskCreateManyAssigneeInputEnvelope;
    connect?: TaskWhereUniqueInput | TaskWhereUniqueInput[];
  };

  export type TaskCreateNestedManyWithoutCreatorInput = {
    create?:
      | XOR<
          TaskCreateWithoutCreatorInput,
          TaskUncheckedCreateWithoutCreatorInput
        >
      | TaskCreateWithoutCreatorInput[]
      | TaskUncheckedCreateWithoutCreatorInput[];
    connectOrCreate?:
      | TaskCreateOrConnectWithoutCreatorInput
      | TaskCreateOrConnectWithoutCreatorInput[];
    createMany?: TaskCreateManyCreatorInputEnvelope;
    connect?: TaskWhereUniqueInput | TaskWhereUniqueInput[];
  };

  export type MilestoneCreateNestedManyWithoutOwnerInput = {
    create?:
      | XOR<
          MilestoneCreateWithoutOwnerInput,
          MilestoneUncheckedCreateWithoutOwnerInput
        >
      | MilestoneCreateWithoutOwnerInput[]
      | MilestoneUncheckedCreateWithoutOwnerInput[];
    connectOrCreate?:
      | MilestoneCreateOrConnectWithoutOwnerInput
      | MilestoneCreateOrConnectWithoutOwnerInput[];
    createMany?: MilestoneCreateManyOwnerInputEnvelope;
    connect?: MilestoneWhereUniqueInput | MilestoneWhereUniqueInput[];
  };

  export type SprintCreateNestedManyWithoutOwnerInput = {
    create?:
      | XOR<
          SprintCreateWithoutOwnerInput,
          SprintUncheckedCreateWithoutOwnerInput
        >
      | SprintCreateWithoutOwnerInput[]
      | SprintUncheckedCreateWithoutOwnerInput[];
    connectOrCreate?:
      | SprintCreateOrConnectWithoutOwnerInput
      | SprintCreateOrConnectWithoutOwnerInput[];
    createMany?: SprintCreateManyOwnerInputEnvelope;
    connect?: SprintWhereUniqueInput | SprintWhereUniqueInput[];
  };

  export type WorkspaceMemberCreateNestedManyWithoutUserInput = {
    create?:
      | XOR<
          WorkspaceMemberCreateWithoutUserInput,
          WorkspaceMemberUncheckedCreateWithoutUserInput
        >
      | WorkspaceMemberCreateWithoutUserInput[]
      | WorkspaceMemberUncheckedCreateWithoutUserInput[];
    connectOrCreate?:
      | WorkspaceMemberCreateOrConnectWithoutUserInput
      | WorkspaceMemberCreateOrConnectWithoutUserInput[];
    createMany?: WorkspaceMemberCreateManyUserInputEnvelope;
    connect?:
      | WorkspaceMemberWhereUniqueInput
      | WorkspaceMemberWhereUniqueInput[];
  };

  export type NotificationCreateNestedManyWithoutUserInput = {
    create?:
      | XOR<
          NotificationCreateWithoutUserInput,
          NotificationUncheckedCreateWithoutUserInput
        >
      | NotificationCreateWithoutUserInput[]
      | NotificationUncheckedCreateWithoutUserInput[];
    connectOrCreate?:
      | NotificationCreateOrConnectWithoutUserInput
      | NotificationCreateOrConnectWithoutUserInput[];
    createMany?: NotificationCreateManyUserInputEnvelope;
    connect?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[];
  };

  export type ActivityCreateNestedManyWithoutUserInput = {
    create?:
      | XOR<
          ActivityCreateWithoutUserInput,
          ActivityUncheckedCreateWithoutUserInput
        >
      | ActivityCreateWithoutUserInput[]
      | ActivityUncheckedCreateWithoutUserInput[];
    connectOrCreate?:
      | ActivityCreateOrConnectWithoutUserInput
      | ActivityCreateOrConnectWithoutUserInput[];
    createMany?: ActivityCreateManyUserInputEnvelope;
    connect?: ActivityWhereUniqueInput | ActivityWhereUniqueInput[];
  };

  export type RoomCreateNestedManyWithoutOwnerInput = {
    create?:
      | XOR<RoomCreateWithoutOwnerInput, RoomUncheckedCreateWithoutOwnerInput>
      | RoomCreateWithoutOwnerInput[]
      | RoomUncheckedCreateWithoutOwnerInput[];
    connectOrCreate?:
      | RoomCreateOrConnectWithoutOwnerInput
      | RoomCreateOrConnectWithoutOwnerInput[];
    createMany?: RoomCreateManyOwnerInputEnvelope;
    connect?: RoomWhereUniqueInput | RoomWhereUniqueInput[];
  };

  export type ChatMessageCreateNestedManyWithoutUserInput = {
    create?:
      | XOR<
          ChatMessageCreateWithoutUserInput,
          ChatMessageUncheckedCreateWithoutUserInput
        >
      | ChatMessageCreateWithoutUserInput[]
      | ChatMessageUncheckedCreateWithoutUserInput[];
    connectOrCreate?:
      | ChatMessageCreateOrConnectWithoutUserInput
      | ChatMessageCreateOrConnectWithoutUserInput[];
    createMany?: ChatMessageCreateManyUserInputEnvelope;
    connect?: ChatMessageWhereUniqueInput | ChatMessageWhereUniqueInput[];
  };

  export type TaskUncheckedCreateNestedManyWithoutAssigneeInput = {
    create?:
      | XOR<
          TaskCreateWithoutAssigneeInput,
          TaskUncheckedCreateWithoutAssigneeInput
        >
      | TaskCreateWithoutAssigneeInput[]
      | TaskUncheckedCreateWithoutAssigneeInput[];
    connectOrCreate?:
      | TaskCreateOrConnectWithoutAssigneeInput
      | TaskCreateOrConnectWithoutAssigneeInput[];
    createMany?: TaskCreateManyAssigneeInputEnvelope;
    connect?: TaskWhereUniqueInput | TaskWhereUniqueInput[];
  };

  export type TaskUncheckedCreateNestedManyWithoutCreatorInput = {
    create?:
      | XOR<
          TaskCreateWithoutCreatorInput,
          TaskUncheckedCreateWithoutCreatorInput
        >
      | TaskCreateWithoutCreatorInput[]
      | TaskUncheckedCreateWithoutCreatorInput[];
    connectOrCreate?:
      | TaskCreateOrConnectWithoutCreatorInput
      | TaskCreateOrConnectWithoutCreatorInput[];
    createMany?: TaskCreateManyCreatorInputEnvelope;
    connect?: TaskWhereUniqueInput | TaskWhereUniqueInput[];
  };

  export type MilestoneUncheckedCreateNestedManyWithoutOwnerInput = {
    create?:
      | XOR<
          MilestoneCreateWithoutOwnerInput,
          MilestoneUncheckedCreateWithoutOwnerInput
        >
      | MilestoneCreateWithoutOwnerInput[]
      | MilestoneUncheckedCreateWithoutOwnerInput[];
    connectOrCreate?:
      | MilestoneCreateOrConnectWithoutOwnerInput
      | MilestoneCreateOrConnectWithoutOwnerInput[];
    createMany?: MilestoneCreateManyOwnerInputEnvelope;
    connect?: MilestoneWhereUniqueInput | MilestoneWhereUniqueInput[];
  };

  export type SprintUncheckedCreateNestedManyWithoutOwnerInput = {
    create?:
      | XOR<
          SprintCreateWithoutOwnerInput,
          SprintUncheckedCreateWithoutOwnerInput
        >
      | SprintCreateWithoutOwnerInput[]
      | SprintUncheckedCreateWithoutOwnerInput[];
    connectOrCreate?:
      | SprintCreateOrConnectWithoutOwnerInput
      | SprintCreateOrConnectWithoutOwnerInput[];
    createMany?: SprintCreateManyOwnerInputEnvelope;
    connect?: SprintWhereUniqueInput | SprintWhereUniqueInput[];
  };

  export type WorkspaceMemberUncheckedCreateNestedManyWithoutUserInput = {
    create?:
      | XOR<
          WorkspaceMemberCreateWithoutUserInput,
          WorkspaceMemberUncheckedCreateWithoutUserInput
        >
      | WorkspaceMemberCreateWithoutUserInput[]
      | WorkspaceMemberUncheckedCreateWithoutUserInput[];
    connectOrCreate?:
      | WorkspaceMemberCreateOrConnectWithoutUserInput
      | WorkspaceMemberCreateOrConnectWithoutUserInput[];
    createMany?: WorkspaceMemberCreateManyUserInputEnvelope;
    connect?:
      | WorkspaceMemberWhereUniqueInput
      | WorkspaceMemberWhereUniqueInput[];
  };

  export type NotificationUncheckedCreateNestedManyWithoutUserInput = {
    create?:
      | XOR<
          NotificationCreateWithoutUserInput,
          NotificationUncheckedCreateWithoutUserInput
        >
      | NotificationCreateWithoutUserInput[]
      | NotificationUncheckedCreateWithoutUserInput[];
    connectOrCreate?:
      | NotificationCreateOrConnectWithoutUserInput
      | NotificationCreateOrConnectWithoutUserInput[];
    createMany?: NotificationCreateManyUserInputEnvelope;
    connect?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[];
  };

  export type ActivityUncheckedCreateNestedManyWithoutUserInput = {
    create?:
      | XOR<
          ActivityCreateWithoutUserInput,
          ActivityUncheckedCreateWithoutUserInput
        >
      | ActivityCreateWithoutUserInput[]
      | ActivityUncheckedCreateWithoutUserInput[];
    connectOrCreate?:
      | ActivityCreateOrConnectWithoutUserInput
      | ActivityCreateOrConnectWithoutUserInput[];
    createMany?: ActivityCreateManyUserInputEnvelope;
    connect?: ActivityWhereUniqueInput | ActivityWhereUniqueInput[];
  };

  export type RoomUncheckedCreateNestedManyWithoutOwnerInput = {
    create?:
      | XOR<RoomCreateWithoutOwnerInput, RoomUncheckedCreateWithoutOwnerInput>
      | RoomCreateWithoutOwnerInput[]
      | RoomUncheckedCreateWithoutOwnerInput[];
    connectOrCreate?:
      | RoomCreateOrConnectWithoutOwnerInput
      | RoomCreateOrConnectWithoutOwnerInput[];
    createMany?: RoomCreateManyOwnerInputEnvelope;
    connect?: RoomWhereUniqueInput | RoomWhereUniqueInput[];
  };

  export type ChatMessageUncheckedCreateNestedManyWithoutUserInput = {
    create?:
      | XOR<
          ChatMessageCreateWithoutUserInput,
          ChatMessageUncheckedCreateWithoutUserInput
        >
      | ChatMessageCreateWithoutUserInput[]
      | ChatMessageUncheckedCreateWithoutUserInput[];
    connectOrCreate?:
      | ChatMessageCreateOrConnectWithoutUserInput
      | ChatMessageCreateOrConnectWithoutUserInput[];
    createMany?: ChatMessageCreateManyUserInputEnvelope;
    connect?: ChatMessageWhereUniqueInput | ChatMessageWhereUniqueInput[];
  };

  export type StringFieldUpdateOperationsInput = {
    set?: string;
  };

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null;
  };

  export type EnumUserRoleFieldUpdateOperationsInput = {
    set?: $Enums.UserRole;
  };

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string;
  };

  export type TaskUpdateManyWithoutAssigneeNestedInput = {
    create?:
      | XOR<
          TaskCreateWithoutAssigneeInput,
          TaskUncheckedCreateWithoutAssigneeInput
        >
      | TaskCreateWithoutAssigneeInput[]
      | TaskUncheckedCreateWithoutAssigneeInput[];
    connectOrCreate?:
      | TaskCreateOrConnectWithoutAssigneeInput
      | TaskCreateOrConnectWithoutAssigneeInput[];
    upsert?:
      | TaskUpsertWithWhereUniqueWithoutAssigneeInput
      | TaskUpsertWithWhereUniqueWithoutAssigneeInput[];
    createMany?: TaskCreateManyAssigneeInputEnvelope;
    set?: TaskWhereUniqueInput | TaskWhereUniqueInput[];
    disconnect?: TaskWhereUniqueInput | TaskWhereUniqueInput[];
    delete?: TaskWhereUniqueInput | TaskWhereUniqueInput[];
    connect?: TaskWhereUniqueInput | TaskWhereUniqueInput[];
    update?:
      | TaskUpdateWithWhereUniqueWithoutAssigneeInput
      | TaskUpdateWithWhereUniqueWithoutAssigneeInput[];
    updateMany?:
      | TaskUpdateManyWithWhereWithoutAssigneeInput
      | TaskUpdateManyWithWhereWithoutAssigneeInput[];
    deleteMany?: TaskScalarWhereInput | TaskScalarWhereInput[];
  };

  export type TaskUpdateManyWithoutCreatorNestedInput = {
    create?:
      | XOR<
          TaskCreateWithoutCreatorInput,
          TaskUncheckedCreateWithoutCreatorInput
        >
      | TaskCreateWithoutCreatorInput[]
      | TaskUncheckedCreateWithoutCreatorInput[];
    connectOrCreate?:
      | TaskCreateOrConnectWithoutCreatorInput
      | TaskCreateOrConnectWithoutCreatorInput[];
    upsert?:
      | TaskUpsertWithWhereUniqueWithoutCreatorInput
      | TaskUpsertWithWhereUniqueWithoutCreatorInput[];
    createMany?: TaskCreateManyCreatorInputEnvelope;
    set?: TaskWhereUniqueInput | TaskWhereUniqueInput[];
    disconnect?: TaskWhereUniqueInput | TaskWhereUniqueInput[];
    delete?: TaskWhereUniqueInput | TaskWhereUniqueInput[];
    connect?: TaskWhereUniqueInput | TaskWhereUniqueInput[];
    update?:
      | TaskUpdateWithWhereUniqueWithoutCreatorInput
      | TaskUpdateWithWhereUniqueWithoutCreatorInput[];
    updateMany?:
      | TaskUpdateManyWithWhereWithoutCreatorInput
      | TaskUpdateManyWithWhereWithoutCreatorInput[];
    deleteMany?: TaskScalarWhereInput | TaskScalarWhereInput[];
  };

  export type MilestoneUpdateManyWithoutOwnerNestedInput = {
    create?:
      | XOR<
          MilestoneCreateWithoutOwnerInput,
          MilestoneUncheckedCreateWithoutOwnerInput
        >
      | MilestoneCreateWithoutOwnerInput[]
      | MilestoneUncheckedCreateWithoutOwnerInput[];
    connectOrCreate?:
      | MilestoneCreateOrConnectWithoutOwnerInput
      | MilestoneCreateOrConnectWithoutOwnerInput[];
    upsert?:
      | MilestoneUpsertWithWhereUniqueWithoutOwnerInput
      | MilestoneUpsertWithWhereUniqueWithoutOwnerInput[];
    createMany?: MilestoneCreateManyOwnerInputEnvelope;
    set?: MilestoneWhereUniqueInput | MilestoneWhereUniqueInput[];
    disconnect?: MilestoneWhereUniqueInput | MilestoneWhereUniqueInput[];
    delete?: MilestoneWhereUniqueInput | MilestoneWhereUniqueInput[];
    connect?: MilestoneWhereUniqueInput | MilestoneWhereUniqueInput[];
    update?:
      | MilestoneUpdateWithWhereUniqueWithoutOwnerInput
      | MilestoneUpdateWithWhereUniqueWithoutOwnerInput[];
    updateMany?:
      | MilestoneUpdateManyWithWhereWithoutOwnerInput
      | MilestoneUpdateManyWithWhereWithoutOwnerInput[];
    deleteMany?: MilestoneScalarWhereInput | MilestoneScalarWhereInput[];
  };

  export type SprintUpdateManyWithoutOwnerNestedInput = {
    create?:
      | XOR<
          SprintCreateWithoutOwnerInput,
          SprintUncheckedCreateWithoutOwnerInput
        >
      | SprintCreateWithoutOwnerInput[]
      | SprintUncheckedCreateWithoutOwnerInput[];
    connectOrCreate?:
      | SprintCreateOrConnectWithoutOwnerInput
      | SprintCreateOrConnectWithoutOwnerInput[];
    upsert?:
      | SprintUpsertWithWhereUniqueWithoutOwnerInput
      | SprintUpsertWithWhereUniqueWithoutOwnerInput[];
    createMany?: SprintCreateManyOwnerInputEnvelope;
    set?: SprintWhereUniqueInput | SprintWhereUniqueInput[];
    disconnect?: SprintWhereUniqueInput | SprintWhereUniqueInput[];
    delete?: SprintWhereUniqueInput | SprintWhereUniqueInput[];
    connect?: SprintWhereUniqueInput | SprintWhereUniqueInput[];
    update?:
      | SprintUpdateWithWhereUniqueWithoutOwnerInput
      | SprintUpdateWithWhereUniqueWithoutOwnerInput[];
    updateMany?:
      | SprintUpdateManyWithWhereWithoutOwnerInput
      | SprintUpdateManyWithWhereWithoutOwnerInput[];
    deleteMany?: SprintScalarWhereInput | SprintScalarWhereInput[];
  };

  export type WorkspaceMemberUpdateManyWithoutUserNestedInput = {
    create?:
      | XOR<
          WorkspaceMemberCreateWithoutUserInput,
          WorkspaceMemberUncheckedCreateWithoutUserInput
        >
      | WorkspaceMemberCreateWithoutUserInput[]
      | WorkspaceMemberUncheckedCreateWithoutUserInput[];
    connectOrCreate?:
      | WorkspaceMemberCreateOrConnectWithoutUserInput
      | WorkspaceMemberCreateOrConnectWithoutUserInput[];
    upsert?:
      | WorkspaceMemberUpsertWithWhereUniqueWithoutUserInput
      | WorkspaceMemberUpsertWithWhereUniqueWithoutUserInput[];
    createMany?: WorkspaceMemberCreateManyUserInputEnvelope;
    set?: WorkspaceMemberWhereUniqueInput | WorkspaceMemberWhereUniqueInput[];
    disconnect?:
      | WorkspaceMemberWhereUniqueInput
      | WorkspaceMemberWhereUniqueInput[];
    delete?:
      | WorkspaceMemberWhereUniqueInput
      | WorkspaceMemberWhereUniqueInput[];
    connect?:
      | WorkspaceMemberWhereUniqueInput
      | WorkspaceMemberWhereUniqueInput[];
    update?:
      | WorkspaceMemberUpdateWithWhereUniqueWithoutUserInput
      | WorkspaceMemberUpdateWithWhereUniqueWithoutUserInput[];
    updateMany?:
      | WorkspaceMemberUpdateManyWithWhereWithoutUserInput
      | WorkspaceMemberUpdateManyWithWhereWithoutUserInput[];
    deleteMany?:
      | WorkspaceMemberScalarWhereInput
      | WorkspaceMemberScalarWhereInput[];
  };

  export type NotificationUpdateManyWithoutUserNestedInput = {
    create?:
      | XOR<
          NotificationCreateWithoutUserInput,
          NotificationUncheckedCreateWithoutUserInput
        >
      | NotificationCreateWithoutUserInput[]
      | NotificationUncheckedCreateWithoutUserInput[];
    connectOrCreate?:
      | NotificationCreateOrConnectWithoutUserInput
      | NotificationCreateOrConnectWithoutUserInput[];
    upsert?:
      | NotificationUpsertWithWhereUniqueWithoutUserInput
      | NotificationUpsertWithWhereUniqueWithoutUserInput[];
    createMany?: NotificationCreateManyUserInputEnvelope;
    set?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[];
    disconnect?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[];
    delete?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[];
    connect?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[];
    update?:
      | NotificationUpdateWithWhereUniqueWithoutUserInput
      | NotificationUpdateWithWhereUniqueWithoutUserInput[];
    updateMany?:
      | NotificationUpdateManyWithWhereWithoutUserInput
      | NotificationUpdateManyWithWhereWithoutUserInput[];
    deleteMany?: NotificationScalarWhereInput | NotificationScalarWhereInput[];
  };

  export type ActivityUpdateManyWithoutUserNestedInput = {
    create?:
      | XOR<
          ActivityCreateWithoutUserInput,
          ActivityUncheckedCreateWithoutUserInput
        >
      | ActivityCreateWithoutUserInput[]
      | ActivityUncheckedCreateWithoutUserInput[];
    connectOrCreate?:
      | ActivityCreateOrConnectWithoutUserInput
      | ActivityCreateOrConnectWithoutUserInput[];
    upsert?:
      | ActivityUpsertWithWhereUniqueWithoutUserInput
      | ActivityUpsertWithWhereUniqueWithoutUserInput[];
    createMany?: ActivityCreateManyUserInputEnvelope;
    set?: ActivityWhereUniqueInput | ActivityWhereUniqueInput[];
    disconnect?: ActivityWhereUniqueInput | ActivityWhereUniqueInput[];
    delete?: ActivityWhereUniqueInput | ActivityWhereUniqueInput[];
    connect?: ActivityWhereUniqueInput | ActivityWhereUniqueInput[];
    update?:
      | ActivityUpdateWithWhereUniqueWithoutUserInput
      | ActivityUpdateWithWhereUniqueWithoutUserInput[];
    updateMany?:
      | ActivityUpdateManyWithWhereWithoutUserInput
      | ActivityUpdateManyWithWhereWithoutUserInput[];
    deleteMany?: ActivityScalarWhereInput | ActivityScalarWhereInput[];
  };

  export type RoomUpdateManyWithoutOwnerNestedInput = {
    create?:
      | XOR<RoomCreateWithoutOwnerInput, RoomUncheckedCreateWithoutOwnerInput>
      | RoomCreateWithoutOwnerInput[]
      | RoomUncheckedCreateWithoutOwnerInput[];
    connectOrCreate?:
      | RoomCreateOrConnectWithoutOwnerInput
      | RoomCreateOrConnectWithoutOwnerInput[];
    upsert?:
      | RoomUpsertWithWhereUniqueWithoutOwnerInput
      | RoomUpsertWithWhereUniqueWithoutOwnerInput[];
    createMany?: RoomCreateManyOwnerInputEnvelope;
    set?: RoomWhereUniqueInput | RoomWhereUniqueInput[];
    disconnect?: RoomWhereUniqueInput | RoomWhereUniqueInput[];
    delete?: RoomWhereUniqueInput | RoomWhereUniqueInput[];
    connect?: RoomWhereUniqueInput | RoomWhereUniqueInput[];
    update?:
      | RoomUpdateWithWhereUniqueWithoutOwnerInput
      | RoomUpdateWithWhereUniqueWithoutOwnerInput[];
    updateMany?:
      | RoomUpdateManyWithWhereWithoutOwnerInput
      | RoomUpdateManyWithWhereWithoutOwnerInput[];
    deleteMany?: RoomScalarWhereInput | RoomScalarWhereInput[];
  };

  export type ChatMessageUpdateManyWithoutUserNestedInput = {
    create?:
      | XOR<
          ChatMessageCreateWithoutUserInput,
          ChatMessageUncheckedCreateWithoutUserInput
        >
      | ChatMessageCreateWithoutUserInput[]
      | ChatMessageUncheckedCreateWithoutUserInput[];
    connectOrCreate?:
      | ChatMessageCreateOrConnectWithoutUserInput
      | ChatMessageCreateOrConnectWithoutUserInput[];
    upsert?:
      | ChatMessageUpsertWithWhereUniqueWithoutUserInput
      | ChatMessageUpsertWithWhereUniqueWithoutUserInput[];
    createMany?: ChatMessageCreateManyUserInputEnvelope;
    set?: ChatMessageWhereUniqueInput | ChatMessageWhereUniqueInput[];
    disconnect?: ChatMessageWhereUniqueInput | ChatMessageWhereUniqueInput[];
    delete?: ChatMessageWhereUniqueInput | ChatMessageWhereUniqueInput[];
    connect?: ChatMessageWhereUniqueInput | ChatMessageWhereUniqueInput[];
    update?:
      | ChatMessageUpdateWithWhereUniqueWithoutUserInput
      | ChatMessageUpdateWithWhereUniqueWithoutUserInput[];
    updateMany?:
      | ChatMessageUpdateManyWithWhereWithoutUserInput
      | ChatMessageUpdateManyWithWhereWithoutUserInput[];
    deleteMany?: ChatMessageScalarWhereInput | ChatMessageScalarWhereInput[];
  };

  export type TaskUncheckedUpdateManyWithoutAssigneeNestedInput = {
    create?:
      | XOR<
          TaskCreateWithoutAssigneeInput,
          TaskUncheckedCreateWithoutAssigneeInput
        >
      | TaskCreateWithoutAssigneeInput[]
      | TaskUncheckedCreateWithoutAssigneeInput[];
    connectOrCreate?:
      | TaskCreateOrConnectWithoutAssigneeInput
      | TaskCreateOrConnectWithoutAssigneeInput[];
    upsert?:
      | TaskUpsertWithWhereUniqueWithoutAssigneeInput
      | TaskUpsertWithWhereUniqueWithoutAssigneeInput[];
    createMany?: TaskCreateManyAssigneeInputEnvelope;
    set?: TaskWhereUniqueInput | TaskWhereUniqueInput[];
    disconnect?: TaskWhereUniqueInput | TaskWhereUniqueInput[];
    delete?: TaskWhereUniqueInput | TaskWhereUniqueInput[];
    connect?: TaskWhereUniqueInput | TaskWhereUniqueInput[];
    update?:
      | TaskUpdateWithWhereUniqueWithoutAssigneeInput
      | TaskUpdateWithWhereUniqueWithoutAssigneeInput[];
    updateMany?:
      | TaskUpdateManyWithWhereWithoutAssigneeInput
      | TaskUpdateManyWithWhereWithoutAssigneeInput[];
    deleteMany?: TaskScalarWhereInput | TaskScalarWhereInput[];
  };

  export type TaskUncheckedUpdateManyWithoutCreatorNestedInput = {
    create?:
      | XOR<
          TaskCreateWithoutCreatorInput,
          TaskUncheckedCreateWithoutCreatorInput
        >
      | TaskCreateWithoutCreatorInput[]
      | TaskUncheckedCreateWithoutCreatorInput[];
    connectOrCreate?:
      | TaskCreateOrConnectWithoutCreatorInput
      | TaskCreateOrConnectWithoutCreatorInput[];
    upsert?:
      | TaskUpsertWithWhereUniqueWithoutCreatorInput
      | TaskUpsertWithWhereUniqueWithoutCreatorInput[];
    createMany?: TaskCreateManyCreatorInputEnvelope;
    set?: TaskWhereUniqueInput | TaskWhereUniqueInput[];
    disconnect?: TaskWhereUniqueInput | TaskWhereUniqueInput[];
    delete?: TaskWhereUniqueInput | TaskWhereUniqueInput[];
    connect?: TaskWhereUniqueInput | TaskWhereUniqueInput[];
    update?:
      | TaskUpdateWithWhereUniqueWithoutCreatorInput
      | TaskUpdateWithWhereUniqueWithoutCreatorInput[];
    updateMany?:
      | TaskUpdateManyWithWhereWithoutCreatorInput
      | TaskUpdateManyWithWhereWithoutCreatorInput[];
    deleteMany?: TaskScalarWhereInput | TaskScalarWhereInput[];
  };

  export type MilestoneUncheckedUpdateManyWithoutOwnerNestedInput = {
    create?:
      | XOR<
          MilestoneCreateWithoutOwnerInput,
          MilestoneUncheckedCreateWithoutOwnerInput
        >
      | MilestoneCreateWithoutOwnerInput[]
      | MilestoneUncheckedCreateWithoutOwnerInput[];
    connectOrCreate?:
      | MilestoneCreateOrConnectWithoutOwnerInput
      | MilestoneCreateOrConnectWithoutOwnerInput[];
    upsert?:
      | MilestoneUpsertWithWhereUniqueWithoutOwnerInput
      | MilestoneUpsertWithWhereUniqueWithoutOwnerInput[];
    createMany?: MilestoneCreateManyOwnerInputEnvelope;
    set?: MilestoneWhereUniqueInput | MilestoneWhereUniqueInput[];
    disconnect?: MilestoneWhereUniqueInput | MilestoneWhereUniqueInput[];
    delete?: MilestoneWhereUniqueInput | MilestoneWhereUniqueInput[];
    connect?: MilestoneWhereUniqueInput | MilestoneWhereUniqueInput[];
    update?:
      | MilestoneUpdateWithWhereUniqueWithoutOwnerInput
      | MilestoneUpdateWithWhereUniqueWithoutOwnerInput[];
    updateMany?:
      | MilestoneUpdateManyWithWhereWithoutOwnerInput
      | MilestoneUpdateManyWithWhereWithoutOwnerInput[];
    deleteMany?: MilestoneScalarWhereInput | MilestoneScalarWhereInput[];
  };

  export type SprintUncheckedUpdateManyWithoutOwnerNestedInput = {
    create?:
      | XOR<
          SprintCreateWithoutOwnerInput,
          SprintUncheckedCreateWithoutOwnerInput
        >
      | SprintCreateWithoutOwnerInput[]
      | SprintUncheckedCreateWithoutOwnerInput[];
    connectOrCreate?:
      | SprintCreateOrConnectWithoutOwnerInput
      | SprintCreateOrConnectWithoutOwnerInput[];
    upsert?:
      | SprintUpsertWithWhereUniqueWithoutOwnerInput
      | SprintUpsertWithWhereUniqueWithoutOwnerInput[];
    createMany?: SprintCreateManyOwnerInputEnvelope;
    set?: SprintWhereUniqueInput | SprintWhereUniqueInput[];
    disconnect?: SprintWhereUniqueInput | SprintWhereUniqueInput[];
    delete?: SprintWhereUniqueInput | SprintWhereUniqueInput[];
    connect?: SprintWhereUniqueInput | SprintWhereUniqueInput[];
    update?:
      | SprintUpdateWithWhereUniqueWithoutOwnerInput
      | SprintUpdateWithWhereUniqueWithoutOwnerInput[];
    updateMany?:
      | SprintUpdateManyWithWhereWithoutOwnerInput
      | SprintUpdateManyWithWhereWithoutOwnerInput[];
    deleteMany?: SprintScalarWhereInput | SprintScalarWhereInput[];
  };

  export type WorkspaceMemberUncheckedUpdateManyWithoutUserNestedInput = {
    create?:
      | XOR<
          WorkspaceMemberCreateWithoutUserInput,
          WorkspaceMemberUncheckedCreateWithoutUserInput
        >
      | WorkspaceMemberCreateWithoutUserInput[]
      | WorkspaceMemberUncheckedCreateWithoutUserInput[];
    connectOrCreate?:
      | WorkspaceMemberCreateOrConnectWithoutUserInput
      | WorkspaceMemberCreateOrConnectWithoutUserInput[];
    upsert?:
      | WorkspaceMemberUpsertWithWhereUniqueWithoutUserInput
      | WorkspaceMemberUpsertWithWhereUniqueWithoutUserInput[];
    createMany?: WorkspaceMemberCreateManyUserInputEnvelope;
    set?: WorkspaceMemberWhereUniqueInput | WorkspaceMemberWhereUniqueInput[];
    disconnect?:
      | WorkspaceMemberWhereUniqueInput
      | WorkspaceMemberWhereUniqueInput[];
    delete?:
      | WorkspaceMemberWhereUniqueInput
      | WorkspaceMemberWhereUniqueInput[];
    connect?:
      | WorkspaceMemberWhereUniqueInput
      | WorkspaceMemberWhereUniqueInput[];
    update?:
      | WorkspaceMemberUpdateWithWhereUniqueWithoutUserInput
      | WorkspaceMemberUpdateWithWhereUniqueWithoutUserInput[];
    updateMany?:
      | WorkspaceMemberUpdateManyWithWhereWithoutUserInput
      | WorkspaceMemberUpdateManyWithWhereWithoutUserInput[];
    deleteMany?:
      | WorkspaceMemberScalarWhereInput
      | WorkspaceMemberScalarWhereInput[];
  };

  export type NotificationUncheckedUpdateManyWithoutUserNestedInput = {
    create?:
      | XOR<
          NotificationCreateWithoutUserInput,
          NotificationUncheckedCreateWithoutUserInput
        >
      | NotificationCreateWithoutUserInput[]
      | NotificationUncheckedCreateWithoutUserInput[];
    connectOrCreate?:
      | NotificationCreateOrConnectWithoutUserInput
      | NotificationCreateOrConnectWithoutUserInput[];
    upsert?:
      | NotificationUpsertWithWhereUniqueWithoutUserInput
      | NotificationUpsertWithWhereUniqueWithoutUserInput[];
    createMany?: NotificationCreateManyUserInputEnvelope;
    set?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[];
    disconnect?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[];
    delete?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[];
    connect?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[];
    update?:
      | NotificationUpdateWithWhereUniqueWithoutUserInput
      | NotificationUpdateWithWhereUniqueWithoutUserInput[];
    updateMany?:
      | NotificationUpdateManyWithWhereWithoutUserInput
      | NotificationUpdateManyWithWhereWithoutUserInput[];
    deleteMany?: NotificationScalarWhereInput | NotificationScalarWhereInput[];
  };

  export type ActivityUncheckedUpdateManyWithoutUserNestedInput = {
    create?:
      | XOR<
          ActivityCreateWithoutUserInput,
          ActivityUncheckedCreateWithoutUserInput
        >
      | ActivityCreateWithoutUserInput[]
      | ActivityUncheckedCreateWithoutUserInput[];
    connectOrCreate?:
      | ActivityCreateOrConnectWithoutUserInput
      | ActivityCreateOrConnectWithoutUserInput[];
    upsert?:
      | ActivityUpsertWithWhereUniqueWithoutUserInput
      | ActivityUpsertWithWhereUniqueWithoutUserInput[];
    createMany?: ActivityCreateManyUserInputEnvelope;
    set?: ActivityWhereUniqueInput | ActivityWhereUniqueInput[];
    disconnect?: ActivityWhereUniqueInput | ActivityWhereUniqueInput[];
    delete?: ActivityWhereUniqueInput | ActivityWhereUniqueInput[];
    connect?: ActivityWhereUniqueInput | ActivityWhereUniqueInput[];
    update?:
      | ActivityUpdateWithWhereUniqueWithoutUserInput
      | ActivityUpdateWithWhereUniqueWithoutUserInput[];
    updateMany?:
      | ActivityUpdateManyWithWhereWithoutUserInput
      | ActivityUpdateManyWithWhereWithoutUserInput[];
    deleteMany?: ActivityScalarWhereInput | ActivityScalarWhereInput[];
  };

  export type RoomUncheckedUpdateManyWithoutOwnerNestedInput = {
    create?:
      | XOR<RoomCreateWithoutOwnerInput, RoomUncheckedCreateWithoutOwnerInput>
      | RoomCreateWithoutOwnerInput[]
      | RoomUncheckedCreateWithoutOwnerInput[];
    connectOrCreate?:
      | RoomCreateOrConnectWithoutOwnerInput
      | RoomCreateOrConnectWithoutOwnerInput[];
    upsert?:
      | RoomUpsertWithWhereUniqueWithoutOwnerInput
      | RoomUpsertWithWhereUniqueWithoutOwnerInput[];
    createMany?: RoomCreateManyOwnerInputEnvelope;
    set?: RoomWhereUniqueInput | RoomWhereUniqueInput[];
    disconnect?: RoomWhereUniqueInput | RoomWhereUniqueInput[];
    delete?: RoomWhereUniqueInput | RoomWhereUniqueInput[];
    connect?: RoomWhereUniqueInput | RoomWhereUniqueInput[];
    update?:
      | RoomUpdateWithWhereUniqueWithoutOwnerInput
      | RoomUpdateWithWhereUniqueWithoutOwnerInput[];
    updateMany?:
      | RoomUpdateManyWithWhereWithoutOwnerInput
      | RoomUpdateManyWithWhereWithoutOwnerInput[];
    deleteMany?: RoomScalarWhereInput | RoomScalarWhereInput[];
  };

  export type ChatMessageUncheckedUpdateManyWithoutUserNestedInput = {
    create?:
      | XOR<
          ChatMessageCreateWithoutUserInput,
          ChatMessageUncheckedCreateWithoutUserInput
        >
      | ChatMessageCreateWithoutUserInput[]
      | ChatMessageUncheckedCreateWithoutUserInput[];
    connectOrCreate?:
      | ChatMessageCreateOrConnectWithoutUserInput
      | ChatMessageCreateOrConnectWithoutUserInput[];
    upsert?:
      | ChatMessageUpsertWithWhereUniqueWithoutUserInput
      | ChatMessageUpsertWithWhereUniqueWithoutUserInput[];
    createMany?: ChatMessageCreateManyUserInputEnvelope;
    set?: ChatMessageWhereUniqueInput | ChatMessageWhereUniqueInput[];
    disconnect?: ChatMessageWhereUniqueInput | ChatMessageWhereUniqueInput[];
    delete?: ChatMessageWhereUniqueInput | ChatMessageWhereUniqueInput[];
    connect?: ChatMessageWhereUniqueInput | ChatMessageWhereUniqueInput[];
    update?:
      | ChatMessageUpdateWithWhereUniqueWithoutUserInput
      | ChatMessageUpdateWithWhereUniqueWithoutUserInput[];
    updateMany?:
      | ChatMessageUpdateManyWithWhereWithoutUserInput
      | ChatMessageUpdateManyWithWhereWithoutUserInput[];
    deleteMany?: ChatMessageScalarWhereInput | ChatMessageScalarWhereInput[];
  };

  export type UserCreateNestedOneWithoutRoomsInput = {
    create?: XOR<
      UserCreateWithoutRoomsInput,
      UserUncheckedCreateWithoutRoomsInput
    >;
    connectOrCreate?: UserCreateOrConnectWithoutRoomsInput;
    connect?: UserWhereUniqueInput;
  };

  export type ChatMessageCreateNestedManyWithoutRoomInput = {
    create?:
      | XOR<
          ChatMessageCreateWithoutRoomInput,
          ChatMessageUncheckedCreateWithoutRoomInput
        >
      | ChatMessageCreateWithoutRoomInput[]
      | ChatMessageUncheckedCreateWithoutRoomInput[];
    connectOrCreate?:
      | ChatMessageCreateOrConnectWithoutRoomInput
      | ChatMessageCreateOrConnectWithoutRoomInput[];
    createMany?: ChatMessageCreateManyRoomInputEnvelope;
    connect?: ChatMessageWhereUniqueInput | ChatMessageWhereUniqueInput[];
  };

  export type ChatMessageUncheckedCreateNestedManyWithoutRoomInput = {
    create?:
      | XOR<
          ChatMessageCreateWithoutRoomInput,
          ChatMessageUncheckedCreateWithoutRoomInput
        >
      | ChatMessageCreateWithoutRoomInput[]
      | ChatMessageUncheckedCreateWithoutRoomInput[];
    connectOrCreate?:
      | ChatMessageCreateOrConnectWithoutRoomInput
      | ChatMessageCreateOrConnectWithoutRoomInput[];
    createMany?: ChatMessageCreateManyRoomInputEnvelope;
    connect?: ChatMessageWhereUniqueInput | ChatMessageWhereUniqueInput[];
  };

  export type UserUpdateOneRequiredWithoutRoomsNestedInput = {
    create?: XOR<
      UserCreateWithoutRoomsInput,
      UserUncheckedCreateWithoutRoomsInput
    >;
    connectOrCreate?: UserCreateOrConnectWithoutRoomsInput;
    upsert?: UserUpsertWithoutRoomsInput;
    connect?: UserWhereUniqueInput;
    update?: XOR<
      XOR<
        UserUpdateToOneWithWhereWithoutRoomsInput,
        UserUpdateWithoutRoomsInput
      >,
      UserUncheckedUpdateWithoutRoomsInput
    >;
  };

  export type ChatMessageUpdateManyWithoutRoomNestedInput = {
    create?:
      | XOR<
          ChatMessageCreateWithoutRoomInput,
          ChatMessageUncheckedCreateWithoutRoomInput
        >
      | ChatMessageCreateWithoutRoomInput[]
      | ChatMessageUncheckedCreateWithoutRoomInput[];
    connectOrCreate?:
      | ChatMessageCreateOrConnectWithoutRoomInput
      | ChatMessageCreateOrConnectWithoutRoomInput[];
    upsert?:
      | ChatMessageUpsertWithWhereUniqueWithoutRoomInput
      | ChatMessageUpsertWithWhereUniqueWithoutRoomInput[];
    createMany?: ChatMessageCreateManyRoomInputEnvelope;
    set?: ChatMessageWhereUniqueInput | ChatMessageWhereUniqueInput[];
    disconnect?: ChatMessageWhereUniqueInput | ChatMessageWhereUniqueInput[];
    delete?: ChatMessageWhereUniqueInput | ChatMessageWhereUniqueInput[];
    connect?: ChatMessageWhereUniqueInput | ChatMessageWhereUniqueInput[];
    update?:
      | ChatMessageUpdateWithWhereUniqueWithoutRoomInput
      | ChatMessageUpdateWithWhereUniqueWithoutRoomInput[];
    updateMany?:
      | ChatMessageUpdateManyWithWhereWithoutRoomInput
      | ChatMessageUpdateManyWithWhereWithoutRoomInput[];
    deleteMany?: ChatMessageScalarWhereInput | ChatMessageScalarWhereInput[];
  };

  export type ChatMessageUncheckedUpdateManyWithoutRoomNestedInput = {
    create?:
      | XOR<
          ChatMessageCreateWithoutRoomInput,
          ChatMessageUncheckedCreateWithoutRoomInput
        >
      | ChatMessageCreateWithoutRoomInput[]
      | ChatMessageUncheckedCreateWithoutRoomInput[];
    connectOrCreate?:
      | ChatMessageCreateOrConnectWithoutRoomInput
      | ChatMessageCreateOrConnectWithoutRoomInput[];
    upsert?:
      | ChatMessageUpsertWithWhereUniqueWithoutRoomInput
      | ChatMessageUpsertWithWhereUniqueWithoutRoomInput[];
    createMany?: ChatMessageCreateManyRoomInputEnvelope;
    set?: ChatMessageWhereUniqueInput | ChatMessageWhereUniqueInput[];
    disconnect?: ChatMessageWhereUniqueInput | ChatMessageWhereUniqueInput[];
    delete?: ChatMessageWhereUniqueInput | ChatMessageWhereUniqueInput[];
    connect?: ChatMessageWhereUniqueInput | ChatMessageWhereUniqueInput[];
    update?:
      | ChatMessageUpdateWithWhereUniqueWithoutRoomInput
      | ChatMessageUpdateWithWhereUniqueWithoutRoomInput[];
    updateMany?:
      | ChatMessageUpdateManyWithWhereWithoutRoomInput
      | ChatMessageUpdateManyWithWhereWithoutRoomInput[];
    deleteMany?: ChatMessageScalarWhereInput | ChatMessageScalarWhereInput[];
  };

  export type RoomCreateNestedOneWithoutChatMessagesInput = {
    create?: XOR<
      RoomCreateWithoutChatMessagesInput,
      RoomUncheckedCreateWithoutChatMessagesInput
    >;
    connectOrCreate?: RoomCreateOrConnectWithoutChatMessagesInput;
    connect?: RoomWhereUniqueInput;
  };

  export type UserCreateNestedOneWithoutMessagesInput = {
    create?: XOR<
      UserCreateWithoutMessagesInput,
      UserUncheckedCreateWithoutMessagesInput
    >;
    connectOrCreate?: UserCreateOrConnectWithoutMessagesInput;
    connect?: UserWhereUniqueInput;
  };

  export type RoomUpdateOneRequiredWithoutChatMessagesNestedInput = {
    create?: XOR<
      RoomCreateWithoutChatMessagesInput,
      RoomUncheckedCreateWithoutChatMessagesInput
    >;
    connectOrCreate?: RoomCreateOrConnectWithoutChatMessagesInput;
    upsert?: RoomUpsertWithoutChatMessagesInput;
    connect?: RoomWhereUniqueInput;
    update?: XOR<
      XOR<
        RoomUpdateToOneWithWhereWithoutChatMessagesInput,
        RoomUpdateWithoutChatMessagesInput
      >,
      RoomUncheckedUpdateWithoutChatMessagesInput
    >;
  };

  export type UserUpdateOneRequiredWithoutMessagesNestedInput = {
    create?: XOR<
      UserCreateWithoutMessagesInput,
      UserUncheckedCreateWithoutMessagesInput
    >;
    connectOrCreate?: UserCreateOrConnectWithoutMessagesInput;
    upsert?: UserUpsertWithoutMessagesInput;
    connect?: UserWhereUniqueInput;
    update?: XOR<
      XOR<
        UserUpdateToOneWithWhereWithoutMessagesInput,
        UserUpdateWithoutMessagesInput
      >,
      UserUncheckedUpdateWithoutMessagesInput
    >;
  };

  export type WorkspaceMemberCreateNestedManyWithoutWorkspaceInput = {
    create?:
      | XOR<
          WorkspaceMemberCreateWithoutWorkspaceInput,
          WorkspaceMemberUncheckedCreateWithoutWorkspaceInput
        >
      | WorkspaceMemberCreateWithoutWorkspaceInput[]
      | WorkspaceMemberUncheckedCreateWithoutWorkspaceInput[];
    connectOrCreate?:
      | WorkspaceMemberCreateOrConnectWithoutWorkspaceInput
      | WorkspaceMemberCreateOrConnectWithoutWorkspaceInput[];
    createMany?: WorkspaceMemberCreateManyWorkspaceInputEnvelope;
    connect?:
      | WorkspaceMemberWhereUniqueInput
      | WorkspaceMemberWhereUniqueInput[];
  };

  export type ProjectCreateNestedManyWithoutWorkspaceInput = {
    create?:
      | XOR<
          ProjectCreateWithoutWorkspaceInput,
          ProjectUncheckedCreateWithoutWorkspaceInput
        >
      | ProjectCreateWithoutWorkspaceInput[]
      | ProjectUncheckedCreateWithoutWorkspaceInput[];
    connectOrCreate?:
      | ProjectCreateOrConnectWithoutWorkspaceInput
      | ProjectCreateOrConnectWithoutWorkspaceInput[];
    createMany?: ProjectCreateManyWorkspaceInputEnvelope;
    connect?: ProjectWhereUniqueInput | ProjectWhereUniqueInput[];
  };

  export type WorkspaceMemberUncheckedCreateNestedManyWithoutWorkspaceInput = {
    create?:
      | XOR<
          WorkspaceMemberCreateWithoutWorkspaceInput,
          WorkspaceMemberUncheckedCreateWithoutWorkspaceInput
        >
      | WorkspaceMemberCreateWithoutWorkspaceInput[]
      | WorkspaceMemberUncheckedCreateWithoutWorkspaceInput[];
    connectOrCreate?:
      | WorkspaceMemberCreateOrConnectWithoutWorkspaceInput
      | WorkspaceMemberCreateOrConnectWithoutWorkspaceInput[];
    createMany?: WorkspaceMemberCreateManyWorkspaceInputEnvelope;
    connect?:
      | WorkspaceMemberWhereUniqueInput
      | WorkspaceMemberWhereUniqueInput[];
  };

  export type ProjectUncheckedCreateNestedManyWithoutWorkspaceInput = {
    create?:
      | XOR<
          ProjectCreateWithoutWorkspaceInput,
          ProjectUncheckedCreateWithoutWorkspaceInput
        >
      | ProjectCreateWithoutWorkspaceInput[]
      | ProjectUncheckedCreateWithoutWorkspaceInput[];
    connectOrCreate?:
      | ProjectCreateOrConnectWithoutWorkspaceInput
      | ProjectCreateOrConnectWithoutWorkspaceInput[];
    createMany?: ProjectCreateManyWorkspaceInputEnvelope;
    connect?: ProjectWhereUniqueInput | ProjectWhereUniqueInput[];
  };

  export type WorkspaceMemberUpdateManyWithoutWorkspaceNestedInput = {
    create?:
      | XOR<
          WorkspaceMemberCreateWithoutWorkspaceInput,
          WorkspaceMemberUncheckedCreateWithoutWorkspaceInput
        >
      | WorkspaceMemberCreateWithoutWorkspaceInput[]
      | WorkspaceMemberUncheckedCreateWithoutWorkspaceInput[];
    connectOrCreate?:
      | WorkspaceMemberCreateOrConnectWithoutWorkspaceInput
      | WorkspaceMemberCreateOrConnectWithoutWorkspaceInput[];
    upsert?:
      | WorkspaceMemberUpsertWithWhereUniqueWithoutWorkspaceInput
      | WorkspaceMemberUpsertWithWhereUniqueWithoutWorkspaceInput[];
    createMany?: WorkspaceMemberCreateManyWorkspaceInputEnvelope;
    set?: WorkspaceMemberWhereUniqueInput | WorkspaceMemberWhereUniqueInput[];
    disconnect?:
      | WorkspaceMemberWhereUniqueInput
      | WorkspaceMemberWhereUniqueInput[];
    delete?:
      | WorkspaceMemberWhereUniqueInput
      | WorkspaceMemberWhereUniqueInput[];
    connect?:
      | WorkspaceMemberWhereUniqueInput
      | WorkspaceMemberWhereUniqueInput[];
    update?:
      | WorkspaceMemberUpdateWithWhereUniqueWithoutWorkspaceInput
      | WorkspaceMemberUpdateWithWhereUniqueWithoutWorkspaceInput[];
    updateMany?:
      | WorkspaceMemberUpdateManyWithWhereWithoutWorkspaceInput
      | WorkspaceMemberUpdateManyWithWhereWithoutWorkspaceInput[];
    deleteMany?:
      | WorkspaceMemberScalarWhereInput
      | WorkspaceMemberScalarWhereInput[];
  };

  export type ProjectUpdateManyWithoutWorkspaceNestedInput = {
    create?:
      | XOR<
          ProjectCreateWithoutWorkspaceInput,
          ProjectUncheckedCreateWithoutWorkspaceInput
        >
      | ProjectCreateWithoutWorkspaceInput[]
      | ProjectUncheckedCreateWithoutWorkspaceInput[];
    connectOrCreate?:
      | ProjectCreateOrConnectWithoutWorkspaceInput
      | ProjectCreateOrConnectWithoutWorkspaceInput[];
    upsert?:
      | ProjectUpsertWithWhereUniqueWithoutWorkspaceInput
      | ProjectUpsertWithWhereUniqueWithoutWorkspaceInput[];
    createMany?: ProjectCreateManyWorkspaceInputEnvelope;
    set?: ProjectWhereUniqueInput | ProjectWhereUniqueInput[];
    disconnect?: ProjectWhereUniqueInput | ProjectWhereUniqueInput[];
    delete?: ProjectWhereUniqueInput | ProjectWhereUniqueInput[];
    connect?: ProjectWhereUniqueInput | ProjectWhereUniqueInput[];
    update?:
      | ProjectUpdateWithWhereUniqueWithoutWorkspaceInput
      | ProjectUpdateWithWhereUniqueWithoutWorkspaceInput[];
    updateMany?:
      | ProjectUpdateManyWithWhereWithoutWorkspaceInput
      | ProjectUpdateManyWithWhereWithoutWorkspaceInput[];
    deleteMany?: ProjectScalarWhereInput | ProjectScalarWhereInput[];
  };

  export type WorkspaceMemberUncheckedUpdateManyWithoutWorkspaceNestedInput = {
    create?:
      | XOR<
          WorkspaceMemberCreateWithoutWorkspaceInput,
          WorkspaceMemberUncheckedCreateWithoutWorkspaceInput
        >
      | WorkspaceMemberCreateWithoutWorkspaceInput[]
      | WorkspaceMemberUncheckedCreateWithoutWorkspaceInput[];
    connectOrCreate?:
      | WorkspaceMemberCreateOrConnectWithoutWorkspaceInput
      | WorkspaceMemberCreateOrConnectWithoutWorkspaceInput[];
    upsert?:
      | WorkspaceMemberUpsertWithWhereUniqueWithoutWorkspaceInput
      | WorkspaceMemberUpsertWithWhereUniqueWithoutWorkspaceInput[];
    createMany?: WorkspaceMemberCreateManyWorkspaceInputEnvelope;
    set?: WorkspaceMemberWhereUniqueInput | WorkspaceMemberWhereUniqueInput[];
    disconnect?:
      | WorkspaceMemberWhereUniqueInput
      | WorkspaceMemberWhereUniqueInput[];
    delete?:
      | WorkspaceMemberWhereUniqueInput
      | WorkspaceMemberWhereUniqueInput[];
    connect?:
      | WorkspaceMemberWhereUniqueInput
      | WorkspaceMemberWhereUniqueInput[];
    update?:
      | WorkspaceMemberUpdateWithWhereUniqueWithoutWorkspaceInput
      | WorkspaceMemberUpdateWithWhereUniqueWithoutWorkspaceInput[];
    updateMany?:
      | WorkspaceMemberUpdateManyWithWhereWithoutWorkspaceInput
      | WorkspaceMemberUpdateManyWithWhereWithoutWorkspaceInput[];
    deleteMany?:
      | WorkspaceMemberScalarWhereInput
      | WorkspaceMemberScalarWhereInput[];
  };

  export type ProjectUncheckedUpdateManyWithoutWorkspaceNestedInput = {
    create?:
      | XOR<
          ProjectCreateWithoutWorkspaceInput,
          ProjectUncheckedCreateWithoutWorkspaceInput
        >
      | ProjectCreateWithoutWorkspaceInput[]
      | ProjectUncheckedCreateWithoutWorkspaceInput[];
    connectOrCreate?:
      | ProjectCreateOrConnectWithoutWorkspaceInput
      | ProjectCreateOrConnectWithoutWorkspaceInput[];
    upsert?:
      | ProjectUpsertWithWhereUniqueWithoutWorkspaceInput
      | ProjectUpsertWithWhereUniqueWithoutWorkspaceInput[];
    createMany?: ProjectCreateManyWorkspaceInputEnvelope;
    set?: ProjectWhereUniqueInput | ProjectWhereUniqueInput[];
    disconnect?: ProjectWhereUniqueInput | ProjectWhereUniqueInput[];
    delete?: ProjectWhereUniqueInput | ProjectWhereUniqueInput[];
    connect?: ProjectWhereUniqueInput | ProjectWhereUniqueInput[];
    update?:
      | ProjectUpdateWithWhereUniqueWithoutWorkspaceInput
      | ProjectUpdateWithWhereUniqueWithoutWorkspaceInput[];
    updateMany?:
      | ProjectUpdateManyWithWhereWithoutWorkspaceInput
      | ProjectUpdateManyWithWhereWithoutWorkspaceInput[];
    deleteMany?: ProjectScalarWhereInput | ProjectScalarWhereInput[];
  };

  export type WorkspaceCreateNestedOneWithoutMembersInput = {
    create?: XOR<
      WorkspaceCreateWithoutMembersInput,
      WorkspaceUncheckedCreateWithoutMembersInput
    >;
    connectOrCreate?: WorkspaceCreateOrConnectWithoutMembersInput;
    connect?: WorkspaceWhereUniqueInput;
  };

  export type UserCreateNestedOneWithoutWorkspacesInput = {
    create?: XOR<
      UserCreateWithoutWorkspacesInput,
      UserUncheckedCreateWithoutWorkspacesInput
    >;
    connectOrCreate?: UserCreateOrConnectWithoutWorkspacesInput;
    connect?: UserWhereUniqueInput;
  };

  export type WorkspaceUpdateOneRequiredWithoutMembersNestedInput = {
    create?: XOR<
      WorkspaceCreateWithoutMembersInput,
      WorkspaceUncheckedCreateWithoutMembersInput
    >;
    connectOrCreate?: WorkspaceCreateOrConnectWithoutMembersInput;
    upsert?: WorkspaceUpsertWithoutMembersInput;
    connect?: WorkspaceWhereUniqueInput;
    update?: XOR<
      XOR<
        WorkspaceUpdateToOneWithWhereWithoutMembersInput,
        WorkspaceUpdateWithoutMembersInput
      >,
      WorkspaceUncheckedUpdateWithoutMembersInput
    >;
  };

  export type UserUpdateOneRequiredWithoutWorkspacesNestedInput = {
    create?: XOR<
      UserCreateWithoutWorkspacesInput,
      UserUncheckedCreateWithoutWorkspacesInput
    >;
    connectOrCreate?: UserCreateOrConnectWithoutWorkspacesInput;
    upsert?: UserUpsertWithoutWorkspacesInput;
    connect?: UserWhereUniqueInput;
    update?: XOR<
      XOR<
        UserUpdateToOneWithWhereWithoutWorkspacesInput,
        UserUpdateWithoutWorkspacesInput
      >,
      UserUncheckedUpdateWithoutWorkspacesInput
    >;
  };

  export type WorkspaceCreateNestedOneWithoutProjectsInput = {
    create?: XOR<
      WorkspaceCreateWithoutProjectsInput,
      WorkspaceUncheckedCreateWithoutProjectsInput
    >;
    connectOrCreate?: WorkspaceCreateOrConnectWithoutProjectsInput;
    connect?: WorkspaceWhereUniqueInput;
  };

  export type TaskCreateNestedManyWithoutProjectInput = {
    create?:
      | XOR<
          TaskCreateWithoutProjectInput,
          TaskUncheckedCreateWithoutProjectInput
        >
      | TaskCreateWithoutProjectInput[]
      | TaskUncheckedCreateWithoutProjectInput[];
    connectOrCreate?:
      | TaskCreateOrConnectWithoutProjectInput
      | TaskCreateOrConnectWithoutProjectInput[];
    createMany?: TaskCreateManyProjectInputEnvelope;
    connect?: TaskWhereUniqueInput | TaskWhereUniqueInput[];
  };

  export type SprintCreateNestedManyWithoutProjectInput = {
    create?:
      | XOR<
          SprintCreateWithoutProjectInput,
          SprintUncheckedCreateWithoutProjectInput
        >
      | SprintCreateWithoutProjectInput[]
      | SprintUncheckedCreateWithoutProjectInput[];
    connectOrCreate?:
      | SprintCreateOrConnectWithoutProjectInput
      | SprintCreateOrConnectWithoutProjectInput[];
    createMany?: SprintCreateManyProjectInputEnvelope;
    connect?: SprintWhereUniqueInput | SprintWhereUniqueInput[];
  };

  export type MilestoneCreateNestedManyWithoutProjectInput = {
    create?:
      | XOR<
          MilestoneCreateWithoutProjectInput,
          MilestoneUncheckedCreateWithoutProjectInput
        >
      | MilestoneCreateWithoutProjectInput[]
      | MilestoneUncheckedCreateWithoutProjectInput[];
    connectOrCreate?:
      | MilestoneCreateOrConnectWithoutProjectInput
      | MilestoneCreateOrConnectWithoutProjectInput[];
    createMany?: MilestoneCreateManyProjectInputEnvelope;
    connect?: MilestoneWhereUniqueInput | MilestoneWhereUniqueInput[];
  };

  export type TaskUncheckedCreateNestedManyWithoutProjectInput = {
    create?:
      | XOR<
          TaskCreateWithoutProjectInput,
          TaskUncheckedCreateWithoutProjectInput
        >
      | TaskCreateWithoutProjectInput[]
      | TaskUncheckedCreateWithoutProjectInput[];
    connectOrCreate?:
      | TaskCreateOrConnectWithoutProjectInput
      | TaskCreateOrConnectWithoutProjectInput[];
    createMany?: TaskCreateManyProjectInputEnvelope;
    connect?: TaskWhereUniqueInput | TaskWhereUniqueInput[];
  };

  export type SprintUncheckedCreateNestedManyWithoutProjectInput = {
    create?:
      | XOR<
          SprintCreateWithoutProjectInput,
          SprintUncheckedCreateWithoutProjectInput
        >
      | SprintCreateWithoutProjectInput[]
      | SprintUncheckedCreateWithoutProjectInput[];
    connectOrCreate?:
      | SprintCreateOrConnectWithoutProjectInput
      | SprintCreateOrConnectWithoutProjectInput[];
    createMany?: SprintCreateManyProjectInputEnvelope;
    connect?: SprintWhereUniqueInput | SprintWhereUniqueInput[];
  };

  export type MilestoneUncheckedCreateNestedManyWithoutProjectInput = {
    create?:
      | XOR<
          MilestoneCreateWithoutProjectInput,
          MilestoneUncheckedCreateWithoutProjectInput
        >
      | MilestoneCreateWithoutProjectInput[]
      | MilestoneUncheckedCreateWithoutProjectInput[];
    connectOrCreate?:
      | MilestoneCreateOrConnectWithoutProjectInput
      | MilestoneCreateOrConnectWithoutProjectInput[];
    createMany?: MilestoneCreateManyProjectInputEnvelope;
    connect?: MilestoneWhereUniqueInput | MilestoneWhereUniqueInput[];
  };

  export type EnumProjectStatusFieldUpdateOperationsInput = {
    set?: $Enums.ProjectStatus;
  };

  export type IntFieldUpdateOperationsInput = {
    set?: number;
    increment?: number;
    decrement?: number;
    multiply?: number;
    divide?: number;
  };

  export type WorkspaceUpdateOneRequiredWithoutProjectsNestedInput = {
    create?: XOR<
      WorkspaceCreateWithoutProjectsInput,
      WorkspaceUncheckedCreateWithoutProjectsInput
    >;
    connectOrCreate?: WorkspaceCreateOrConnectWithoutProjectsInput;
    upsert?: WorkspaceUpsertWithoutProjectsInput;
    connect?: WorkspaceWhereUniqueInput;
    update?: XOR<
      XOR<
        WorkspaceUpdateToOneWithWhereWithoutProjectsInput,
        WorkspaceUpdateWithoutProjectsInput
      >,
      WorkspaceUncheckedUpdateWithoutProjectsInput
    >;
  };

  export type TaskUpdateManyWithoutProjectNestedInput = {
    create?:
      | XOR<
          TaskCreateWithoutProjectInput,
          TaskUncheckedCreateWithoutProjectInput
        >
      | TaskCreateWithoutProjectInput[]
      | TaskUncheckedCreateWithoutProjectInput[];
    connectOrCreate?:
      | TaskCreateOrConnectWithoutProjectInput
      | TaskCreateOrConnectWithoutProjectInput[];
    upsert?:
      | TaskUpsertWithWhereUniqueWithoutProjectInput
      | TaskUpsertWithWhereUniqueWithoutProjectInput[];
    createMany?: TaskCreateManyProjectInputEnvelope;
    set?: TaskWhereUniqueInput | TaskWhereUniqueInput[];
    disconnect?: TaskWhereUniqueInput | TaskWhereUniqueInput[];
    delete?: TaskWhereUniqueInput | TaskWhereUniqueInput[];
    connect?: TaskWhereUniqueInput | TaskWhereUniqueInput[];
    update?:
      | TaskUpdateWithWhereUniqueWithoutProjectInput
      | TaskUpdateWithWhereUniqueWithoutProjectInput[];
    updateMany?:
      | TaskUpdateManyWithWhereWithoutProjectInput
      | TaskUpdateManyWithWhereWithoutProjectInput[];
    deleteMany?: TaskScalarWhereInput | TaskScalarWhereInput[];
  };

  export type SprintUpdateManyWithoutProjectNestedInput = {
    create?:
      | XOR<
          SprintCreateWithoutProjectInput,
          SprintUncheckedCreateWithoutProjectInput
        >
      | SprintCreateWithoutProjectInput[]
      | SprintUncheckedCreateWithoutProjectInput[];
    connectOrCreate?:
      | SprintCreateOrConnectWithoutProjectInput
      | SprintCreateOrConnectWithoutProjectInput[];
    upsert?:
      | SprintUpsertWithWhereUniqueWithoutProjectInput
      | SprintUpsertWithWhereUniqueWithoutProjectInput[];
    createMany?: SprintCreateManyProjectInputEnvelope;
    set?: SprintWhereUniqueInput | SprintWhereUniqueInput[];
    disconnect?: SprintWhereUniqueInput | SprintWhereUniqueInput[];
    delete?: SprintWhereUniqueInput | SprintWhereUniqueInput[];
    connect?: SprintWhereUniqueInput | SprintWhereUniqueInput[];
    update?:
      | SprintUpdateWithWhereUniqueWithoutProjectInput
      | SprintUpdateWithWhereUniqueWithoutProjectInput[];
    updateMany?:
      | SprintUpdateManyWithWhereWithoutProjectInput
      | SprintUpdateManyWithWhereWithoutProjectInput[];
    deleteMany?: SprintScalarWhereInput | SprintScalarWhereInput[];
  };

  export type MilestoneUpdateManyWithoutProjectNestedInput = {
    create?:
      | XOR<
          MilestoneCreateWithoutProjectInput,
          MilestoneUncheckedCreateWithoutProjectInput
        >
      | MilestoneCreateWithoutProjectInput[]
      | MilestoneUncheckedCreateWithoutProjectInput[];
    connectOrCreate?:
      | MilestoneCreateOrConnectWithoutProjectInput
      | MilestoneCreateOrConnectWithoutProjectInput[];
    upsert?:
      | MilestoneUpsertWithWhereUniqueWithoutProjectInput
      | MilestoneUpsertWithWhereUniqueWithoutProjectInput[];
    createMany?: MilestoneCreateManyProjectInputEnvelope;
    set?: MilestoneWhereUniqueInput | MilestoneWhereUniqueInput[];
    disconnect?: MilestoneWhereUniqueInput | MilestoneWhereUniqueInput[];
    delete?: MilestoneWhereUniqueInput | MilestoneWhereUniqueInput[];
    connect?: MilestoneWhereUniqueInput | MilestoneWhereUniqueInput[];
    update?:
      | MilestoneUpdateWithWhereUniqueWithoutProjectInput
      | MilestoneUpdateWithWhereUniqueWithoutProjectInput[];
    updateMany?:
      | MilestoneUpdateManyWithWhereWithoutProjectInput
      | MilestoneUpdateManyWithWhereWithoutProjectInput[];
    deleteMany?: MilestoneScalarWhereInput | MilestoneScalarWhereInput[];
  };

  export type TaskUncheckedUpdateManyWithoutProjectNestedInput = {
    create?:
      | XOR<
          TaskCreateWithoutProjectInput,
          TaskUncheckedCreateWithoutProjectInput
        >
      | TaskCreateWithoutProjectInput[]
      | TaskUncheckedCreateWithoutProjectInput[];
    connectOrCreate?:
      | TaskCreateOrConnectWithoutProjectInput
      | TaskCreateOrConnectWithoutProjectInput[];
    upsert?:
      | TaskUpsertWithWhereUniqueWithoutProjectInput
      | TaskUpsertWithWhereUniqueWithoutProjectInput[];
    createMany?: TaskCreateManyProjectInputEnvelope;
    set?: TaskWhereUniqueInput | TaskWhereUniqueInput[];
    disconnect?: TaskWhereUniqueInput | TaskWhereUniqueInput[];
    delete?: TaskWhereUniqueInput | TaskWhereUniqueInput[];
    connect?: TaskWhereUniqueInput | TaskWhereUniqueInput[];
    update?:
      | TaskUpdateWithWhereUniqueWithoutProjectInput
      | TaskUpdateWithWhereUniqueWithoutProjectInput[];
    updateMany?:
      | TaskUpdateManyWithWhereWithoutProjectInput
      | TaskUpdateManyWithWhereWithoutProjectInput[];
    deleteMany?: TaskScalarWhereInput | TaskScalarWhereInput[];
  };

  export type SprintUncheckedUpdateManyWithoutProjectNestedInput = {
    create?:
      | XOR<
          SprintCreateWithoutProjectInput,
          SprintUncheckedCreateWithoutProjectInput
        >
      | SprintCreateWithoutProjectInput[]
      | SprintUncheckedCreateWithoutProjectInput[];
    connectOrCreate?:
      | SprintCreateOrConnectWithoutProjectInput
      | SprintCreateOrConnectWithoutProjectInput[];
    upsert?:
      | SprintUpsertWithWhereUniqueWithoutProjectInput
      | SprintUpsertWithWhereUniqueWithoutProjectInput[];
    createMany?: SprintCreateManyProjectInputEnvelope;
    set?: SprintWhereUniqueInput | SprintWhereUniqueInput[];
    disconnect?: SprintWhereUniqueInput | SprintWhereUniqueInput[];
    delete?: SprintWhereUniqueInput | SprintWhereUniqueInput[];
    connect?: SprintWhereUniqueInput | SprintWhereUniqueInput[];
    update?:
      | SprintUpdateWithWhereUniqueWithoutProjectInput
      | SprintUpdateWithWhereUniqueWithoutProjectInput[];
    updateMany?:
      | SprintUpdateManyWithWhereWithoutProjectInput
      | SprintUpdateManyWithWhereWithoutProjectInput[];
    deleteMany?: SprintScalarWhereInput | SprintScalarWhereInput[];
  };

  export type MilestoneUncheckedUpdateManyWithoutProjectNestedInput = {
    create?:
      | XOR<
          MilestoneCreateWithoutProjectInput,
          MilestoneUncheckedCreateWithoutProjectInput
        >
      | MilestoneCreateWithoutProjectInput[]
      | MilestoneUncheckedCreateWithoutProjectInput[];
    connectOrCreate?:
      | MilestoneCreateOrConnectWithoutProjectInput
      | MilestoneCreateOrConnectWithoutProjectInput[];
    upsert?:
      | MilestoneUpsertWithWhereUniqueWithoutProjectInput
      | MilestoneUpsertWithWhereUniqueWithoutProjectInput[];
    createMany?: MilestoneCreateManyProjectInputEnvelope;
    set?: MilestoneWhereUniqueInput | MilestoneWhereUniqueInput[];
    disconnect?: MilestoneWhereUniqueInput | MilestoneWhereUniqueInput[];
    delete?: MilestoneWhereUniqueInput | MilestoneWhereUniqueInput[];
    connect?: MilestoneWhereUniqueInput | MilestoneWhereUniqueInput[];
    update?:
      | MilestoneUpdateWithWhereUniqueWithoutProjectInput
      | MilestoneUpdateWithWhereUniqueWithoutProjectInput[];
    updateMany?:
      | MilestoneUpdateManyWithWhereWithoutProjectInput
      | MilestoneUpdateManyWithWhereWithoutProjectInput[];
    deleteMany?: MilestoneScalarWhereInput | MilestoneScalarWhereInput[];
  };

  export type ProjectCreateNestedOneWithoutTasksInput = {
    create?: XOR<
      ProjectCreateWithoutTasksInput,
      ProjectUncheckedCreateWithoutTasksInput
    >;
    connectOrCreate?: ProjectCreateOrConnectWithoutTasksInput;
    connect?: ProjectWhereUniqueInput;
  };

  export type SprintCreateNestedOneWithoutTasksInput = {
    create?: XOR<
      SprintCreateWithoutTasksInput,
      SprintUncheckedCreateWithoutTasksInput
    >;
    connectOrCreate?: SprintCreateOrConnectWithoutTasksInput;
    connect?: SprintWhereUniqueInput;
  };

  export type UserCreateNestedOneWithoutAssignedTasksInput = {
    create?: XOR<
      UserCreateWithoutAssignedTasksInput,
      UserUncheckedCreateWithoutAssignedTasksInput
    >;
    connectOrCreate?: UserCreateOrConnectWithoutAssignedTasksInput;
    connect?: UserWhereUniqueInput;
  };

  export type UserCreateNestedOneWithoutCreatedTasksInput = {
    create?: XOR<
      UserCreateWithoutCreatedTasksInput,
      UserUncheckedCreateWithoutCreatedTasksInput
    >;
    connectOrCreate?: UserCreateOrConnectWithoutCreatedTasksInput;
    connect?: UserWhereUniqueInput;
  };

  export type TaskTagCreateNestedManyWithoutTaskInput = {
    create?:
      | XOR<
          TaskTagCreateWithoutTaskInput,
          TaskTagUncheckedCreateWithoutTaskInput
        >
      | TaskTagCreateWithoutTaskInput[]
      | TaskTagUncheckedCreateWithoutTaskInput[];
    connectOrCreate?:
      | TaskTagCreateOrConnectWithoutTaskInput
      | TaskTagCreateOrConnectWithoutTaskInput[];
    createMany?: TaskTagCreateManyTaskInputEnvelope;
    connect?: TaskTagWhereUniqueInput | TaskTagWhereUniqueInput[];
  };

  export type ActivityCreateNestedManyWithoutTaskInput = {
    create?:
      | XOR<
          ActivityCreateWithoutTaskInput,
          ActivityUncheckedCreateWithoutTaskInput
        >
      | ActivityCreateWithoutTaskInput[]
      | ActivityUncheckedCreateWithoutTaskInput[];
    connectOrCreate?:
      | ActivityCreateOrConnectWithoutTaskInput
      | ActivityCreateOrConnectWithoutTaskInput[];
    createMany?: ActivityCreateManyTaskInputEnvelope;
    connect?: ActivityWhereUniqueInput | ActivityWhereUniqueInput[];
  };

  export type TaskTagUncheckedCreateNestedManyWithoutTaskInput = {
    create?:
      | XOR<
          TaskTagCreateWithoutTaskInput,
          TaskTagUncheckedCreateWithoutTaskInput
        >
      | TaskTagCreateWithoutTaskInput[]
      | TaskTagUncheckedCreateWithoutTaskInput[];
    connectOrCreate?:
      | TaskTagCreateOrConnectWithoutTaskInput
      | TaskTagCreateOrConnectWithoutTaskInput[];
    createMany?: TaskTagCreateManyTaskInputEnvelope;
    connect?: TaskTagWhereUniqueInput | TaskTagWhereUniqueInput[];
  };

  export type ActivityUncheckedCreateNestedManyWithoutTaskInput = {
    create?:
      | XOR<
          ActivityCreateWithoutTaskInput,
          ActivityUncheckedCreateWithoutTaskInput
        >
      | ActivityCreateWithoutTaskInput[]
      | ActivityUncheckedCreateWithoutTaskInput[];
    connectOrCreate?:
      | ActivityCreateOrConnectWithoutTaskInput
      | ActivityCreateOrConnectWithoutTaskInput[];
    createMany?: ActivityCreateManyTaskInputEnvelope;
    connect?: ActivityWhereUniqueInput | ActivityWhereUniqueInput[];
  };

  export type EnumTaskTypeFieldUpdateOperationsInput = {
    set?: $Enums.TaskType;
  };

  export type EnumTaskStatusFieldUpdateOperationsInput = {
    set?: $Enums.TaskStatus;
  };

  export type EnumPriorityFieldUpdateOperationsInput = {
    set?: $Enums.Priority;
  };

  export type NullableIntFieldUpdateOperationsInput = {
    set?: number | null;
    increment?: number;
    decrement?: number;
    multiply?: number;
    divide?: number;
  };

  export type NullableDateTimeFieldUpdateOperationsInput = {
    set?: Date | string | null;
  };

  export type ProjectUpdateOneRequiredWithoutTasksNestedInput = {
    create?: XOR<
      ProjectCreateWithoutTasksInput,
      ProjectUncheckedCreateWithoutTasksInput
    >;
    connectOrCreate?: ProjectCreateOrConnectWithoutTasksInput;
    upsert?: ProjectUpsertWithoutTasksInput;
    connect?: ProjectWhereUniqueInput;
    update?: XOR<
      XOR<
        ProjectUpdateToOneWithWhereWithoutTasksInput,
        ProjectUpdateWithoutTasksInput
      >,
      ProjectUncheckedUpdateWithoutTasksInput
    >;
  };

  export type SprintUpdateOneWithoutTasksNestedInput = {
    create?: XOR<
      SprintCreateWithoutTasksInput,
      SprintUncheckedCreateWithoutTasksInput
    >;
    connectOrCreate?: SprintCreateOrConnectWithoutTasksInput;
    upsert?: SprintUpsertWithoutTasksInput;
    disconnect?: SprintWhereInput | boolean;
    delete?: SprintWhereInput | boolean;
    connect?: SprintWhereUniqueInput;
    update?: XOR<
      XOR<
        SprintUpdateToOneWithWhereWithoutTasksInput,
        SprintUpdateWithoutTasksInput
      >,
      SprintUncheckedUpdateWithoutTasksInput
    >;
  };

  export type UserUpdateOneWithoutAssignedTasksNestedInput = {
    create?: XOR<
      UserCreateWithoutAssignedTasksInput,
      UserUncheckedCreateWithoutAssignedTasksInput
    >;
    connectOrCreate?: UserCreateOrConnectWithoutAssignedTasksInput;
    upsert?: UserUpsertWithoutAssignedTasksInput;
    disconnect?: UserWhereInput | boolean;
    delete?: UserWhereInput | boolean;
    connect?: UserWhereUniqueInput;
    update?: XOR<
      XOR<
        UserUpdateToOneWithWhereWithoutAssignedTasksInput,
        UserUpdateWithoutAssignedTasksInput
      >,
      UserUncheckedUpdateWithoutAssignedTasksInput
    >;
  };

  export type UserUpdateOneRequiredWithoutCreatedTasksNestedInput = {
    create?: XOR<
      UserCreateWithoutCreatedTasksInput,
      UserUncheckedCreateWithoutCreatedTasksInput
    >;
    connectOrCreate?: UserCreateOrConnectWithoutCreatedTasksInput;
    upsert?: UserUpsertWithoutCreatedTasksInput;
    connect?: UserWhereUniqueInput;
    update?: XOR<
      XOR<
        UserUpdateToOneWithWhereWithoutCreatedTasksInput,
        UserUpdateWithoutCreatedTasksInput
      >,
      UserUncheckedUpdateWithoutCreatedTasksInput
    >;
  };

  export type TaskTagUpdateManyWithoutTaskNestedInput = {
    create?:
      | XOR<
          TaskTagCreateWithoutTaskInput,
          TaskTagUncheckedCreateWithoutTaskInput
        >
      | TaskTagCreateWithoutTaskInput[]
      | TaskTagUncheckedCreateWithoutTaskInput[];
    connectOrCreate?:
      | TaskTagCreateOrConnectWithoutTaskInput
      | TaskTagCreateOrConnectWithoutTaskInput[];
    upsert?:
      | TaskTagUpsertWithWhereUniqueWithoutTaskInput
      | TaskTagUpsertWithWhereUniqueWithoutTaskInput[];
    createMany?: TaskTagCreateManyTaskInputEnvelope;
    set?: TaskTagWhereUniqueInput | TaskTagWhereUniqueInput[];
    disconnect?: TaskTagWhereUniqueInput | TaskTagWhereUniqueInput[];
    delete?: TaskTagWhereUniqueInput | TaskTagWhereUniqueInput[];
    connect?: TaskTagWhereUniqueInput | TaskTagWhereUniqueInput[];
    update?:
      | TaskTagUpdateWithWhereUniqueWithoutTaskInput
      | TaskTagUpdateWithWhereUniqueWithoutTaskInput[];
    updateMany?:
      | TaskTagUpdateManyWithWhereWithoutTaskInput
      | TaskTagUpdateManyWithWhereWithoutTaskInput[];
    deleteMany?: TaskTagScalarWhereInput | TaskTagScalarWhereInput[];
  };

  export type ActivityUpdateManyWithoutTaskNestedInput = {
    create?:
      | XOR<
          ActivityCreateWithoutTaskInput,
          ActivityUncheckedCreateWithoutTaskInput
        >
      | ActivityCreateWithoutTaskInput[]
      | ActivityUncheckedCreateWithoutTaskInput[];
    connectOrCreate?:
      | ActivityCreateOrConnectWithoutTaskInput
      | ActivityCreateOrConnectWithoutTaskInput[];
    upsert?:
      | ActivityUpsertWithWhereUniqueWithoutTaskInput
      | ActivityUpsertWithWhereUniqueWithoutTaskInput[];
    createMany?: ActivityCreateManyTaskInputEnvelope;
    set?: ActivityWhereUniqueInput | ActivityWhereUniqueInput[];
    disconnect?: ActivityWhereUniqueInput | ActivityWhereUniqueInput[];
    delete?: ActivityWhereUniqueInput | ActivityWhereUniqueInput[];
    connect?: ActivityWhereUniqueInput | ActivityWhereUniqueInput[];
    update?:
      | ActivityUpdateWithWhereUniqueWithoutTaskInput
      | ActivityUpdateWithWhereUniqueWithoutTaskInput[];
    updateMany?:
      | ActivityUpdateManyWithWhereWithoutTaskInput
      | ActivityUpdateManyWithWhereWithoutTaskInput[];
    deleteMany?: ActivityScalarWhereInput | ActivityScalarWhereInput[];
  };

  export type TaskTagUncheckedUpdateManyWithoutTaskNestedInput = {
    create?:
      | XOR<
          TaskTagCreateWithoutTaskInput,
          TaskTagUncheckedCreateWithoutTaskInput
        >
      | TaskTagCreateWithoutTaskInput[]
      | TaskTagUncheckedCreateWithoutTaskInput[];
    connectOrCreate?:
      | TaskTagCreateOrConnectWithoutTaskInput
      | TaskTagCreateOrConnectWithoutTaskInput[];
    upsert?:
      | TaskTagUpsertWithWhereUniqueWithoutTaskInput
      | TaskTagUpsertWithWhereUniqueWithoutTaskInput[];
    createMany?: TaskTagCreateManyTaskInputEnvelope;
    set?: TaskTagWhereUniqueInput | TaskTagWhereUniqueInput[];
    disconnect?: TaskTagWhereUniqueInput | TaskTagWhereUniqueInput[];
    delete?: TaskTagWhereUniqueInput | TaskTagWhereUniqueInput[];
    connect?: TaskTagWhereUniqueInput | TaskTagWhereUniqueInput[];
    update?:
      | TaskTagUpdateWithWhereUniqueWithoutTaskInput
      | TaskTagUpdateWithWhereUniqueWithoutTaskInput[];
    updateMany?:
      | TaskTagUpdateManyWithWhereWithoutTaskInput
      | TaskTagUpdateManyWithWhereWithoutTaskInput[];
    deleteMany?: TaskTagScalarWhereInput | TaskTagScalarWhereInput[];
  };

  export type ActivityUncheckedUpdateManyWithoutTaskNestedInput = {
    create?:
      | XOR<
          ActivityCreateWithoutTaskInput,
          ActivityUncheckedCreateWithoutTaskInput
        >
      | ActivityCreateWithoutTaskInput[]
      | ActivityUncheckedCreateWithoutTaskInput[];
    connectOrCreate?:
      | ActivityCreateOrConnectWithoutTaskInput
      | ActivityCreateOrConnectWithoutTaskInput[];
    upsert?:
      | ActivityUpsertWithWhereUniqueWithoutTaskInput
      | ActivityUpsertWithWhereUniqueWithoutTaskInput[];
    createMany?: ActivityCreateManyTaskInputEnvelope;
    set?: ActivityWhereUniqueInput | ActivityWhereUniqueInput[];
    disconnect?: ActivityWhereUniqueInput | ActivityWhereUniqueInput[];
    delete?: ActivityWhereUniqueInput | ActivityWhereUniqueInput[];
    connect?: ActivityWhereUniqueInput | ActivityWhereUniqueInput[];
    update?:
      | ActivityUpdateWithWhereUniqueWithoutTaskInput
      | ActivityUpdateWithWhereUniqueWithoutTaskInput[];
    updateMany?:
      | ActivityUpdateManyWithWhereWithoutTaskInput
      | ActivityUpdateManyWithWhereWithoutTaskInput[];
    deleteMany?: ActivityScalarWhereInput | ActivityScalarWhereInput[];
  };

  export type TaskCreateNestedOneWithoutTagsInput = {
    create?: XOR<
      TaskCreateWithoutTagsInput,
      TaskUncheckedCreateWithoutTagsInput
    >;
    connectOrCreate?: TaskCreateOrConnectWithoutTagsInput;
    connect?: TaskWhereUniqueInput;
  };

  export type TaskUpdateOneRequiredWithoutTagsNestedInput = {
    create?: XOR<
      TaskCreateWithoutTagsInput,
      TaskUncheckedCreateWithoutTagsInput
    >;
    connectOrCreate?: TaskCreateOrConnectWithoutTagsInput;
    upsert?: TaskUpsertWithoutTagsInput;
    connect?: TaskWhereUniqueInput;
    update?: XOR<
      XOR<TaskUpdateToOneWithWhereWithoutTagsInput, TaskUpdateWithoutTagsInput>,
      TaskUncheckedUpdateWithoutTagsInput
    >;
  };

  export type ProjectCreateNestedOneWithoutSprintsInput = {
    create?: XOR<
      ProjectCreateWithoutSprintsInput,
      ProjectUncheckedCreateWithoutSprintsInput
    >;
    connectOrCreate?: ProjectCreateOrConnectWithoutSprintsInput;
    connect?: ProjectWhereUniqueInput;
  };

  export type UserCreateNestedOneWithoutOwnedSprintsInput = {
    create?: XOR<
      UserCreateWithoutOwnedSprintsInput,
      UserUncheckedCreateWithoutOwnedSprintsInput
    >;
    connectOrCreate?: UserCreateOrConnectWithoutOwnedSprintsInput;
    connect?: UserWhereUniqueInput;
  };

  export type TaskCreateNestedManyWithoutSprintInput = {
    create?:
      | XOR<TaskCreateWithoutSprintInput, TaskUncheckedCreateWithoutSprintInput>
      | TaskCreateWithoutSprintInput[]
      | TaskUncheckedCreateWithoutSprintInput[];
    connectOrCreate?:
      | TaskCreateOrConnectWithoutSprintInput
      | TaskCreateOrConnectWithoutSprintInput[];
    createMany?: TaskCreateManySprintInputEnvelope;
    connect?: TaskWhereUniqueInput | TaskWhereUniqueInput[];
  };

  export type TaskUncheckedCreateNestedManyWithoutSprintInput = {
    create?:
      | XOR<TaskCreateWithoutSprintInput, TaskUncheckedCreateWithoutSprintInput>
      | TaskCreateWithoutSprintInput[]
      | TaskUncheckedCreateWithoutSprintInput[];
    connectOrCreate?:
      | TaskCreateOrConnectWithoutSprintInput
      | TaskCreateOrConnectWithoutSprintInput[];
    createMany?: TaskCreateManySprintInputEnvelope;
    connect?: TaskWhereUniqueInput | TaskWhereUniqueInput[];
  };

  export type EnumSprintStatusFieldUpdateOperationsInput = {
    set?: $Enums.SprintStatus;
  };

  export type ProjectUpdateOneRequiredWithoutSprintsNestedInput = {
    create?: XOR<
      ProjectCreateWithoutSprintsInput,
      ProjectUncheckedCreateWithoutSprintsInput
    >;
    connectOrCreate?: ProjectCreateOrConnectWithoutSprintsInput;
    upsert?: ProjectUpsertWithoutSprintsInput;
    connect?: ProjectWhereUniqueInput;
    update?: XOR<
      XOR<
        ProjectUpdateToOneWithWhereWithoutSprintsInput,
        ProjectUpdateWithoutSprintsInput
      >,
      ProjectUncheckedUpdateWithoutSprintsInput
    >;
  };

  export type UserUpdateOneRequiredWithoutOwnedSprintsNestedInput = {
    create?: XOR<
      UserCreateWithoutOwnedSprintsInput,
      UserUncheckedCreateWithoutOwnedSprintsInput
    >;
    connectOrCreate?: UserCreateOrConnectWithoutOwnedSprintsInput;
    upsert?: UserUpsertWithoutOwnedSprintsInput;
    connect?: UserWhereUniqueInput;
    update?: XOR<
      XOR<
        UserUpdateToOneWithWhereWithoutOwnedSprintsInput,
        UserUpdateWithoutOwnedSprintsInput
      >,
      UserUncheckedUpdateWithoutOwnedSprintsInput
    >;
  };

  export type TaskUpdateManyWithoutSprintNestedInput = {
    create?:
      | XOR<TaskCreateWithoutSprintInput, TaskUncheckedCreateWithoutSprintInput>
      | TaskCreateWithoutSprintInput[]
      | TaskUncheckedCreateWithoutSprintInput[];
    connectOrCreate?:
      | TaskCreateOrConnectWithoutSprintInput
      | TaskCreateOrConnectWithoutSprintInput[];
    upsert?:
      | TaskUpsertWithWhereUniqueWithoutSprintInput
      | TaskUpsertWithWhereUniqueWithoutSprintInput[];
    createMany?: TaskCreateManySprintInputEnvelope;
    set?: TaskWhereUniqueInput | TaskWhereUniqueInput[];
    disconnect?: TaskWhereUniqueInput | TaskWhereUniqueInput[];
    delete?: TaskWhereUniqueInput | TaskWhereUniqueInput[];
    connect?: TaskWhereUniqueInput | TaskWhereUniqueInput[];
    update?:
      | TaskUpdateWithWhereUniqueWithoutSprintInput
      | TaskUpdateWithWhereUniqueWithoutSprintInput[];
    updateMany?:
      | TaskUpdateManyWithWhereWithoutSprintInput
      | TaskUpdateManyWithWhereWithoutSprintInput[];
    deleteMany?: TaskScalarWhereInput | TaskScalarWhereInput[];
  };

  export type TaskUncheckedUpdateManyWithoutSprintNestedInput = {
    create?:
      | XOR<TaskCreateWithoutSprintInput, TaskUncheckedCreateWithoutSprintInput>
      | TaskCreateWithoutSprintInput[]
      | TaskUncheckedCreateWithoutSprintInput[];
    connectOrCreate?:
      | TaskCreateOrConnectWithoutSprintInput
      | TaskCreateOrConnectWithoutSprintInput[];
    upsert?:
      | TaskUpsertWithWhereUniqueWithoutSprintInput
      | TaskUpsertWithWhereUniqueWithoutSprintInput[];
    createMany?: TaskCreateManySprintInputEnvelope;
    set?: TaskWhereUniqueInput | TaskWhereUniqueInput[];
    disconnect?: TaskWhereUniqueInput | TaskWhereUniqueInput[];
    delete?: TaskWhereUniqueInput | TaskWhereUniqueInput[];
    connect?: TaskWhereUniqueInput | TaskWhereUniqueInput[];
    update?:
      | TaskUpdateWithWhereUniqueWithoutSprintInput
      | TaskUpdateWithWhereUniqueWithoutSprintInput[];
    updateMany?:
      | TaskUpdateManyWithWhereWithoutSprintInput
      | TaskUpdateManyWithWhereWithoutSprintInput[];
    deleteMany?: TaskScalarWhereInput | TaskScalarWhereInput[];
  };

  export type ProjectCreateNestedOneWithoutMilestonesInput = {
    create?: XOR<
      ProjectCreateWithoutMilestonesInput,
      ProjectUncheckedCreateWithoutMilestonesInput
    >;
    connectOrCreate?: ProjectCreateOrConnectWithoutMilestonesInput;
    connect?: ProjectWhereUniqueInput;
  };

  export type UserCreateNestedOneWithoutOwnedMilestonesInput = {
    create?: XOR<
      UserCreateWithoutOwnedMilestonesInput,
      UserUncheckedCreateWithoutOwnedMilestonesInput
    >;
    connectOrCreate?: UserCreateOrConnectWithoutOwnedMilestonesInput;
    connect?: UserWhereUniqueInput;
  };

  export type MilestoneDependencyCreateNestedManyWithoutMilestoneInput = {
    create?:
      | XOR<
          MilestoneDependencyCreateWithoutMilestoneInput,
          MilestoneDependencyUncheckedCreateWithoutMilestoneInput
        >
      | MilestoneDependencyCreateWithoutMilestoneInput[]
      | MilestoneDependencyUncheckedCreateWithoutMilestoneInput[];
    connectOrCreate?:
      | MilestoneDependencyCreateOrConnectWithoutMilestoneInput
      | MilestoneDependencyCreateOrConnectWithoutMilestoneInput[];
    createMany?: MilestoneDependencyCreateManyMilestoneInputEnvelope;
    connect?:
      | MilestoneDependencyWhereUniqueInput
      | MilestoneDependencyWhereUniqueInput[];
  };

  export type MilestoneDependencyCreateNestedManyWithoutDependsOnInput = {
    create?:
      | XOR<
          MilestoneDependencyCreateWithoutDependsOnInput,
          MilestoneDependencyUncheckedCreateWithoutDependsOnInput
        >
      | MilestoneDependencyCreateWithoutDependsOnInput[]
      | MilestoneDependencyUncheckedCreateWithoutDependsOnInput[];
    connectOrCreate?:
      | MilestoneDependencyCreateOrConnectWithoutDependsOnInput
      | MilestoneDependencyCreateOrConnectWithoutDependsOnInput[];
    createMany?: MilestoneDependencyCreateManyDependsOnInputEnvelope;
    connect?:
      | MilestoneDependencyWhereUniqueInput
      | MilestoneDependencyWhereUniqueInput[];
  };

  export type MilestoneDependencyUncheckedCreateNestedManyWithoutMilestoneInput =
    {
      create?:
        | XOR<
            MilestoneDependencyCreateWithoutMilestoneInput,
            MilestoneDependencyUncheckedCreateWithoutMilestoneInput
          >
        | MilestoneDependencyCreateWithoutMilestoneInput[]
        | MilestoneDependencyUncheckedCreateWithoutMilestoneInput[];
      connectOrCreate?:
        | MilestoneDependencyCreateOrConnectWithoutMilestoneInput
        | MilestoneDependencyCreateOrConnectWithoutMilestoneInput[];
      createMany?: MilestoneDependencyCreateManyMilestoneInputEnvelope;
      connect?:
        | MilestoneDependencyWhereUniqueInput
        | MilestoneDependencyWhereUniqueInput[];
    };

  export type MilestoneDependencyUncheckedCreateNestedManyWithoutDependsOnInput =
    {
      create?:
        | XOR<
            MilestoneDependencyCreateWithoutDependsOnInput,
            MilestoneDependencyUncheckedCreateWithoutDependsOnInput
          >
        | MilestoneDependencyCreateWithoutDependsOnInput[]
        | MilestoneDependencyUncheckedCreateWithoutDependsOnInput[];
      connectOrCreate?:
        | MilestoneDependencyCreateOrConnectWithoutDependsOnInput
        | MilestoneDependencyCreateOrConnectWithoutDependsOnInput[];
      createMany?: MilestoneDependencyCreateManyDependsOnInputEnvelope;
      connect?:
        | MilestoneDependencyWhereUniqueInput
        | MilestoneDependencyWhereUniqueInput[];
    };

  export type EnumMilestoneStatusFieldUpdateOperationsInput = {
    set?: $Enums.MilestoneStatus;
  };

  export type ProjectUpdateOneRequiredWithoutMilestonesNestedInput = {
    create?: XOR<
      ProjectCreateWithoutMilestonesInput,
      ProjectUncheckedCreateWithoutMilestonesInput
    >;
    connectOrCreate?: ProjectCreateOrConnectWithoutMilestonesInput;
    upsert?: ProjectUpsertWithoutMilestonesInput;
    connect?: ProjectWhereUniqueInput;
    update?: XOR<
      XOR<
        ProjectUpdateToOneWithWhereWithoutMilestonesInput,
        ProjectUpdateWithoutMilestonesInput
      >,
      ProjectUncheckedUpdateWithoutMilestonesInput
    >;
  };

  export type UserUpdateOneRequiredWithoutOwnedMilestonesNestedInput = {
    create?: XOR<
      UserCreateWithoutOwnedMilestonesInput,
      UserUncheckedCreateWithoutOwnedMilestonesInput
    >;
    connectOrCreate?: UserCreateOrConnectWithoutOwnedMilestonesInput;
    upsert?: UserUpsertWithoutOwnedMilestonesInput;
    connect?: UserWhereUniqueInput;
    update?: XOR<
      XOR<
        UserUpdateToOneWithWhereWithoutOwnedMilestonesInput,
        UserUpdateWithoutOwnedMilestonesInput
      >,
      UserUncheckedUpdateWithoutOwnedMilestonesInput
    >;
  };

  export type MilestoneDependencyUpdateManyWithoutMilestoneNestedInput = {
    create?:
      | XOR<
          MilestoneDependencyCreateWithoutMilestoneInput,
          MilestoneDependencyUncheckedCreateWithoutMilestoneInput
        >
      | MilestoneDependencyCreateWithoutMilestoneInput[]
      | MilestoneDependencyUncheckedCreateWithoutMilestoneInput[];
    connectOrCreate?:
      | MilestoneDependencyCreateOrConnectWithoutMilestoneInput
      | MilestoneDependencyCreateOrConnectWithoutMilestoneInput[];
    upsert?:
      | MilestoneDependencyUpsertWithWhereUniqueWithoutMilestoneInput
      | MilestoneDependencyUpsertWithWhereUniqueWithoutMilestoneInput[];
    createMany?: MilestoneDependencyCreateManyMilestoneInputEnvelope;
    set?:
      | MilestoneDependencyWhereUniqueInput
      | MilestoneDependencyWhereUniqueInput[];
    disconnect?:
      | MilestoneDependencyWhereUniqueInput
      | MilestoneDependencyWhereUniqueInput[];
    delete?:
      | MilestoneDependencyWhereUniqueInput
      | MilestoneDependencyWhereUniqueInput[];
    connect?:
      | MilestoneDependencyWhereUniqueInput
      | MilestoneDependencyWhereUniqueInput[];
    update?:
      | MilestoneDependencyUpdateWithWhereUniqueWithoutMilestoneInput
      | MilestoneDependencyUpdateWithWhereUniqueWithoutMilestoneInput[];
    updateMany?:
      | MilestoneDependencyUpdateManyWithWhereWithoutMilestoneInput
      | MilestoneDependencyUpdateManyWithWhereWithoutMilestoneInput[];
    deleteMany?:
      | MilestoneDependencyScalarWhereInput
      | MilestoneDependencyScalarWhereInput[];
  };

  export type MilestoneDependencyUpdateManyWithoutDependsOnNestedInput = {
    create?:
      | XOR<
          MilestoneDependencyCreateWithoutDependsOnInput,
          MilestoneDependencyUncheckedCreateWithoutDependsOnInput
        >
      | MilestoneDependencyCreateWithoutDependsOnInput[]
      | MilestoneDependencyUncheckedCreateWithoutDependsOnInput[];
    connectOrCreate?:
      | MilestoneDependencyCreateOrConnectWithoutDependsOnInput
      | MilestoneDependencyCreateOrConnectWithoutDependsOnInput[];
    upsert?:
      | MilestoneDependencyUpsertWithWhereUniqueWithoutDependsOnInput
      | MilestoneDependencyUpsertWithWhereUniqueWithoutDependsOnInput[];
    createMany?: MilestoneDependencyCreateManyDependsOnInputEnvelope;
    set?:
      | MilestoneDependencyWhereUniqueInput
      | MilestoneDependencyWhereUniqueInput[];
    disconnect?:
      | MilestoneDependencyWhereUniqueInput
      | MilestoneDependencyWhereUniqueInput[];
    delete?:
      | MilestoneDependencyWhereUniqueInput
      | MilestoneDependencyWhereUniqueInput[];
    connect?:
      | MilestoneDependencyWhereUniqueInput
      | MilestoneDependencyWhereUniqueInput[];
    update?:
      | MilestoneDependencyUpdateWithWhereUniqueWithoutDependsOnInput
      | MilestoneDependencyUpdateWithWhereUniqueWithoutDependsOnInput[];
    updateMany?:
      | MilestoneDependencyUpdateManyWithWhereWithoutDependsOnInput
      | MilestoneDependencyUpdateManyWithWhereWithoutDependsOnInput[];
    deleteMany?:
      | MilestoneDependencyScalarWhereInput
      | MilestoneDependencyScalarWhereInput[];
  };

  export type MilestoneDependencyUncheckedUpdateManyWithoutMilestoneNestedInput =
    {
      create?:
        | XOR<
            MilestoneDependencyCreateWithoutMilestoneInput,
            MilestoneDependencyUncheckedCreateWithoutMilestoneInput
          >
        | MilestoneDependencyCreateWithoutMilestoneInput[]
        | MilestoneDependencyUncheckedCreateWithoutMilestoneInput[];
      connectOrCreate?:
        | MilestoneDependencyCreateOrConnectWithoutMilestoneInput
        | MilestoneDependencyCreateOrConnectWithoutMilestoneInput[];
      upsert?:
        | MilestoneDependencyUpsertWithWhereUniqueWithoutMilestoneInput
        | MilestoneDependencyUpsertWithWhereUniqueWithoutMilestoneInput[];
      createMany?: MilestoneDependencyCreateManyMilestoneInputEnvelope;
      set?:
        | MilestoneDependencyWhereUniqueInput
        | MilestoneDependencyWhereUniqueInput[];
      disconnect?:
        | MilestoneDependencyWhereUniqueInput
        | MilestoneDependencyWhereUniqueInput[];
      delete?:
        | MilestoneDependencyWhereUniqueInput
        | MilestoneDependencyWhereUniqueInput[];
      connect?:
        | MilestoneDependencyWhereUniqueInput
        | MilestoneDependencyWhereUniqueInput[];
      update?:
        | MilestoneDependencyUpdateWithWhereUniqueWithoutMilestoneInput
        | MilestoneDependencyUpdateWithWhereUniqueWithoutMilestoneInput[];
      updateMany?:
        | MilestoneDependencyUpdateManyWithWhereWithoutMilestoneInput
        | MilestoneDependencyUpdateManyWithWhereWithoutMilestoneInput[];
      deleteMany?:
        | MilestoneDependencyScalarWhereInput
        | MilestoneDependencyScalarWhereInput[];
    };

  export type MilestoneDependencyUncheckedUpdateManyWithoutDependsOnNestedInput =
    {
      create?:
        | XOR<
            MilestoneDependencyCreateWithoutDependsOnInput,
            MilestoneDependencyUncheckedCreateWithoutDependsOnInput
          >
        | MilestoneDependencyCreateWithoutDependsOnInput[]
        | MilestoneDependencyUncheckedCreateWithoutDependsOnInput[];
      connectOrCreate?:
        | MilestoneDependencyCreateOrConnectWithoutDependsOnInput
        | MilestoneDependencyCreateOrConnectWithoutDependsOnInput[];
      upsert?:
        | MilestoneDependencyUpsertWithWhereUniqueWithoutDependsOnInput
        | MilestoneDependencyUpsertWithWhereUniqueWithoutDependsOnInput[];
      createMany?: MilestoneDependencyCreateManyDependsOnInputEnvelope;
      set?:
        | MilestoneDependencyWhereUniqueInput
        | MilestoneDependencyWhereUniqueInput[];
      disconnect?:
        | MilestoneDependencyWhereUniqueInput
        | MilestoneDependencyWhereUniqueInput[];
      delete?:
        | MilestoneDependencyWhereUniqueInput
        | MilestoneDependencyWhereUniqueInput[];
      connect?:
        | MilestoneDependencyWhereUniqueInput
        | MilestoneDependencyWhereUniqueInput[];
      update?:
        | MilestoneDependencyUpdateWithWhereUniqueWithoutDependsOnInput
        | MilestoneDependencyUpdateWithWhereUniqueWithoutDependsOnInput[];
      updateMany?:
        | MilestoneDependencyUpdateManyWithWhereWithoutDependsOnInput
        | MilestoneDependencyUpdateManyWithWhereWithoutDependsOnInput[];
      deleteMany?:
        | MilestoneDependencyScalarWhereInput
        | MilestoneDependencyScalarWhereInput[];
    };

  export type MilestoneCreateNestedOneWithoutDependenciesInput = {
    create?: XOR<
      MilestoneCreateWithoutDependenciesInput,
      MilestoneUncheckedCreateWithoutDependenciesInput
    >;
    connectOrCreate?: MilestoneCreateOrConnectWithoutDependenciesInput;
    connect?: MilestoneWhereUniqueInput;
  };

  export type MilestoneCreateNestedOneWithoutDependentsInput = {
    create?: XOR<
      MilestoneCreateWithoutDependentsInput,
      MilestoneUncheckedCreateWithoutDependentsInput
    >;
    connectOrCreate?: MilestoneCreateOrConnectWithoutDependentsInput;
    connect?: MilestoneWhereUniqueInput;
  };

  export type MilestoneUpdateOneRequiredWithoutDependenciesNestedInput = {
    create?: XOR<
      MilestoneCreateWithoutDependenciesInput,
      MilestoneUncheckedCreateWithoutDependenciesInput
    >;
    connectOrCreate?: MilestoneCreateOrConnectWithoutDependenciesInput;
    upsert?: MilestoneUpsertWithoutDependenciesInput;
    connect?: MilestoneWhereUniqueInput;
    update?: XOR<
      XOR<
        MilestoneUpdateToOneWithWhereWithoutDependenciesInput,
        MilestoneUpdateWithoutDependenciesInput
      >,
      MilestoneUncheckedUpdateWithoutDependenciesInput
    >;
  };

  export type MilestoneUpdateOneRequiredWithoutDependentsNestedInput = {
    create?: XOR<
      MilestoneCreateWithoutDependentsInput,
      MilestoneUncheckedCreateWithoutDependentsInput
    >;
    connectOrCreate?: MilestoneCreateOrConnectWithoutDependentsInput;
    upsert?: MilestoneUpsertWithoutDependentsInput;
    connect?: MilestoneWhereUniqueInput;
    update?: XOR<
      XOR<
        MilestoneUpdateToOneWithWhereWithoutDependentsInput,
        MilestoneUpdateWithoutDependentsInput
      >,
      MilestoneUncheckedUpdateWithoutDependentsInput
    >;
  };

  export type UserCreateNestedOneWithoutActivitiesInput = {
    create?: XOR<
      UserCreateWithoutActivitiesInput,
      UserUncheckedCreateWithoutActivitiesInput
    >;
    connectOrCreate?: UserCreateOrConnectWithoutActivitiesInput;
    connect?: UserWhereUniqueInput;
  };

  export type TaskCreateNestedOneWithoutActivitiesInput = {
    create?: XOR<
      TaskCreateWithoutActivitiesInput,
      TaskUncheckedCreateWithoutActivitiesInput
    >;
    connectOrCreate?: TaskCreateOrConnectWithoutActivitiesInput;
    connect?: TaskWhereUniqueInput;
  };

  export type EnumActivityTypeFieldUpdateOperationsInput = {
    set?: $Enums.ActivityType;
  };

  export type UserUpdateOneRequiredWithoutActivitiesNestedInput = {
    create?: XOR<
      UserCreateWithoutActivitiesInput,
      UserUncheckedCreateWithoutActivitiesInput
    >;
    connectOrCreate?: UserCreateOrConnectWithoutActivitiesInput;
    upsert?: UserUpsertWithoutActivitiesInput;
    connect?: UserWhereUniqueInput;
    update?: XOR<
      XOR<
        UserUpdateToOneWithWhereWithoutActivitiesInput,
        UserUpdateWithoutActivitiesInput
      >,
      UserUncheckedUpdateWithoutActivitiesInput
    >;
  };

  export type TaskUpdateOneWithoutActivitiesNestedInput = {
    create?: XOR<
      TaskCreateWithoutActivitiesInput,
      TaskUncheckedCreateWithoutActivitiesInput
    >;
    connectOrCreate?: TaskCreateOrConnectWithoutActivitiesInput;
    upsert?: TaskUpsertWithoutActivitiesInput;
    disconnect?: TaskWhereInput | boolean;
    delete?: TaskWhereInput | boolean;
    connect?: TaskWhereUniqueInput;
    update?: XOR<
      XOR<
        TaskUpdateToOneWithWhereWithoutActivitiesInput,
        TaskUpdateWithoutActivitiesInput
      >,
      TaskUncheckedUpdateWithoutActivitiesInput
    >;
  };

  export type UserCreateNestedOneWithoutNotificationsInput = {
    create?: XOR<
      UserCreateWithoutNotificationsInput,
      UserUncheckedCreateWithoutNotificationsInput
    >;
    connectOrCreate?: UserCreateOrConnectWithoutNotificationsInput;
    connect?: UserWhereUniqueInput;
  };

  export type BoolFieldUpdateOperationsInput = {
    set?: boolean;
  };

  export type UserUpdateOneRequiredWithoutNotificationsNestedInput = {
    create?: XOR<
      UserCreateWithoutNotificationsInput,
      UserUncheckedCreateWithoutNotificationsInput
    >;
    connectOrCreate?: UserCreateOrConnectWithoutNotificationsInput;
    upsert?: UserUpsertWithoutNotificationsInput;
    connect?: UserWhereUniqueInput;
    update?: XOR<
      XOR<
        UserUpdateToOneWithWhereWithoutNotificationsInput,
        UserUpdateWithoutNotificationsInput
      >,
      UserUncheckedUpdateWithoutNotificationsInput
    >;
  };

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>;
    in?: string[] | ListStringFieldRefInput<$PrismaModel>;
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>;
    lt?: string | StringFieldRefInput<$PrismaModel>;
    lte?: string | StringFieldRefInput<$PrismaModel>;
    gt?: string | StringFieldRefInput<$PrismaModel>;
    gte?: string | StringFieldRefInput<$PrismaModel>;
    contains?: string | StringFieldRefInput<$PrismaModel>;
    startsWith?: string | StringFieldRefInput<$PrismaModel>;
    endsWith?: string | StringFieldRefInput<$PrismaModel>;
    not?: NestedStringFilter<$PrismaModel> | string;
  };

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null;
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null;
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null;
    lt?: string | StringFieldRefInput<$PrismaModel>;
    lte?: string | StringFieldRefInput<$PrismaModel>;
    gt?: string | StringFieldRefInput<$PrismaModel>;
    gte?: string | StringFieldRefInput<$PrismaModel>;
    contains?: string | StringFieldRefInput<$PrismaModel>;
    startsWith?: string | StringFieldRefInput<$PrismaModel>;
    endsWith?: string | StringFieldRefInput<$PrismaModel>;
    not?: NestedStringNullableFilter<$PrismaModel> | string | null;
  };

  export type NestedEnumUserRoleFilter<$PrismaModel = never> = {
    equals?: $Enums.UserRole | EnumUserRoleFieldRefInput<$PrismaModel>;
    in?: $Enums.UserRole[] | ListEnumUserRoleFieldRefInput<$PrismaModel>;
    notIn?: $Enums.UserRole[] | ListEnumUserRoleFieldRefInput<$PrismaModel>;
    not?: NestedEnumUserRoleFilter<$PrismaModel> | $Enums.UserRole;
  };

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>;
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>;
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>;
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>;
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>;
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>;
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>;
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string;
  };

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>;
    in?: string[] | ListStringFieldRefInput<$PrismaModel>;
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>;
    lt?: string | StringFieldRefInput<$PrismaModel>;
    lte?: string | StringFieldRefInput<$PrismaModel>;
    gt?: string | StringFieldRefInput<$PrismaModel>;
    gte?: string | StringFieldRefInput<$PrismaModel>;
    contains?: string | StringFieldRefInput<$PrismaModel>;
    startsWith?: string | StringFieldRefInput<$PrismaModel>;
    endsWith?: string | StringFieldRefInput<$PrismaModel>;
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string;
    _count?: NestedIntFilter<$PrismaModel>;
    _min?: NestedStringFilter<$PrismaModel>;
    _max?: NestedStringFilter<$PrismaModel>;
  };

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>;
    in?: number[] | ListIntFieldRefInput<$PrismaModel>;
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>;
    lt?: number | IntFieldRefInput<$PrismaModel>;
    lte?: number | IntFieldRefInput<$PrismaModel>;
    gt?: number | IntFieldRefInput<$PrismaModel>;
    gte?: number | IntFieldRefInput<$PrismaModel>;
    not?: NestedIntFilter<$PrismaModel> | number;
  };

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null;
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null;
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null;
    lt?: string | StringFieldRefInput<$PrismaModel>;
    lte?: string | StringFieldRefInput<$PrismaModel>;
    gt?: string | StringFieldRefInput<$PrismaModel>;
    gte?: string | StringFieldRefInput<$PrismaModel>;
    contains?: string | StringFieldRefInput<$PrismaModel>;
    startsWith?: string | StringFieldRefInput<$PrismaModel>;
    endsWith?: string | StringFieldRefInput<$PrismaModel>;
    not?:
      | NestedStringNullableWithAggregatesFilter<$PrismaModel>
      | string
      | null;
    _count?: NestedIntNullableFilter<$PrismaModel>;
    _min?: NestedStringNullableFilter<$PrismaModel>;
    _max?: NestedStringNullableFilter<$PrismaModel>;
  };

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null;
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null;
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null;
    lt?: number | IntFieldRefInput<$PrismaModel>;
    lte?: number | IntFieldRefInput<$PrismaModel>;
    gt?: number | IntFieldRefInput<$PrismaModel>;
    gte?: number | IntFieldRefInput<$PrismaModel>;
    not?: NestedIntNullableFilter<$PrismaModel> | number | null;
  };

  export type NestedEnumUserRoleWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.UserRole | EnumUserRoleFieldRefInput<$PrismaModel>;
    in?: $Enums.UserRole[] | ListEnumUserRoleFieldRefInput<$PrismaModel>;
    notIn?: $Enums.UserRole[] | ListEnumUserRoleFieldRefInput<$PrismaModel>;
    not?:
      | NestedEnumUserRoleWithAggregatesFilter<$PrismaModel>
      | $Enums.UserRole;
    _count?: NestedIntFilter<$PrismaModel>;
    _min?: NestedEnumUserRoleFilter<$PrismaModel>;
    _max?: NestedEnumUserRoleFilter<$PrismaModel>;
  };

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>;
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>;
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>;
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>;
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>;
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>;
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>;
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string;
    _count?: NestedIntFilter<$PrismaModel>;
    _min?: NestedDateTimeFilter<$PrismaModel>;
    _max?: NestedDateTimeFilter<$PrismaModel>;
  };
  export type NestedJsonNullableFilter<$PrismaModel = never> =
    | PatchUndefined<
        Either<
          Required<NestedJsonNullableFilterBase<$PrismaModel>>,
          Exclude<
            keyof Required<NestedJsonNullableFilterBase<$PrismaModel>>,
            "path"
          >
        >,
        Required<NestedJsonNullableFilterBase<$PrismaModel>>
      >
    | OptionalFlat<
        Omit<Required<NestedJsonNullableFilterBase<$PrismaModel>>, "path">
      >;

  export type NestedJsonNullableFilterBase<$PrismaModel = never> = {
    equals?:
      | InputJsonValue
      | JsonFieldRefInput<$PrismaModel>
      | JsonNullValueFilter;
    path?: string[];
    mode?: QueryMode | EnumQueryModeFieldRefInput<$PrismaModel>;
    string_contains?: string | StringFieldRefInput<$PrismaModel>;
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>;
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>;
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null;
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null;
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null;
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>;
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>;
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>;
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>;
    not?:
      | InputJsonValue
      | JsonFieldRefInput<$PrismaModel>
      | JsonNullValueFilter;
  };

  export type NestedEnumProjectStatusFilter<$PrismaModel = never> = {
    equals?:
      | $Enums.ProjectStatus
      | EnumProjectStatusFieldRefInput<$PrismaModel>;
    in?:
      | $Enums.ProjectStatus[]
      | ListEnumProjectStatusFieldRefInput<$PrismaModel>;
    notIn?:
      | $Enums.ProjectStatus[]
      | ListEnumProjectStatusFieldRefInput<$PrismaModel>;
    not?: NestedEnumProjectStatusFilter<$PrismaModel> | $Enums.ProjectStatus;
  };

  export type NestedEnumProjectStatusWithAggregatesFilter<
    $PrismaModel = never,
  > = {
    equals?:
      | $Enums.ProjectStatus
      | EnumProjectStatusFieldRefInput<$PrismaModel>;
    in?:
      | $Enums.ProjectStatus[]
      | ListEnumProjectStatusFieldRefInput<$PrismaModel>;
    notIn?:
      | $Enums.ProjectStatus[]
      | ListEnumProjectStatusFieldRefInput<$PrismaModel>;
    not?:
      | NestedEnumProjectStatusWithAggregatesFilter<$PrismaModel>
      | $Enums.ProjectStatus;
    _count?: NestedIntFilter<$PrismaModel>;
    _min?: NestedEnumProjectStatusFilter<$PrismaModel>;
    _max?: NestedEnumProjectStatusFilter<$PrismaModel>;
  };

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>;
    in?: number[] | ListIntFieldRefInput<$PrismaModel>;
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>;
    lt?: number | IntFieldRefInput<$PrismaModel>;
    lte?: number | IntFieldRefInput<$PrismaModel>;
    gt?: number | IntFieldRefInput<$PrismaModel>;
    gte?: number | IntFieldRefInput<$PrismaModel>;
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number;
    _count?: NestedIntFilter<$PrismaModel>;
    _avg?: NestedFloatFilter<$PrismaModel>;
    _sum?: NestedIntFilter<$PrismaModel>;
    _min?: NestedIntFilter<$PrismaModel>;
    _max?: NestedIntFilter<$PrismaModel>;
  };

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>;
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>;
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>;
    lt?: number | FloatFieldRefInput<$PrismaModel>;
    lte?: number | FloatFieldRefInput<$PrismaModel>;
    gt?: number | FloatFieldRefInput<$PrismaModel>;
    gte?: number | FloatFieldRefInput<$PrismaModel>;
    not?: NestedFloatFilter<$PrismaModel> | number;
  };

  export type NestedEnumTaskTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.TaskType | EnumTaskTypeFieldRefInput<$PrismaModel>;
    in?: $Enums.TaskType[] | ListEnumTaskTypeFieldRefInput<$PrismaModel>;
    notIn?: $Enums.TaskType[] | ListEnumTaskTypeFieldRefInput<$PrismaModel>;
    not?: NestedEnumTaskTypeFilter<$PrismaModel> | $Enums.TaskType;
  };

  export type NestedEnumTaskStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.TaskStatus | EnumTaskStatusFieldRefInput<$PrismaModel>;
    in?: $Enums.TaskStatus[] | ListEnumTaskStatusFieldRefInput<$PrismaModel>;
    notIn?: $Enums.TaskStatus[] | ListEnumTaskStatusFieldRefInput<$PrismaModel>;
    not?: NestedEnumTaskStatusFilter<$PrismaModel> | $Enums.TaskStatus;
  };

  export type NestedEnumPriorityFilter<$PrismaModel = never> = {
    equals?: $Enums.Priority | EnumPriorityFieldRefInput<$PrismaModel>;
    in?: $Enums.Priority[] | ListEnumPriorityFieldRefInput<$PrismaModel>;
    notIn?: $Enums.Priority[] | ListEnumPriorityFieldRefInput<$PrismaModel>;
    not?: NestedEnumPriorityFilter<$PrismaModel> | $Enums.Priority;
  };

  export type NestedDateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null;
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null;
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null;
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>;
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>;
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>;
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>;
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null;
  };

  export type NestedEnumTaskTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.TaskType | EnumTaskTypeFieldRefInput<$PrismaModel>;
    in?: $Enums.TaskType[] | ListEnumTaskTypeFieldRefInput<$PrismaModel>;
    notIn?: $Enums.TaskType[] | ListEnumTaskTypeFieldRefInput<$PrismaModel>;
    not?:
      | NestedEnumTaskTypeWithAggregatesFilter<$PrismaModel>
      | $Enums.TaskType;
    _count?: NestedIntFilter<$PrismaModel>;
    _min?: NestedEnumTaskTypeFilter<$PrismaModel>;
    _max?: NestedEnumTaskTypeFilter<$PrismaModel>;
  };

  export type NestedEnumTaskStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.TaskStatus | EnumTaskStatusFieldRefInput<$PrismaModel>;
    in?: $Enums.TaskStatus[] | ListEnumTaskStatusFieldRefInput<$PrismaModel>;
    notIn?: $Enums.TaskStatus[] | ListEnumTaskStatusFieldRefInput<$PrismaModel>;
    not?:
      | NestedEnumTaskStatusWithAggregatesFilter<$PrismaModel>
      | $Enums.TaskStatus;
    _count?: NestedIntFilter<$PrismaModel>;
    _min?: NestedEnumTaskStatusFilter<$PrismaModel>;
    _max?: NestedEnumTaskStatusFilter<$PrismaModel>;
  };

  export type NestedEnumPriorityWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.Priority | EnumPriorityFieldRefInput<$PrismaModel>;
    in?: $Enums.Priority[] | ListEnumPriorityFieldRefInput<$PrismaModel>;
    notIn?: $Enums.Priority[] | ListEnumPriorityFieldRefInput<$PrismaModel>;
    not?:
      | NestedEnumPriorityWithAggregatesFilter<$PrismaModel>
      | $Enums.Priority;
    _count?: NestedIntFilter<$PrismaModel>;
    _min?: NestedEnumPriorityFilter<$PrismaModel>;
    _max?: NestedEnumPriorityFilter<$PrismaModel>;
  };

  export type NestedIntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null;
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null;
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null;
    lt?: number | IntFieldRefInput<$PrismaModel>;
    lte?: number | IntFieldRefInput<$PrismaModel>;
    gt?: number | IntFieldRefInput<$PrismaModel>;
    gte?: number | IntFieldRefInput<$PrismaModel>;
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null;
    _count?: NestedIntNullableFilter<$PrismaModel>;
    _avg?: NestedFloatNullableFilter<$PrismaModel>;
    _sum?: NestedIntNullableFilter<$PrismaModel>;
    _min?: NestedIntNullableFilter<$PrismaModel>;
    _max?: NestedIntNullableFilter<$PrismaModel>;
  };

  export type NestedFloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null;
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null;
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null;
    lt?: number | FloatFieldRefInput<$PrismaModel>;
    lte?: number | FloatFieldRefInput<$PrismaModel>;
    gt?: number | FloatFieldRefInput<$PrismaModel>;
    gte?: number | FloatFieldRefInput<$PrismaModel>;
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null;
  };

  export type NestedDateTimeNullableWithAggregatesFilter<$PrismaModel = never> =
    {
      equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null;
      in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null;
      notIn?:
        | Date[]
        | string[]
        | ListDateTimeFieldRefInput<$PrismaModel>
        | null;
      lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>;
      lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>;
      gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>;
      gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>;
      not?:
        | NestedDateTimeNullableWithAggregatesFilter<$PrismaModel>
        | Date
        | string
        | null;
      _count?: NestedIntNullableFilter<$PrismaModel>;
      _min?: NestedDateTimeNullableFilter<$PrismaModel>;
      _max?: NestedDateTimeNullableFilter<$PrismaModel>;
    };

  export type NestedEnumSprintStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.SprintStatus | EnumSprintStatusFieldRefInput<$PrismaModel>;
    in?:
      | $Enums.SprintStatus[]
      | ListEnumSprintStatusFieldRefInput<$PrismaModel>;
    notIn?:
      | $Enums.SprintStatus[]
      | ListEnumSprintStatusFieldRefInput<$PrismaModel>;
    not?: NestedEnumSprintStatusFilter<$PrismaModel> | $Enums.SprintStatus;
  };

  export type NestedEnumSprintStatusWithAggregatesFilter<$PrismaModel = never> =
    {
      equals?:
        | $Enums.SprintStatus
        | EnumSprintStatusFieldRefInput<$PrismaModel>;
      in?:
        | $Enums.SprintStatus[]
        | ListEnumSprintStatusFieldRefInput<$PrismaModel>;
      notIn?:
        | $Enums.SprintStatus[]
        | ListEnumSprintStatusFieldRefInput<$PrismaModel>;
      not?:
        | NestedEnumSprintStatusWithAggregatesFilter<$PrismaModel>
        | $Enums.SprintStatus;
      _count?: NestedIntFilter<$PrismaModel>;
      _min?: NestedEnumSprintStatusFilter<$PrismaModel>;
      _max?: NestedEnumSprintStatusFilter<$PrismaModel>;
    };

  export type NestedEnumMilestoneStatusFilter<$PrismaModel = never> = {
    equals?:
      | $Enums.MilestoneStatus
      | EnumMilestoneStatusFieldRefInput<$PrismaModel>;
    in?:
      | $Enums.MilestoneStatus[]
      | ListEnumMilestoneStatusFieldRefInput<$PrismaModel>;
    notIn?:
      | $Enums.MilestoneStatus[]
      | ListEnumMilestoneStatusFieldRefInput<$PrismaModel>;
    not?:
      | NestedEnumMilestoneStatusFilter<$PrismaModel>
      | $Enums.MilestoneStatus;
  };

  export type NestedEnumMilestoneStatusWithAggregatesFilter<
    $PrismaModel = never,
  > = {
    equals?:
      | $Enums.MilestoneStatus
      | EnumMilestoneStatusFieldRefInput<$PrismaModel>;
    in?:
      | $Enums.MilestoneStatus[]
      | ListEnumMilestoneStatusFieldRefInput<$PrismaModel>;
    notIn?:
      | $Enums.MilestoneStatus[]
      | ListEnumMilestoneStatusFieldRefInput<$PrismaModel>;
    not?:
      | NestedEnumMilestoneStatusWithAggregatesFilter<$PrismaModel>
      | $Enums.MilestoneStatus;
    _count?: NestedIntFilter<$PrismaModel>;
    _min?: NestedEnumMilestoneStatusFilter<$PrismaModel>;
    _max?: NestedEnumMilestoneStatusFilter<$PrismaModel>;
  };

  export type NestedEnumActivityTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.ActivityType | EnumActivityTypeFieldRefInput<$PrismaModel>;
    in?:
      | $Enums.ActivityType[]
      | ListEnumActivityTypeFieldRefInput<$PrismaModel>;
    notIn?:
      | $Enums.ActivityType[]
      | ListEnumActivityTypeFieldRefInput<$PrismaModel>;
    not?: NestedEnumActivityTypeFilter<$PrismaModel> | $Enums.ActivityType;
  };

  export type NestedEnumActivityTypeWithAggregatesFilter<$PrismaModel = never> =
    {
      equals?:
        | $Enums.ActivityType
        | EnumActivityTypeFieldRefInput<$PrismaModel>;
      in?:
        | $Enums.ActivityType[]
        | ListEnumActivityTypeFieldRefInput<$PrismaModel>;
      notIn?:
        | $Enums.ActivityType[]
        | ListEnumActivityTypeFieldRefInput<$PrismaModel>;
      not?:
        | NestedEnumActivityTypeWithAggregatesFilter<$PrismaModel>
        | $Enums.ActivityType;
      _count?: NestedIntFilter<$PrismaModel>;
      _min?: NestedEnumActivityTypeFilter<$PrismaModel>;
      _max?: NestedEnumActivityTypeFilter<$PrismaModel>;
    };

  export type NestedBoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>;
    not?: NestedBoolFilter<$PrismaModel> | boolean;
  };

  export type NestedBoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>;
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean;
    _count?: NestedIntFilter<$PrismaModel>;
    _min?: NestedBoolFilter<$PrismaModel>;
    _max?: NestedBoolFilter<$PrismaModel>;
  };

  export type TaskCreateWithoutAssigneeInput = {
    id?: string;
    title: string;
    description?: string | null;
    type?: $Enums.TaskType;
    status?: $Enums.TaskStatus;
    priority?: $Enums.Priority;
    storyPoints?: number | null;
    dueDate?: Date | string | null;
    createdAt?: Date | string;
    updatedAt?: Date | string;
    parentId?: string | null;
    project: ProjectCreateNestedOneWithoutTasksInput;
    sprint?: SprintCreateNestedOneWithoutTasksInput;
    creator: UserCreateNestedOneWithoutCreatedTasksInput;
    tags?: TaskTagCreateNestedManyWithoutTaskInput;
    activities?: ActivityCreateNestedManyWithoutTaskInput;
  };

  export type TaskUncheckedCreateWithoutAssigneeInput = {
    id?: string;
    title: string;
    description?: string | null;
    type?: $Enums.TaskType;
    status?: $Enums.TaskStatus;
    priority?: $Enums.Priority;
    storyPoints?: number | null;
    dueDate?: Date | string | null;
    createdAt?: Date | string;
    updatedAt?: Date | string;
    projectId: string;
    sprintId?: string | null;
    creatorId: string;
    parentId?: string | null;
    tags?: TaskTagUncheckedCreateNestedManyWithoutTaskInput;
    activities?: ActivityUncheckedCreateNestedManyWithoutTaskInput;
  };

  export type TaskCreateOrConnectWithoutAssigneeInput = {
    where: TaskWhereUniqueInput;
    create: XOR<
      TaskCreateWithoutAssigneeInput,
      TaskUncheckedCreateWithoutAssigneeInput
    >;
  };

  export type TaskCreateManyAssigneeInputEnvelope = {
    data: TaskCreateManyAssigneeInput | TaskCreateManyAssigneeInput[];
    skipDuplicates?: boolean;
  };

  export type TaskCreateWithoutCreatorInput = {
    id?: string;
    title: string;
    description?: string | null;
    type?: $Enums.TaskType;
    status?: $Enums.TaskStatus;
    priority?: $Enums.Priority;
    storyPoints?: number | null;
    dueDate?: Date | string | null;
    createdAt?: Date | string;
    updatedAt?: Date | string;
    parentId?: string | null;
    project: ProjectCreateNestedOneWithoutTasksInput;
    sprint?: SprintCreateNestedOneWithoutTasksInput;
    assignee?: UserCreateNestedOneWithoutAssignedTasksInput;
    tags?: TaskTagCreateNestedManyWithoutTaskInput;
    activities?: ActivityCreateNestedManyWithoutTaskInput;
  };

  export type TaskUncheckedCreateWithoutCreatorInput = {
    id?: string;
    title: string;
    description?: string | null;
    type?: $Enums.TaskType;
    status?: $Enums.TaskStatus;
    priority?: $Enums.Priority;
    storyPoints?: number | null;
    dueDate?: Date | string | null;
    createdAt?: Date | string;
    updatedAt?: Date | string;
    projectId: string;
    sprintId?: string | null;
    assigneeId?: string | null;
    parentId?: string | null;
    tags?: TaskTagUncheckedCreateNestedManyWithoutTaskInput;
    activities?: ActivityUncheckedCreateNestedManyWithoutTaskInput;
  };

  export type TaskCreateOrConnectWithoutCreatorInput = {
    where: TaskWhereUniqueInput;
    create: XOR<
      TaskCreateWithoutCreatorInput,
      TaskUncheckedCreateWithoutCreatorInput
    >;
  };

  export type TaskCreateManyCreatorInputEnvelope = {
    data: TaskCreateManyCreatorInput | TaskCreateManyCreatorInput[];
    skipDuplicates?: boolean;
  };

  export type MilestoneCreateWithoutOwnerInput = {
    id?: string;
    title: string;
    description?: string | null;
    status?: $Enums.MilestoneStatus;
    progress?: number;
    startDate?: Date | string | null;
    endDate?: Date | string | null;
    createdAt?: Date | string;
    updatedAt?: Date | string;
    project: ProjectCreateNestedOneWithoutMilestonesInput;
    dependencies?: MilestoneDependencyCreateNestedManyWithoutMilestoneInput;
    dependents?: MilestoneDependencyCreateNestedManyWithoutDependsOnInput;
  };

  export type MilestoneUncheckedCreateWithoutOwnerInput = {
    id?: string;
    title: string;
    description?: string | null;
    status?: $Enums.MilestoneStatus;
    progress?: number;
    startDate?: Date | string | null;
    endDate?: Date | string | null;
    createdAt?: Date | string;
    updatedAt?: Date | string;
    projectId: string;
    dependencies?: MilestoneDependencyUncheckedCreateNestedManyWithoutMilestoneInput;
    dependents?: MilestoneDependencyUncheckedCreateNestedManyWithoutDependsOnInput;
  };

  export type MilestoneCreateOrConnectWithoutOwnerInput = {
    where: MilestoneWhereUniqueInput;
    create: XOR<
      MilestoneCreateWithoutOwnerInput,
      MilestoneUncheckedCreateWithoutOwnerInput
    >;
  };

  export type MilestoneCreateManyOwnerInputEnvelope = {
    data: MilestoneCreateManyOwnerInput | MilestoneCreateManyOwnerInput[];
    skipDuplicates?: boolean;
  };

  export type SprintCreateWithoutOwnerInput = {
    id?: string;
    name: string;
    goal?: string | null;
    status?: $Enums.SprintStatus;
    startDate?: Date | string | null;
    endDate?: Date | string | null;
    progress?: number;
    createdAt?: Date | string;
    updatedAt?: Date | string;
    project: ProjectCreateNestedOneWithoutSprintsInput;
    tasks?: TaskCreateNestedManyWithoutSprintInput;
  };

  export type SprintUncheckedCreateWithoutOwnerInput = {
    id?: string;
    name: string;
    goal?: string | null;
    status?: $Enums.SprintStatus;
    startDate?: Date | string | null;
    endDate?: Date | string | null;
    progress?: number;
    createdAt?: Date | string;
    updatedAt?: Date | string;
    projectId: string;
    tasks?: TaskUncheckedCreateNestedManyWithoutSprintInput;
  };

  export type SprintCreateOrConnectWithoutOwnerInput = {
    where: SprintWhereUniqueInput;
    create: XOR<
      SprintCreateWithoutOwnerInput,
      SprintUncheckedCreateWithoutOwnerInput
    >;
  };

  export type SprintCreateManyOwnerInputEnvelope = {
    data: SprintCreateManyOwnerInput | SprintCreateManyOwnerInput[];
    skipDuplicates?: boolean;
  };

  export type WorkspaceMemberCreateWithoutUserInput = {
    id?: string;
    role?: $Enums.UserRole;
    joinedAt?: Date | string;
    workspace: WorkspaceCreateNestedOneWithoutMembersInput;
  };

  export type WorkspaceMemberUncheckedCreateWithoutUserInput = {
    id?: string;
    workspaceId: string;
    role?: $Enums.UserRole;
    joinedAt?: Date | string;
  };

  export type WorkspaceMemberCreateOrConnectWithoutUserInput = {
    where: WorkspaceMemberWhereUniqueInput;
    create: XOR<
      WorkspaceMemberCreateWithoutUserInput,
      WorkspaceMemberUncheckedCreateWithoutUserInput
    >;
  };

  export type WorkspaceMemberCreateManyUserInputEnvelope = {
    data:
      | WorkspaceMemberCreateManyUserInput
      | WorkspaceMemberCreateManyUserInput[];
    skipDuplicates?: boolean;
  };

  export type NotificationCreateWithoutUserInput = {
    id?: string;
    title: string;
    content: string;
    isRead?: boolean;
    createdAt?: Date | string;
  };

  export type NotificationUncheckedCreateWithoutUserInput = {
    id?: string;
    title: string;
    content: string;
    isRead?: boolean;
    createdAt?: Date | string;
  };

  export type NotificationCreateOrConnectWithoutUserInput = {
    where: NotificationWhereUniqueInput;
    create: XOR<
      NotificationCreateWithoutUserInput,
      NotificationUncheckedCreateWithoutUserInput
    >;
  };

  export type NotificationCreateManyUserInputEnvelope = {
    data: NotificationCreateManyUserInput | NotificationCreateManyUserInput[];
    skipDuplicates?: boolean;
  };

  export type ActivityCreateWithoutUserInput = {
    id?: string;
    type: $Enums.ActivityType;
    content: string;
    createdAt?: Date | string;
    task?: TaskCreateNestedOneWithoutActivitiesInput;
  };

  export type ActivityUncheckedCreateWithoutUserInput = {
    id?: string;
    type: $Enums.ActivityType;
    content: string;
    createdAt?: Date | string;
    taskId?: string | null;
  };

  export type ActivityCreateOrConnectWithoutUserInput = {
    where: ActivityWhereUniqueInput;
    create: XOR<
      ActivityCreateWithoutUserInput,
      ActivityUncheckedCreateWithoutUserInput
    >;
  };

  export type ActivityCreateManyUserInputEnvelope = {
    data: ActivityCreateManyUserInput | ActivityCreateManyUserInput[];
    skipDuplicates?: boolean;
  };

  export type RoomCreateWithoutOwnerInput = {
    id?: string;
    name: string;
    createdAt?: Date | string;
    whiteboardData?: NullableJsonNullValueInput | InputJsonValue;
    chatMessages?: ChatMessageCreateNestedManyWithoutRoomInput;
  };

  export type RoomUncheckedCreateWithoutOwnerInput = {
    id?: string;
    name: string;
    createdAt?: Date | string;
    whiteboardData?: NullableJsonNullValueInput | InputJsonValue;
    chatMessages?: ChatMessageUncheckedCreateNestedManyWithoutRoomInput;
  };

  export type RoomCreateOrConnectWithoutOwnerInput = {
    where: RoomWhereUniqueInput;
    create: XOR<
      RoomCreateWithoutOwnerInput,
      RoomUncheckedCreateWithoutOwnerInput
    >;
  };

  export type RoomCreateManyOwnerInputEnvelope = {
    data: RoomCreateManyOwnerInput | RoomCreateManyOwnerInput[];
    skipDuplicates?: boolean;
  };

  export type ChatMessageCreateWithoutUserInput = {
    id?: string;
    message: string;
    createdAt?: Date | string;
    room: RoomCreateNestedOneWithoutChatMessagesInput;
  };

  export type ChatMessageUncheckedCreateWithoutUserInput = {
    id?: string;
    roomName: string;
    message: string;
    createdAt?: Date | string;
  };

  export type ChatMessageCreateOrConnectWithoutUserInput = {
    where: ChatMessageWhereUniqueInput;
    create: XOR<
      ChatMessageCreateWithoutUserInput,
      ChatMessageUncheckedCreateWithoutUserInput
    >;
  };

  export type ChatMessageCreateManyUserInputEnvelope = {
    data: ChatMessageCreateManyUserInput | ChatMessageCreateManyUserInput[];
    skipDuplicates?: boolean;
  };

  export type TaskUpsertWithWhereUniqueWithoutAssigneeInput = {
    where: TaskWhereUniqueInput;
    update: XOR<
      TaskUpdateWithoutAssigneeInput,
      TaskUncheckedUpdateWithoutAssigneeInput
    >;
    create: XOR<
      TaskCreateWithoutAssigneeInput,
      TaskUncheckedCreateWithoutAssigneeInput
    >;
  };

  export type TaskUpdateWithWhereUniqueWithoutAssigneeInput = {
    where: TaskWhereUniqueInput;
    data: XOR<
      TaskUpdateWithoutAssigneeInput,
      TaskUncheckedUpdateWithoutAssigneeInput
    >;
  };

  export type TaskUpdateManyWithWhereWithoutAssigneeInput = {
    where: TaskScalarWhereInput;
    data: XOR<
      TaskUpdateManyMutationInput,
      TaskUncheckedUpdateManyWithoutAssigneeInput
    >;
  };

  export type TaskScalarWhereInput = {
    AND?: TaskScalarWhereInput | TaskScalarWhereInput[];
    OR?: TaskScalarWhereInput[];
    NOT?: TaskScalarWhereInput | TaskScalarWhereInput[];
    id?: StringFilter<"Task"> | string;
    title?: StringFilter<"Task"> | string;
    description?: StringNullableFilter<"Task"> | string | null;
    type?: EnumTaskTypeFilter<"Task"> | $Enums.TaskType;
    status?: EnumTaskStatusFilter<"Task"> | $Enums.TaskStatus;
    priority?: EnumPriorityFilter<"Task"> | $Enums.Priority;
    storyPoints?: IntNullableFilter<"Task"> | number | null;
    dueDate?: DateTimeNullableFilter<"Task"> | Date | string | null;
    createdAt?: DateTimeFilter<"Task"> | Date | string;
    updatedAt?: DateTimeFilter<"Task"> | Date | string;
    projectId?: StringFilter<"Task"> | string;
    sprintId?: StringNullableFilter<"Task"> | string | null;
    assigneeId?: StringNullableFilter<"Task"> | string | null;
    creatorId?: StringFilter<"Task"> | string;
    parentId?: StringNullableFilter<"Task"> | string | null;
  };

  export type TaskUpsertWithWhereUniqueWithoutCreatorInput = {
    where: TaskWhereUniqueInput;
    update: XOR<
      TaskUpdateWithoutCreatorInput,
      TaskUncheckedUpdateWithoutCreatorInput
    >;
    create: XOR<
      TaskCreateWithoutCreatorInput,
      TaskUncheckedCreateWithoutCreatorInput
    >;
  };

  export type TaskUpdateWithWhereUniqueWithoutCreatorInput = {
    where: TaskWhereUniqueInput;
    data: XOR<
      TaskUpdateWithoutCreatorInput,
      TaskUncheckedUpdateWithoutCreatorInput
    >;
  };

  export type TaskUpdateManyWithWhereWithoutCreatorInput = {
    where: TaskScalarWhereInput;
    data: XOR<
      TaskUpdateManyMutationInput,
      TaskUncheckedUpdateManyWithoutCreatorInput
    >;
  };

  export type MilestoneUpsertWithWhereUniqueWithoutOwnerInput = {
    where: MilestoneWhereUniqueInput;
    update: XOR<
      MilestoneUpdateWithoutOwnerInput,
      MilestoneUncheckedUpdateWithoutOwnerInput
    >;
    create: XOR<
      MilestoneCreateWithoutOwnerInput,
      MilestoneUncheckedCreateWithoutOwnerInput
    >;
  };

  export type MilestoneUpdateWithWhereUniqueWithoutOwnerInput = {
    where: MilestoneWhereUniqueInput;
    data: XOR<
      MilestoneUpdateWithoutOwnerInput,
      MilestoneUncheckedUpdateWithoutOwnerInput
    >;
  };

  export type MilestoneUpdateManyWithWhereWithoutOwnerInput = {
    where: MilestoneScalarWhereInput;
    data: XOR<
      MilestoneUpdateManyMutationInput,
      MilestoneUncheckedUpdateManyWithoutOwnerInput
    >;
  };

  export type MilestoneScalarWhereInput = {
    AND?: MilestoneScalarWhereInput | MilestoneScalarWhereInput[];
    OR?: MilestoneScalarWhereInput[];
    NOT?: MilestoneScalarWhereInput | MilestoneScalarWhereInput[];
    id?: StringFilter<"Milestone"> | string;
    title?: StringFilter<"Milestone"> | string;
    description?: StringNullableFilter<"Milestone"> | string | null;
    status?: EnumMilestoneStatusFilter<"Milestone"> | $Enums.MilestoneStatus;
    progress?: IntFilter<"Milestone"> | number;
    startDate?: DateTimeNullableFilter<"Milestone"> | Date | string | null;
    endDate?: DateTimeNullableFilter<"Milestone"> | Date | string | null;
    createdAt?: DateTimeFilter<"Milestone"> | Date | string;
    updatedAt?: DateTimeFilter<"Milestone"> | Date | string;
    projectId?: StringFilter<"Milestone"> | string;
    ownerId?: StringFilter<"Milestone"> | string;
  };

  export type SprintUpsertWithWhereUniqueWithoutOwnerInput = {
    where: SprintWhereUniqueInput;
    update: XOR<
      SprintUpdateWithoutOwnerInput,
      SprintUncheckedUpdateWithoutOwnerInput
    >;
    create: XOR<
      SprintCreateWithoutOwnerInput,
      SprintUncheckedCreateWithoutOwnerInput
    >;
  };

  export type SprintUpdateWithWhereUniqueWithoutOwnerInput = {
    where: SprintWhereUniqueInput;
    data: XOR<
      SprintUpdateWithoutOwnerInput,
      SprintUncheckedUpdateWithoutOwnerInput
    >;
  };

  export type SprintUpdateManyWithWhereWithoutOwnerInput = {
    where: SprintScalarWhereInput;
    data: XOR<
      SprintUpdateManyMutationInput,
      SprintUncheckedUpdateManyWithoutOwnerInput
    >;
  };

  export type SprintScalarWhereInput = {
    AND?: SprintScalarWhereInput | SprintScalarWhereInput[];
    OR?: SprintScalarWhereInput[];
    NOT?: SprintScalarWhereInput | SprintScalarWhereInput[];
    id?: StringFilter<"Sprint"> | string;
    name?: StringFilter<"Sprint"> | string;
    goal?: StringNullableFilter<"Sprint"> | string | null;
    status?: EnumSprintStatusFilter<"Sprint"> | $Enums.SprintStatus;
    startDate?: DateTimeNullableFilter<"Sprint"> | Date | string | null;
    endDate?: DateTimeNullableFilter<"Sprint"> | Date | string | null;
    progress?: IntFilter<"Sprint"> | number;
    createdAt?: DateTimeFilter<"Sprint"> | Date | string;
    updatedAt?: DateTimeFilter<"Sprint"> | Date | string;
    projectId?: StringFilter<"Sprint"> | string;
    ownerId?: StringFilter<"Sprint"> | string;
  };

  export type WorkspaceMemberUpsertWithWhereUniqueWithoutUserInput = {
    where: WorkspaceMemberWhereUniqueInput;
    update: XOR<
      WorkspaceMemberUpdateWithoutUserInput,
      WorkspaceMemberUncheckedUpdateWithoutUserInput
    >;
    create: XOR<
      WorkspaceMemberCreateWithoutUserInput,
      WorkspaceMemberUncheckedCreateWithoutUserInput
    >;
  };

  export type WorkspaceMemberUpdateWithWhereUniqueWithoutUserInput = {
    where: WorkspaceMemberWhereUniqueInput;
    data: XOR<
      WorkspaceMemberUpdateWithoutUserInput,
      WorkspaceMemberUncheckedUpdateWithoutUserInput
    >;
  };

  export type WorkspaceMemberUpdateManyWithWhereWithoutUserInput = {
    where: WorkspaceMemberScalarWhereInput;
    data: XOR<
      WorkspaceMemberUpdateManyMutationInput,
      WorkspaceMemberUncheckedUpdateManyWithoutUserInput
    >;
  };

  export type WorkspaceMemberScalarWhereInput = {
    AND?: WorkspaceMemberScalarWhereInput | WorkspaceMemberScalarWhereInput[];
    OR?: WorkspaceMemberScalarWhereInput[];
    NOT?: WorkspaceMemberScalarWhereInput | WorkspaceMemberScalarWhereInput[];
    id?: StringFilter<"WorkspaceMember"> | string;
    workspaceId?: StringFilter<"WorkspaceMember"> | string;
    userId?: StringFilter<"WorkspaceMember"> | string;
    role?: EnumUserRoleFilter<"WorkspaceMember"> | $Enums.UserRole;
    joinedAt?: DateTimeFilter<"WorkspaceMember"> | Date | string;
  };

  export type NotificationUpsertWithWhereUniqueWithoutUserInput = {
    where: NotificationWhereUniqueInput;
    update: XOR<
      NotificationUpdateWithoutUserInput,
      NotificationUncheckedUpdateWithoutUserInput
    >;
    create: XOR<
      NotificationCreateWithoutUserInput,
      NotificationUncheckedCreateWithoutUserInput
    >;
  };

  export type NotificationUpdateWithWhereUniqueWithoutUserInput = {
    where: NotificationWhereUniqueInput;
    data: XOR<
      NotificationUpdateWithoutUserInput,
      NotificationUncheckedUpdateWithoutUserInput
    >;
  };

  export type NotificationUpdateManyWithWhereWithoutUserInput = {
    where: NotificationScalarWhereInput;
    data: XOR<
      NotificationUpdateManyMutationInput,
      NotificationUncheckedUpdateManyWithoutUserInput
    >;
  };

  export type NotificationScalarWhereInput = {
    AND?: NotificationScalarWhereInput | NotificationScalarWhereInput[];
    OR?: NotificationScalarWhereInput[];
    NOT?: NotificationScalarWhereInput | NotificationScalarWhereInput[];
    id?: StringFilter<"Notification"> | string;
    title?: StringFilter<"Notification"> | string;
    content?: StringFilter<"Notification"> | string;
    isRead?: BoolFilter<"Notification"> | boolean;
    createdAt?: DateTimeFilter<"Notification"> | Date | string;
    userId?: StringFilter<"Notification"> | string;
  };

  export type ActivityUpsertWithWhereUniqueWithoutUserInput = {
    where: ActivityWhereUniqueInput;
    update: XOR<
      ActivityUpdateWithoutUserInput,
      ActivityUncheckedUpdateWithoutUserInput
    >;
    create: XOR<
      ActivityCreateWithoutUserInput,
      ActivityUncheckedCreateWithoutUserInput
    >;
  };

  export type ActivityUpdateWithWhereUniqueWithoutUserInput = {
    where: ActivityWhereUniqueInput;
    data: XOR<
      ActivityUpdateWithoutUserInput,
      ActivityUncheckedUpdateWithoutUserInput
    >;
  };

  export type ActivityUpdateManyWithWhereWithoutUserInput = {
    where: ActivityScalarWhereInput;
    data: XOR<
      ActivityUpdateManyMutationInput,
      ActivityUncheckedUpdateManyWithoutUserInput
    >;
  };

  export type ActivityScalarWhereInput = {
    AND?: ActivityScalarWhereInput | ActivityScalarWhereInput[];
    OR?: ActivityScalarWhereInput[];
    NOT?: ActivityScalarWhereInput | ActivityScalarWhereInput[];
    id?: StringFilter<"Activity"> | string;
    type?: EnumActivityTypeFilter<"Activity"> | $Enums.ActivityType;
    content?: StringFilter<"Activity"> | string;
    createdAt?: DateTimeFilter<"Activity"> | Date | string;
    userId?: StringFilter<"Activity"> | string;
    taskId?: StringNullableFilter<"Activity"> | string | null;
  };

  export type RoomUpsertWithWhereUniqueWithoutOwnerInput = {
    where: RoomWhereUniqueInput;
    update: XOR<
      RoomUpdateWithoutOwnerInput,
      RoomUncheckedUpdateWithoutOwnerInput
    >;
    create: XOR<
      RoomCreateWithoutOwnerInput,
      RoomUncheckedCreateWithoutOwnerInput
    >;
  };

  export type RoomUpdateWithWhereUniqueWithoutOwnerInput = {
    where: RoomWhereUniqueInput;
    data: XOR<
      RoomUpdateWithoutOwnerInput,
      RoomUncheckedUpdateWithoutOwnerInput
    >;
  };

  export type RoomUpdateManyWithWhereWithoutOwnerInput = {
    where: RoomScalarWhereInput;
    data: XOR<
      RoomUpdateManyMutationInput,
      RoomUncheckedUpdateManyWithoutOwnerInput
    >;
  };

  export type RoomScalarWhereInput = {
    AND?: RoomScalarWhereInput | RoomScalarWhereInput[];
    OR?: RoomScalarWhereInput[];
    NOT?: RoomScalarWhereInput | RoomScalarWhereInput[];
    id?: StringFilter<"Room"> | string;
    name?: StringFilter<"Room"> | string;
    ownerId?: StringFilter<"Room"> | string;
    createdAt?: DateTimeFilter<"Room"> | Date | string;
    whiteboardData?: JsonNullableFilter<"Room">;
  };

  export type ChatMessageUpsertWithWhereUniqueWithoutUserInput = {
    where: ChatMessageWhereUniqueInput;
    update: XOR<
      ChatMessageUpdateWithoutUserInput,
      ChatMessageUncheckedUpdateWithoutUserInput
    >;
    create: XOR<
      ChatMessageCreateWithoutUserInput,
      ChatMessageUncheckedCreateWithoutUserInput
    >;
  };

  export type ChatMessageUpdateWithWhereUniqueWithoutUserInput = {
    where: ChatMessageWhereUniqueInput;
    data: XOR<
      ChatMessageUpdateWithoutUserInput,
      ChatMessageUncheckedUpdateWithoutUserInput
    >;
  };

  export type ChatMessageUpdateManyWithWhereWithoutUserInput = {
    where: ChatMessageScalarWhereInput;
    data: XOR<
      ChatMessageUpdateManyMutationInput,
      ChatMessageUncheckedUpdateManyWithoutUserInput
    >;
  };

  export type ChatMessageScalarWhereInput = {
    AND?: ChatMessageScalarWhereInput | ChatMessageScalarWhereInput[];
    OR?: ChatMessageScalarWhereInput[];
    NOT?: ChatMessageScalarWhereInput | ChatMessageScalarWhereInput[];
    id?: StringFilter<"ChatMessage"> | string;
    roomName?: StringFilter<"ChatMessage"> | string;
    userId?: StringFilter<"ChatMessage"> | string;
    message?: StringFilter<"ChatMessage"> | string;
    createdAt?: DateTimeFilter<"ChatMessage"> | Date | string;
  };

  export type UserCreateWithoutRoomsInput = {
    id?: string;
    email?: string | null;
    name?: string | null;
    role?: $Enums.UserRole;
    createdAt?: Date | string;
    updatedAt?: Date | string;
    assignedTasks?: TaskCreateNestedManyWithoutAssigneeInput;
    createdTasks?: TaskCreateNestedManyWithoutCreatorInput;
    ownedMilestones?: MilestoneCreateNestedManyWithoutOwnerInput;
    ownedSprints?: SprintCreateNestedManyWithoutOwnerInput;
    workspaces?: WorkspaceMemberCreateNestedManyWithoutUserInput;
    notifications?: NotificationCreateNestedManyWithoutUserInput;
    activities?: ActivityCreateNestedManyWithoutUserInput;
    messages?: ChatMessageCreateNestedManyWithoutUserInput;
  };

  export type UserUncheckedCreateWithoutRoomsInput = {
    id?: string;
    email?: string | null;
    name?: string | null;
    role?: $Enums.UserRole;
    createdAt?: Date | string;
    updatedAt?: Date | string;
    assignedTasks?: TaskUncheckedCreateNestedManyWithoutAssigneeInput;
    createdTasks?: TaskUncheckedCreateNestedManyWithoutCreatorInput;
    ownedMilestones?: MilestoneUncheckedCreateNestedManyWithoutOwnerInput;
    ownedSprints?: SprintUncheckedCreateNestedManyWithoutOwnerInput;
    workspaces?: WorkspaceMemberUncheckedCreateNestedManyWithoutUserInput;
    notifications?: NotificationUncheckedCreateNestedManyWithoutUserInput;
    activities?: ActivityUncheckedCreateNestedManyWithoutUserInput;
    messages?: ChatMessageUncheckedCreateNestedManyWithoutUserInput;
  };

  export type UserCreateOrConnectWithoutRoomsInput = {
    where: UserWhereUniqueInput;
    create: XOR<
      UserCreateWithoutRoomsInput,
      UserUncheckedCreateWithoutRoomsInput
    >;
  };

  export type ChatMessageCreateWithoutRoomInput = {
    id?: string;
    message: string;
    createdAt?: Date | string;
    user: UserCreateNestedOneWithoutMessagesInput;
  };

  export type ChatMessageUncheckedCreateWithoutRoomInput = {
    id?: string;
    userId: string;
    message: string;
    createdAt?: Date | string;
  };

  export type ChatMessageCreateOrConnectWithoutRoomInput = {
    where: ChatMessageWhereUniqueInput;
    create: XOR<
      ChatMessageCreateWithoutRoomInput,
      ChatMessageUncheckedCreateWithoutRoomInput
    >;
  };

  export type ChatMessageCreateManyRoomInputEnvelope = {
    data: ChatMessageCreateManyRoomInput | ChatMessageCreateManyRoomInput[];
    skipDuplicates?: boolean;
  };

  export type UserUpsertWithoutRoomsInput = {
    update: XOR<
      UserUpdateWithoutRoomsInput,
      UserUncheckedUpdateWithoutRoomsInput
    >;
    create: XOR<
      UserCreateWithoutRoomsInput,
      UserUncheckedCreateWithoutRoomsInput
    >;
    where?: UserWhereInput;
  };

  export type UserUpdateToOneWithWhereWithoutRoomsInput = {
    where?: UserWhereInput;
    data: XOR<
      UserUpdateWithoutRoomsInput,
      UserUncheckedUpdateWithoutRoomsInput
    >;
  };

  export type UserUpdateWithoutRoomsInput = {
    id?: StringFieldUpdateOperationsInput | string;
    email?: NullableStringFieldUpdateOperationsInput | string | null;
    name?: NullableStringFieldUpdateOperationsInput | string | null;
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole;
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string;
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string;
    assignedTasks?: TaskUpdateManyWithoutAssigneeNestedInput;
    createdTasks?: TaskUpdateManyWithoutCreatorNestedInput;
    ownedMilestones?: MilestoneUpdateManyWithoutOwnerNestedInput;
    ownedSprints?: SprintUpdateManyWithoutOwnerNestedInput;
    workspaces?: WorkspaceMemberUpdateManyWithoutUserNestedInput;
    notifications?: NotificationUpdateManyWithoutUserNestedInput;
    activities?: ActivityUpdateManyWithoutUserNestedInput;
    messages?: ChatMessageUpdateManyWithoutUserNestedInput;
  };

  export type UserUncheckedUpdateWithoutRoomsInput = {
    id?: StringFieldUpdateOperationsInput | string;
    email?: NullableStringFieldUpdateOperationsInput | string | null;
    name?: NullableStringFieldUpdateOperationsInput | string | null;
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole;
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string;
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string;
    assignedTasks?: TaskUncheckedUpdateManyWithoutAssigneeNestedInput;
    createdTasks?: TaskUncheckedUpdateManyWithoutCreatorNestedInput;
    ownedMilestones?: MilestoneUncheckedUpdateManyWithoutOwnerNestedInput;
    ownedSprints?: SprintUncheckedUpdateManyWithoutOwnerNestedInput;
    workspaces?: WorkspaceMemberUncheckedUpdateManyWithoutUserNestedInput;
    notifications?: NotificationUncheckedUpdateManyWithoutUserNestedInput;
    activities?: ActivityUncheckedUpdateManyWithoutUserNestedInput;
    messages?: ChatMessageUncheckedUpdateManyWithoutUserNestedInput;
  };

  export type ChatMessageUpsertWithWhereUniqueWithoutRoomInput = {
    where: ChatMessageWhereUniqueInput;
    update: XOR<
      ChatMessageUpdateWithoutRoomInput,
      ChatMessageUncheckedUpdateWithoutRoomInput
    >;
    create: XOR<
      ChatMessageCreateWithoutRoomInput,
      ChatMessageUncheckedCreateWithoutRoomInput
    >;
  };

  export type ChatMessageUpdateWithWhereUniqueWithoutRoomInput = {
    where: ChatMessageWhereUniqueInput;
    data: XOR<
      ChatMessageUpdateWithoutRoomInput,
      ChatMessageUncheckedUpdateWithoutRoomInput
    >;
  };

  export type ChatMessageUpdateManyWithWhereWithoutRoomInput = {
    where: ChatMessageScalarWhereInput;
    data: XOR<
      ChatMessageUpdateManyMutationInput,
      ChatMessageUncheckedUpdateManyWithoutRoomInput
    >;
  };

  export type RoomCreateWithoutChatMessagesInput = {
    id?: string;
    name: string;
    createdAt?: Date | string;
    whiteboardData?: NullableJsonNullValueInput | InputJsonValue;
    owner: UserCreateNestedOneWithoutRoomsInput;
  };

  export type RoomUncheckedCreateWithoutChatMessagesInput = {
    id?: string;
    name: string;
    ownerId: string;
    createdAt?: Date | string;
    whiteboardData?: NullableJsonNullValueInput | InputJsonValue;
  };

  export type RoomCreateOrConnectWithoutChatMessagesInput = {
    where: RoomWhereUniqueInput;
    create: XOR<
      RoomCreateWithoutChatMessagesInput,
      RoomUncheckedCreateWithoutChatMessagesInput
    >;
  };

  export type UserCreateWithoutMessagesInput = {
    id?: string;
    email?: string | null;
    name?: string | null;
    role?: $Enums.UserRole;
    createdAt?: Date | string;
    updatedAt?: Date | string;
    assignedTasks?: TaskCreateNestedManyWithoutAssigneeInput;
    createdTasks?: TaskCreateNestedManyWithoutCreatorInput;
    ownedMilestones?: MilestoneCreateNestedManyWithoutOwnerInput;
    ownedSprints?: SprintCreateNestedManyWithoutOwnerInput;
    workspaces?: WorkspaceMemberCreateNestedManyWithoutUserInput;
    notifications?: NotificationCreateNestedManyWithoutUserInput;
    activities?: ActivityCreateNestedManyWithoutUserInput;
    rooms?: RoomCreateNestedManyWithoutOwnerInput;
  };

  export type UserUncheckedCreateWithoutMessagesInput = {
    id?: string;
    email?: string | null;
    name?: string | null;
    role?: $Enums.UserRole;
    createdAt?: Date | string;
    updatedAt?: Date | string;
    assignedTasks?: TaskUncheckedCreateNestedManyWithoutAssigneeInput;
    createdTasks?: TaskUncheckedCreateNestedManyWithoutCreatorInput;
    ownedMilestones?: MilestoneUncheckedCreateNestedManyWithoutOwnerInput;
    ownedSprints?: SprintUncheckedCreateNestedManyWithoutOwnerInput;
    workspaces?: WorkspaceMemberUncheckedCreateNestedManyWithoutUserInput;
    notifications?: NotificationUncheckedCreateNestedManyWithoutUserInput;
    activities?: ActivityUncheckedCreateNestedManyWithoutUserInput;
    rooms?: RoomUncheckedCreateNestedManyWithoutOwnerInput;
  };

  export type UserCreateOrConnectWithoutMessagesInput = {
    where: UserWhereUniqueInput;
    create: XOR<
      UserCreateWithoutMessagesInput,
      UserUncheckedCreateWithoutMessagesInput
    >;
  };

  export type RoomUpsertWithoutChatMessagesInput = {
    update: XOR<
      RoomUpdateWithoutChatMessagesInput,
      RoomUncheckedUpdateWithoutChatMessagesInput
    >;
    create: XOR<
      RoomCreateWithoutChatMessagesInput,
      RoomUncheckedCreateWithoutChatMessagesInput
    >;
    where?: RoomWhereInput;
  };

  export type RoomUpdateToOneWithWhereWithoutChatMessagesInput = {
    where?: RoomWhereInput;
    data: XOR<
      RoomUpdateWithoutChatMessagesInput,
      RoomUncheckedUpdateWithoutChatMessagesInput
    >;
  };

  export type RoomUpdateWithoutChatMessagesInput = {
    id?: StringFieldUpdateOperationsInput | string;
    name?: StringFieldUpdateOperationsInput | string;
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string;
    whiteboardData?: NullableJsonNullValueInput | InputJsonValue;
    owner?: UserUpdateOneRequiredWithoutRoomsNestedInput;
  };

  export type RoomUncheckedUpdateWithoutChatMessagesInput = {
    id?: StringFieldUpdateOperationsInput | string;
    name?: StringFieldUpdateOperationsInput | string;
    ownerId?: StringFieldUpdateOperationsInput | string;
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string;
    whiteboardData?: NullableJsonNullValueInput | InputJsonValue;
  };

  export type UserUpsertWithoutMessagesInput = {
    update: XOR<
      UserUpdateWithoutMessagesInput,
      UserUncheckedUpdateWithoutMessagesInput
    >;
    create: XOR<
      UserCreateWithoutMessagesInput,
      UserUncheckedCreateWithoutMessagesInput
    >;
    where?: UserWhereInput;
  };

  export type UserUpdateToOneWithWhereWithoutMessagesInput = {
    where?: UserWhereInput;
    data: XOR<
      UserUpdateWithoutMessagesInput,
      UserUncheckedUpdateWithoutMessagesInput
    >;
  };

  export type UserUpdateWithoutMessagesInput = {
    id?: StringFieldUpdateOperationsInput | string;
    email?: NullableStringFieldUpdateOperationsInput | string | null;
    name?: NullableStringFieldUpdateOperationsInput | string | null;
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole;
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string;
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string;
    assignedTasks?: TaskUpdateManyWithoutAssigneeNestedInput;
    createdTasks?: TaskUpdateManyWithoutCreatorNestedInput;
    ownedMilestones?: MilestoneUpdateManyWithoutOwnerNestedInput;
    ownedSprints?: SprintUpdateManyWithoutOwnerNestedInput;
    workspaces?: WorkspaceMemberUpdateManyWithoutUserNestedInput;
    notifications?: NotificationUpdateManyWithoutUserNestedInput;
    activities?: ActivityUpdateManyWithoutUserNestedInput;
    rooms?: RoomUpdateManyWithoutOwnerNestedInput;
  };

  export type UserUncheckedUpdateWithoutMessagesInput = {
    id?: StringFieldUpdateOperationsInput | string;
    email?: NullableStringFieldUpdateOperationsInput | string | null;
    name?: NullableStringFieldUpdateOperationsInput | string | null;
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole;
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string;
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string;
    assignedTasks?: TaskUncheckedUpdateManyWithoutAssigneeNestedInput;
    createdTasks?: TaskUncheckedUpdateManyWithoutCreatorNestedInput;
    ownedMilestones?: MilestoneUncheckedUpdateManyWithoutOwnerNestedInput;
    ownedSprints?: SprintUncheckedUpdateManyWithoutOwnerNestedInput;
    workspaces?: WorkspaceMemberUncheckedUpdateManyWithoutUserNestedInput;
    notifications?: NotificationUncheckedUpdateManyWithoutUserNestedInput;
    activities?: ActivityUncheckedUpdateManyWithoutUserNestedInput;
    rooms?: RoomUncheckedUpdateManyWithoutOwnerNestedInput;
  };

  export type WorkspaceMemberCreateWithoutWorkspaceInput = {
    id?: string;
    role?: $Enums.UserRole;
    joinedAt?: Date | string;
    user: UserCreateNestedOneWithoutWorkspacesInput;
  };

  export type WorkspaceMemberUncheckedCreateWithoutWorkspaceInput = {
    id?: string;
    userId: string;
    role?: $Enums.UserRole;
    joinedAt?: Date | string;
  };

  export type WorkspaceMemberCreateOrConnectWithoutWorkspaceInput = {
    where: WorkspaceMemberWhereUniqueInput;
    create: XOR<
      WorkspaceMemberCreateWithoutWorkspaceInput,
      WorkspaceMemberUncheckedCreateWithoutWorkspaceInput
    >;
  };

  export type WorkspaceMemberCreateManyWorkspaceInputEnvelope = {
    data:
      | WorkspaceMemberCreateManyWorkspaceInput
      | WorkspaceMemberCreateManyWorkspaceInput[];
    skipDuplicates?: boolean;
  };

  export type ProjectCreateWithoutWorkspaceInput = {
    id?: string;
    name: string;
    description?: string | null;
    key: string;
    status?: $Enums.ProjectStatus;
    progress?: number;
    createdAt?: Date | string;
    updatedAt?: Date | string;
    tasks?: TaskCreateNestedManyWithoutProjectInput;
    sprints?: SprintCreateNestedManyWithoutProjectInput;
    milestones?: MilestoneCreateNestedManyWithoutProjectInput;
  };

  export type ProjectUncheckedCreateWithoutWorkspaceInput = {
    id?: string;
    name: string;
    description?: string | null;
    key: string;
    status?: $Enums.ProjectStatus;
    progress?: number;
    createdAt?: Date | string;
    updatedAt?: Date | string;
    tasks?: TaskUncheckedCreateNestedManyWithoutProjectInput;
    sprints?: SprintUncheckedCreateNestedManyWithoutProjectInput;
    milestones?: MilestoneUncheckedCreateNestedManyWithoutProjectInput;
  };

  export type ProjectCreateOrConnectWithoutWorkspaceInput = {
    where: ProjectWhereUniqueInput;
    create: XOR<
      ProjectCreateWithoutWorkspaceInput,
      ProjectUncheckedCreateWithoutWorkspaceInput
    >;
  };

  export type ProjectCreateManyWorkspaceInputEnvelope = {
    data: ProjectCreateManyWorkspaceInput | ProjectCreateManyWorkspaceInput[];
    skipDuplicates?: boolean;
  };

  export type WorkspaceMemberUpsertWithWhereUniqueWithoutWorkspaceInput = {
    where: WorkspaceMemberWhereUniqueInput;
    update: XOR<
      WorkspaceMemberUpdateWithoutWorkspaceInput,
      WorkspaceMemberUncheckedUpdateWithoutWorkspaceInput
    >;
    create: XOR<
      WorkspaceMemberCreateWithoutWorkspaceInput,
      WorkspaceMemberUncheckedCreateWithoutWorkspaceInput
    >;
  };

  export type WorkspaceMemberUpdateWithWhereUniqueWithoutWorkspaceInput = {
    where: WorkspaceMemberWhereUniqueInput;
    data: XOR<
      WorkspaceMemberUpdateWithoutWorkspaceInput,
      WorkspaceMemberUncheckedUpdateWithoutWorkspaceInput
    >;
  };

  export type WorkspaceMemberUpdateManyWithWhereWithoutWorkspaceInput = {
    where: WorkspaceMemberScalarWhereInput;
    data: XOR<
      WorkspaceMemberUpdateManyMutationInput,
      WorkspaceMemberUncheckedUpdateManyWithoutWorkspaceInput
    >;
  };

  export type ProjectUpsertWithWhereUniqueWithoutWorkspaceInput = {
    where: ProjectWhereUniqueInput;
    update: XOR<
      ProjectUpdateWithoutWorkspaceInput,
      ProjectUncheckedUpdateWithoutWorkspaceInput
    >;
    create: XOR<
      ProjectCreateWithoutWorkspaceInput,
      ProjectUncheckedCreateWithoutWorkspaceInput
    >;
  };

  export type ProjectUpdateWithWhereUniqueWithoutWorkspaceInput = {
    where: ProjectWhereUniqueInput;
    data: XOR<
      ProjectUpdateWithoutWorkspaceInput,
      ProjectUncheckedUpdateWithoutWorkspaceInput
    >;
  };

  export type ProjectUpdateManyWithWhereWithoutWorkspaceInput = {
    where: ProjectScalarWhereInput;
    data: XOR<
      ProjectUpdateManyMutationInput,
      ProjectUncheckedUpdateManyWithoutWorkspaceInput
    >;
  };

  export type ProjectScalarWhereInput = {
    AND?: ProjectScalarWhereInput | ProjectScalarWhereInput[];
    OR?: ProjectScalarWhereInput[];
    NOT?: ProjectScalarWhereInput | ProjectScalarWhereInput[];
    id?: StringFilter<"Project"> | string;
    name?: StringFilter<"Project"> | string;
    description?: StringNullableFilter<"Project"> | string | null;
    key?: StringFilter<"Project"> | string;
    status?: EnumProjectStatusFilter<"Project"> | $Enums.ProjectStatus;
    progress?: IntFilter<"Project"> | number;
    createdAt?: DateTimeFilter<"Project"> | Date | string;
    updatedAt?: DateTimeFilter<"Project"> | Date | string;
    workspaceId?: StringFilter<"Project"> | string;
  };

  export type WorkspaceCreateWithoutMembersInput = {
    id?: string;
    name: string;
    createdAt?: Date | string;
    updatedAt?: Date | string;
    projects?: ProjectCreateNestedManyWithoutWorkspaceInput;
  };

  export type WorkspaceUncheckedCreateWithoutMembersInput = {
    id?: string;
    name: string;
    createdAt?: Date | string;
    updatedAt?: Date | string;
    projects?: ProjectUncheckedCreateNestedManyWithoutWorkspaceInput;
  };

  export type WorkspaceCreateOrConnectWithoutMembersInput = {
    where: WorkspaceWhereUniqueInput;
    create: XOR<
      WorkspaceCreateWithoutMembersInput,
      WorkspaceUncheckedCreateWithoutMembersInput
    >;
  };

  export type UserCreateWithoutWorkspacesInput = {
    id?: string;
    email?: string | null;
    name?: string | null;
    role?: $Enums.UserRole;
    createdAt?: Date | string;
    updatedAt?: Date | string;
    assignedTasks?: TaskCreateNestedManyWithoutAssigneeInput;
    createdTasks?: TaskCreateNestedManyWithoutCreatorInput;
    ownedMilestones?: MilestoneCreateNestedManyWithoutOwnerInput;
    ownedSprints?: SprintCreateNestedManyWithoutOwnerInput;
    notifications?: NotificationCreateNestedManyWithoutUserInput;
    activities?: ActivityCreateNestedManyWithoutUserInput;
    rooms?: RoomCreateNestedManyWithoutOwnerInput;
    messages?: ChatMessageCreateNestedManyWithoutUserInput;
  };

  export type UserUncheckedCreateWithoutWorkspacesInput = {
    id?: string;
    email?: string | null;
    name?: string | null;
    role?: $Enums.UserRole;
    createdAt?: Date | string;
    updatedAt?: Date | string;
    assignedTasks?: TaskUncheckedCreateNestedManyWithoutAssigneeInput;
    createdTasks?: TaskUncheckedCreateNestedManyWithoutCreatorInput;
    ownedMilestones?: MilestoneUncheckedCreateNestedManyWithoutOwnerInput;
    ownedSprints?: SprintUncheckedCreateNestedManyWithoutOwnerInput;
    notifications?: NotificationUncheckedCreateNestedManyWithoutUserInput;
    activities?: ActivityUncheckedCreateNestedManyWithoutUserInput;
    rooms?: RoomUncheckedCreateNestedManyWithoutOwnerInput;
    messages?: ChatMessageUncheckedCreateNestedManyWithoutUserInput;
  };

  export type UserCreateOrConnectWithoutWorkspacesInput = {
    where: UserWhereUniqueInput;
    create: XOR<
      UserCreateWithoutWorkspacesInput,
      UserUncheckedCreateWithoutWorkspacesInput
    >;
  };

  export type WorkspaceUpsertWithoutMembersInput = {
    update: XOR<
      WorkspaceUpdateWithoutMembersInput,
      WorkspaceUncheckedUpdateWithoutMembersInput
    >;
    create: XOR<
      WorkspaceCreateWithoutMembersInput,
      WorkspaceUncheckedCreateWithoutMembersInput
    >;
    where?: WorkspaceWhereInput;
  };

  export type WorkspaceUpdateToOneWithWhereWithoutMembersInput = {
    where?: WorkspaceWhereInput;
    data: XOR<
      WorkspaceUpdateWithoutMembersInput,
      WorkspaceUncheckedUpdateWithoutMembersInput
    >;
  };

  export type WorkspaceUpdateWithoutMembersInput = {
    id?: StringFieldUpdateOperationsInput | string;
    name?: StringFieldUpdateOperationsInput | string;
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string;
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string;
    projects?: ProjectUpdateManyWithoutWorkspaceNestedInput;
  };

  export type WorkspaceUncheckedUpdateWithoutMembersInput = {
    id?: StringFieldUpdateOperationsInput | string;
    name?: StringFieldUpdateOperationsInput | string;
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string;
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string;
    projects?: ProjectUncheckedUpdateManyWithoutWorkspaceNestedInput;
  };

  export type UserUpsertWithoutWorkspacesInput = {
    update: XOR<
      UserUpdateWithoutWorkspacesInput,
      UserUncheckedUpdateWithoutWorkspacesInput
    >;
    create: XOR<
      UserCreateWithoutWorkspacesInput,
      UserUncheckedCreateWithoutWorkspacesInput
    >;
    where?: UserWhereInput;
  };

  export type UserUpdateToOneWithWhereWithoutWorkspacesInput = {
    where?: UserWhereInput;
    data: XOR<
      UserUpdateWithoutWorkspacesInput,
      UserUncheckedUpdateWithoutWorkspacesInput
    >;
  };

  export type UserUpdateWithoutWorkspacesInput = {
    id?: StringFieldUpdateOperationsInput | string;
    email?: NullableStringFieldUpdateOperationsInput | string | null;
    name?: NullableStringFieldUpdateOperationsInput | string | null;
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole;
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string;
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string;
    assignedTasks?: TaskUpdateManyWithoutAssigneeNestedInput;
    createdTasks?: TaskUpdateManyWithoutCreatorNestedInput;
    ownedMilestones?: MilestoneUpdateManyWithoutOwnerNestedInput;
    ownedSprints?: SprintUpdateManyWithoutOwnerNestedInput;
    notifications?: NotificationUpdateManyWithoutUserNestedInput;
    activities?: ActivityUpdateManyWithoutUserNestedInput;
    rooms?: RoomUpdateManyWithoutOwnerNestedInput;
    messages?: ChatMessageUpdateManyWithoutUserNestedInput;
  };

  export type UserUncheckedUpdateWithoutWorkspacesInput = {
    id?: StringFieldUpdateOperationsInput | string;
    email?: NullableStringFieldUpdateOperationsInput | string | null;
    name?: NullableStringFieldUpdateOperationsInput | string | null;
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole;
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string;
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string;
    assignedTasks?: TaskUncheckedUpdateManyWithoutAssigneeNestedInput;
    createdTasks?: TaskUncheckedUpdateManyWithoutCreatorNestedInput;
    ownedMilestones?: MilestoneUncheckedUpdateManyWithoutOwnerNestedInput;
    ownedSprints?: SprintUncheckedUpdateManyWithoutOwnerNestedInput;
    notifications?: NotificationUncheckedUpdateManyWithoutUserNestedInput;
    activities?: ActivityUncheckedUpdateManyWithoutUserNestedInput;
    rooms?: RoomUncheckedUpdateManyWithoutOwnerNestedInput;
    messages?: ChatMessageUncheckedUpdateManyWithoutUserNestedInput;
  };

  export type WorkspaceCreateWithoutProjectsInput = {
    id?: string;
    name: string;
    createdAt?: Date | string;
    updatedAt?: Date | string;
    members?: WorkspaceMemberCreateNestedManyWithoutWorkspaceInput;
  };

  export type WorkspaceUncheckedCreateWithoutProjectsInput = {
    id?: string;
    name: string;
    createdAt?: Date | string;
    updatedAt?: Date | string;
    members?: WorkspaceMemberUncheckedCreateNestedManyWithoutWorkspaceInput;
  };

  export type WorkspaceCreateOrConnectWithoutProjectsInput = {
    where: WorkspaceWhereUniqueInput;
    create: XOR<
      WorkspaceCreateWithoutProjectsInput,
      WorkspaceUncheckedCreateWithoutProjectsInput
    >;
  };

  export type TaskCreateWithoutProjectInput = {
    id?: string;
    title: string;
    description?: string | null;
    type?: $Enums.TaskType;
    status?: $Enums.TaskStatus;
    priority?: $Enums.Priority;
    storyPoints?: number | null;
    dueDate?: Date | string | null;
    createdAt?: Date | string;
    updatedAt?: Date | string;
    parentId?: string | null;
    sprint?: SprintCreateNestedOneWithoutTasksInput;
    assignee?: UserCreateNestedOneWithoutAssignedTasksInput;
    creator: UserCreateNestedOneWithoutCreatedTasksInput;
    tags?: TaskTagCreateNestedManyWithoutTaskInput;
    activities?: ActivityCreateNestedManyWithoutTaskInput;
  };

  export type TaskUncheckedCreateWithoutProjectInput = {
    id?: string;
    title: string;
    description?: string | null;
    type?: $Enums.TaskType;
    status?: $Enums.TaskStatus;
    priority?: $Enums.Priority;
    storyPoints?: number | null;
    dueDate?: Date | string | null;
    createdAt?: Date | string;
    updatedAt?: Date | string;
    sprintId?: string | null;
    assigneeId?: string | null;
    creatorId: string;
    parentId?: string | null;
    tags?: TaskTagUncheckedCreateNestedManyWithoutTaskInput;
    activities?: ActivityUncheckedCreateNestedManyWithoutTaskInput;
  };

  export type TaskCreateOrConnectWithoutProjectInput = {
    where: TaskWhereUniqueInput;
    create: XOR<
      TaskCreateWithoutProjectInput,
      TaskUncheckedCreateWithoutProjectInput
    >;
  };

  export type TaskCreateManyProjectInputEnvelope = {
    data: TaskCreateManyProjectInput | TaskCreateManyProjectInput[];
    skipDuplicates?: boolean;
  };

  export type SprintCreateWithoutProjectInput = {
    id?: string;
    name: string;
    goal?: string | null;
    status?: $Enums.SprintStatus;
    startDate?: Date | string | null;
    endDate?: Date | string | null;
    progress?: number;
    createdAt?: Date | string;
    updatedAt?: Date | string;
    owner: UserCreateNestedOneWithoutOwnedSprintsInput;
    tasks?: TaskCreateNestedManyWithoutSprintInput;
  };

  export type SprintUncheckedCreateWithoutProjectInput = {
    id?: string;
    name: string;
    goal?: string | null;
    status?: $Enums.SprintStatus;
    startDate?: Date | string | null;
    endDate?: Date | string | null;
    progress?: number;
    createdAt?: Date | string;
    updatedAt?: Date | string;
    ownerId: string;
    tasks?: TaskUncheckedCreateNestedManyWithoutSprintInput;
  };

  export type SprintCreateOrConnectWithoutProjectInput = {
    where: SprintWhereUniqueInput;
    create: XOR<
      SprintCreateWithoutProjectInput,
      SprintUncheckedCreateWithoutProjectInput
    >;
  };

  export type SprintCreateManyProjectInputEnvelope = {
    data: SprintCreateManyProjectInput | SprintCreateManyProjectInput[];
    skipDuplicates?: boolean;
  };

  export type MilestoneCreateWithoutProjectInput = {
    id?: string;
    title: string;
    description?: string | null;
    status?: $Enums.MilestoneStatus;
    progress?: number;
    startDate?: Date | string | null;
    endDate?: Date | string | null;
    createdAt?: Date | string;
    updatedAt?: Date | string;
    owner: UserCreateNestedOneWithoutOwnedMilestonesInput;
    dependencies?: MilestoneDependencyCreateNestedManyWithoutMilestoneInput;
    dependents?: MilestoneDependencyCreateNestedManyWithoutDependsOnInput;
  };

  export type MilestoneUncheckedCreateWithoutProjectInput = {
    id?: string;
    title: string;
    description?: string | null;
    status?: $Enums.MilestoneStatus;
    progress?: number;
    startDate?: Date | string | null;
    endDate?: Date | string | null;
    createdAt?: Date | string;
    updatedAt?: Date | string;
    ownerId: string;
    dependencies?: MilestoneDependencyUncheckedCreateNestedManyWithoutMilestoneInput;
    dependents?: MilestoneDependencyUncheckedCreateNestedManyWithoutDependsOnInput;
  };

  export type MilestoneCreateOrConnectWithoutProjectInput = {
    where: MilestoneWhereUniqueInput;
    create: XOR<
      MilestoneCreateWithoutProjectInput,
      MilestoneUncheckedCreateWithoutProjectInput
    >;
  };

  export type MilestoneCreateManyProjectInputEnvelope = {
    data: MilestoneCreateManyProjectInput | MilestoneCreateManyProjectInput[];
    skipDuplicates?: boolean;
  };

  export type WorkspaceUpsertWithoutProjectsInput = {
    update: XOR<
      WorkspaceUpdateWithoutProjectsInput,
      WorkspaceUncheckedUpdateWithoutProjectsInput
    >;
    create: XOR<
      WorkspaceCreateWithoutProjectsInput,
      WorkspaceUncheckedCreateWithoutProjectsInput
    >;
    where?: WorkspaceWhereInput;
  };

  export type WorkspaceUpdateToOneWithWhereWithoutProjectsInput = {
    where?: WorkspaceWhereInput;
    data: XOR<
      WorkspaceUpdateWithoutProjectsInput,
      WorkspaceUncheckedUpdateWithoutProjectsInput
    >;
  };

  export type WorkspaceUpdateWithoutProjectsInput = {
    id?: StringFieldUpdateOperationsInput | string;
    name?: StringFieldUpdateOperationsInput | string;
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string;
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string;
    members?: WorkspaceMemberUpdateManyWithoutWorkspaceNestedInput;
  };

  export type WorkspaceUncheckedUpdateWithoutProjectsInput = {
    id?: StringFieldUpdateOperationsInput | string;
    name?: StringFieldUpdateOperationsInput | string;
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string;
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string;
    members?: WorkspaceMemberUncheckedUpdateManyWithoutWorkspaceNestedInput;
  };

  export type TaskUpsertWithWhereUniqueWithoutProjectInput = {
    where: TaskWhereUniqueInput;
    update: XOR<
      TaskUpdateWithoutProjectInput,
      TaskUncheckedUpdateWithoutProjectInput
    >;
    create: XOR<
      TaskCreateWithoutProjectInput,
      TaskUncheckedCreateWithoutProjectInput
    >;
  };

  export type TaskUpdateWithWhereUniqueWithoutProjectInput = {
    where: TaskWhereUniqueInput;
    data: XOR<
      TaskUpdateWithoutProjectInput,
      TaskUncheckedUpdateWithoutProjectInput
    >;
  };

  export type TaskUpdateManyWithWhereWithoutProjectInput = {
    where: TaskScalarWhereInput;
    data: XOR<
      TaskUpdateManyMutationInput,
      TaskUncheckedUpdateManyWithoutProjectInput
    >;
  };

  export type SprintUpsertWithWhereUniqueWithoutProjectInput = {
    where: SprintWhereUniqueInput;
    update: XOR<
      SprintUpdateWithoutProjectInput,
      SprintUncheckedUpdateWithoutProjectInput
    >;
    create: XOR<
      SprintCreateWithoutProjectInput,
      SprintUncheckedCreateWithoutProjectInput
    >;
  };

  export type SprintUpdateWithWhereUniqueWithoutProjectInput = {
    where: SprintWhereUniqueInput;
    data: XOR<
      SprintUpdateWithoutProjectInput,
      SprintUncheckedUpdateWithoutProjectInput
    >;
  };

  export type SprintUpdateManyWithWhereWithoutProjectInput = {
    where: SprintScalarWhereInput;
    data: XOR<
      SprintUpdateManyMutationInput,
      SprintUncheckedUpdateManyWithoutProjectInput
    >;
  };

  export type MilestoneUpsertWithWhereUniqueWithoutProjectInput = {
    where: MilestoneWhereUniqueInput;
    update: XOR<
      MilestoneUpdateWithoutProjectInput,
      MilestoneUncheckedUpdateWithoutProjectInput
    >;
    create: XOR<
      MilestoneCreateWithoutProjectInput,
      MilestoneUncheckedCreateWithoutProjectInput
    >;
  };

  export type MilestoneUpdateWithWhereUniqueWithoutProjectInput = {
    where: MilestoneWhereUniqueInput;
    data: XOR<
      MilestoneUpdateWithoutProjectInput,
      MilestoneUncheckedUpdateWithoutProjectInput
    >;
  };

  export type MilestoneUpdateManyWithWhereWithoutProjectInput = {
    where: MilestoneScalarWhereInput;
    data: XOR<
      MilestoneUpdateManyMutationInput,
      MilestoneUncheckedUpdateManyWithoutProjectInput
    >;
  };

  export type ProjectCreateWithoutTasksInput = {
    id?: string;
    name: string;
    description?: string | null;
    key: string;
    status?: $Enums.ProjectStatus;
    progress?: number;
    createdAt?: Date | string;
    updatedAt?: Date | string;
    workspace: WorkspaceCreateNestedOneWithoutProjectsInput;
    sprints?: SprintCreateNestedManyWithoutProjectInput;
    milestones?: MilestoneCreateNestedManyWithoutProjectInput;
  };

  export type ProjectUncheckedCreateWithoutTasksInput = {
    id?: string;
    name: string;
    description?: string | null;
    key: string;
    status?: $Enums.ProjectStatus;
    progress?: number;
    createdAt?: Date | string;
    updatedAt?: Date | string;
    workspaceId: string;
    sprints?: SprintUncheckedCreateNestedManyWithoutProjectInput;
    milestones?: MilestoneUncheckedCreateNestedManyWithoutProjectInput;
  };

  export type ProjectCreateOrConnectWithoutTasksInput = {
    where: ProjectWhereUniqueInput;
    create: XOR<
      ProjectCreateWithoutTasksInput,
      ProjectUncheckedCreateWithoutTasksInput
    >;
  };

  export type SprintCreateWithoutTasksInput = {
    id?: string;
    name: string;
    goal?: string | null;
    status?: $Enums.SprintStatus;
    startDate?: Date | string | null;
    endDate?: Date | string | null;
    progress?: number;
    createdAt?: Date | string;
    updatedAt?: Date | string;
    project: ProjectCreateNestedOneWithoutSprintsInput;
    owner: UserCreateNestedOneWithoutOwnedSprintsInput;
  };

  export type SprintUncheckedCreateWithoutTasksInput = {
    id?: string;
    name: string;
    goal?: string | null;
    status?: $Enums.SprintStatus;
    startDate?: Date | string | null;
    endDate?: Date | string | null;
    progress?: number;
    createdAt?: Date | string;
    updatedAt?: Date | string;
    projectId: string;
    ownerId: string;
  };

  export type SprintCreateOrConnectWithoutTasksInput = {
    where: SprintWhereUniqueInput;
    create: XOR<
      SprintCreateWithoutTasksInput,
      SprintUncheckedCreateWithoutTasksInput
    >;
  };

  export type UserCreateWithoutAssignedTasksInput = {
    id?: string;
    email?: string | null;
    name?: string | null;
    role?: $Enums.UserRole;
    createdAt?: Date | string;
    updatedAt?: Date | string;
    createdTasks?: TaskCreateNestedManyWithoutCreatorInput;
    ownedMilestones?: MilestoneCreateNestedManyWithoutOwnerInput;
    ownedSprints?: SprintCreateNestedManyWithoutOwnerInput;
    workspaces?: WorkspaceMemberCreateNestedManyWithoutUserInput;
    notifications?: NotificationCreateNestedManyWithoutUserInput;
    activities?: ActivityCreateNestedManyWithoutUserInput;
    rooms?: RoomCreateNestedManyWithoutOwnerInput;
    messages?: ChatMessageCreateNestedManyWithoutUserInput;
  };

  export type UserUncheckedCreateWithoutAssignedTasksInput = {
    id?: string;
    email?: string | null;
    name?: string | null;
    role?: $Enums.UserRole;
    createdAt?: Date | string;
    updatedAt?: Date | string;
    createdTasks?: TaskUncheckedCreateNestedManyWithoutCreatorInput;
    ownedMilestones?: MilestoneUncheckedCreateNestedManyWithoutOwnerInput;
    ownedSprints?: SprintUncheckedCreateNestedManyWithoutOwnerInput;
    workspaces?: WorkspaceMemberUncheckedCreateNestedManyWithoutUserInput;
    notifications?: NotificationUncheckedCreateNestedManyWithoutUserInput;
    activities?: ActivityUncheckedCreateNestedManyWithoutUserInput;
    rooms?: RoomUncheckedCreateNestedManyWithoutOwnerInput;
    messages?: ChatMessageUncheckedCreateNestedManyWithoutUserInput;
  };

  export type UserCreateOrConnectWithoutAssignedTasksInput = {
    where: UserWhereUniqueInput;
    create: XOR<
      UserCreateWithoutAssignedTasksInput,
      UserUncheckedCreateWithoutAssignedTasksInput
    >;
  };

  export type UserCreateWithoutCreatedTasksInput = {
    id?: string;
    email?: string | null;
    name?: string | null;
    role?: $Enums.UserRole;
    createdAt?: Date | string;
    updatedAt?: Date | string;
    assignedTasks?: TaskCreateNestedManyWithoutAssigneeInput;
    ownedMilestones?: MilestoneCreateNestedManyWithoutOwnerInput;
    ownedSprints?: SprintCreateNestedManyWithoutOwnerInput;
    workspaces?: WorkspaceMemberCreateNestedManyWithoutUserInput;
    notifications?: NotificationCreateNestedManyWithoutUserInput;
    activities?: ActivityCreateNestedManyWithoutUserInput;
    rooms?: RoomCreateNestedManyWithoutOwnerInput;
    messages?: ChatMessageCreateNestedManyWithoutUserInput;
  };

  export type UserUncheckedCreateWithoutCreatedTasksInput = {
    id?: string;
    email?: string | null;
    name?: string | null;
    role?: $Enums.UserRole;
    createdAt?: Date | string;
    updatedAt?: Date | string;
    assignedTasks?: TaskUncheckedCreateNestedManyWithoutAssigneeInput;
    ownedMilestones?: MilestoneUncheckedCreateNestedManyWithoutOwnerInput;
    ownedSprints?: SprintUncheckedCreateNestedManyWithoutOwnerInput;
    workspaces?: WorkspaceMemberUncheckedCreateNestedManyWithoutUserInput;
    notifications?: NotificationUncheckedCreateNestedManyWithoutUserInput;
    activities?: ActivityUncheckedCreateNestedManyWithoutUserInput;
    rooms?: RoomUncheckedCreateNestedManyWithoutOwnerInput;
    messages?: ChatMessageUncheckedCreateNestedManyWithoutUserInput;
  };

  export type UserCreateOrConnectWithoutCreatedTasksInput = {
    where: UserWhereUniqueInput;
    create: XOR<
      UserCreateWithoutCreatedTasksInput,
      UserUncheckedCreateWithoutCreatedTasksInput
    >;
  };

  export type TaskTagCreateWithoutTaskInput = {
    id?: string;
    name: string;
    color?: string | null;
  };

  export type TaskTagUncheckedCreateWithoutTaskInput = {
    id?: string;
    name: string;
    color?: string | null;
  };

  export type TaskTagCreateOrConnectWithoutTaskInput = {
    where: TaskTagWhereUniqueInput;
    create: XOR<
      TaskTagCreateWithoutTaskInput,
      TaskTagUncheckedCreateWithoutTaskInput
    >;
  };

  export type TaskTagCreateManyTaskInputEnvelope = {
    data: TaskTagCreateManyTaskInput | TaskTagCreateManyTaskInput[];
    skipDuplicates?: boolean;
  };

  export type ActivityCreateWithoutTaskInput = {
    id?: string;
    type: $Enums.ActivityType;
    content: string;
    createdAt?: Date | string;
    user: UserCreateNestedOneWithoutActivitiesInput;
  };

  export type ActivityUncheckedCreateWithoutTaskInput = {
    id?: string;
    type: $Enums.ActivityType;
    content: string;
    createdAt?: Date | string;
    userId: string;
  };

  export type ActivityCreateOrConnectWithoutTaskInput = {
    where: ActivityWhereUniqueInput;
    create: XOR<
      ActivityCreateWithoutTaskInput,
      ActivityUncheckedCreateWithoutTaskInput
    >;
  };

  export type ActivityCreateManyTaskInputEnvelope = {
    data: ActivityCreateManyTaskInput | ActivityCreateManyTaskInput[];
    skipDuplicates?: boolean;
  };

  export type ProjectUpsertWithoutTasksInput = {
    update: XOR<
      ProjectUpdateWithoutTasksInput,
      ProjectUncheckedUpdateWithoutTasksInput
    >;
    create: XOR<
      ProjectCreateWithoutTasksInput,
      ProjectUncheckedCreateWithoutTasksInput
    >;
    where?: ProjectWhereInput;
  };

  export type ProjectUpdateToOneWithWhereWithoutTasksInput = {
    where?: ProjectWhereInput;
    data: XOR<
      ProjectUpdateWithoutTasksInput,
      ProjectUncheckedUpdateWithoutTasksInput
    >;
  };

  export type ProjectUpdateWithoutTasksInput = {
    id?: StringFieldUpdateOperationsInput | string;
    name?: StringFieldUpdateOperationsInput | string;
    description?: NullableStringFieldUpdateOperationsInput | string | null;
    key?: StringFieldUpdateOperationsInput | string;
    status?: EnumProjectStatusFieldUpdateOperationsInput | $Enums.ProjectStatus;
    progress?: IntFieldUpdateOperationsInput | number;
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string;
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string;
    workspace?: WorkspaceUpdateOneRequiredWithoutProjectsNestedInput;
    sprints?: SprintUpdateManyWithoutProjectNestedInput;
    milestones?: MilestoneUpdateManyWithoutProjectNestedInput;
  };

  export type ProjectUncheckedUpdateWithoutTasksInput = {
    id?: StringFieldUpdateOperationsInput | string;
    name?: StringFieldUpdateOperationsInput | string;
    description?: NullableStringFieldUpdateOperationsInput | string | null;
    key?: StringFieldUpdateOperationsInput | string;
    status?: EnumProjectStatusFieldUpdateOperationsInput | $Enums.ProjectStatus;
    progress?: IntFieldUpdateOperationsInput | number;
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string;
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string;
    workspaceId?: StringFieldUpdateOperationsInput | string;
    sprints?: SprintUncheckedUpdateManyWithoutProjectNestedInput;
    milestones?: MilestoneUncheckedUpdateManyWithoutProjectNestedInput;
  };

  export type SprintUpsertWithoutTasksInput = {
    update: XOR<
      SprintUpdateWithoutTasksInput,
      SprintUncheckedUpdateWithoutTasksInput
    >;
    create: XOR<
      SprintCreateWithoutTasksInput,
      SprintUncheckedCreateWithoutTasksInput
    >;
    where?: SprintWhereInput;
  };

  export type SprintUpdateToOneWithWhereWithoutTasksInput = {
    where?: SprintWhereInput;
    data: XOR<
      SprintUpdateWithoutTasksInput,
      SprintUncheckedUpdateWithoutTasksInput
    >;
  };

  export type SprintUpdateWithoutTasksInput = {
    id?: StringFieldUpdateOperationsInput | string;
    name?: StringFieldUpdateOperationsInput | string;
    goal?: NullableStringFieldUpdateOperationsInput | string | null;
    status?: EnumSprintStatusFieldUpdateOperationsInput | $Enums.SprintStatus;
    startDate?:
      | NullableDateTimeFieldUpdateOperationsInput
      | Date
      | string
      | null;
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null;
    progress?: IntFieldUpdateOperationsInput | number;
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string;
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string;
    project?: ProjectUpdateOneRequiredWithoutSprintsNestedInput;
    owner?: UserUpdateOneRequiredWithoutOwnedSprintsNestedInput;
  };

  export type SprintUncheckedUpdateWithoutTasksInput = {
    id?: StringFieldUpdateOperationsInput | string;
    name?: StringFieldUpdateOperationsInput | string;
    goal?: NullableStringFieldUpdateOperationsInput | string | null;
    status?: EnumSprintStatusFieldUpdateOperationsInput | $Enums.SprintStatus;
    startDate?:
      | NullableDateTimeFieldUpdateOperationsInput
      | Date
      | string
      | null;
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null;
    progress?: IntFieldUpdateOperationsInput | number;
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string;
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string;
    projectId?: StringFieldUpdateOperationsInput | string;
    ownerId?: StringFieldUpdateOperationsInput | string;
  };

  export type UserUpsertWithoutAssignedTasksInput = {
    update: XOR<
      UserUpdateWithoutAssignedTasksInput,
      UserUncheckedUpdateWithoutAssignedTasksInput
    >;
    create: XOR<
      UserCreateWithoutAssignedTasksInput,
      UserUncheckedCreateWithoutAssignedTasksInput
    >;
    where?: UserWhereInput;
  };

  export type UserUpdateToOneWithWhereWithoutAssignedTasksInput = {
    where?: UserWhereInput;
    data: XOR<
      UserUpdateWithoutAssignedTasksInput,
      UserUncheckedUpdateWithoutAssignedTasksInput
    >;
  };

  export type UserUpdateWithoutAssignedTasksInput = {
    id?: StringFieldUpdateOperationsInput | string;
    email?: NullableStringFieldUpdateOperationsInput | string | null;
    name?: NullableStringFieldUpdateOperationsInput | string | null;
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole;
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string;
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string;
    createdTasks?: TaskUpdateManyWithoutCreatorNestedInput;
    ownedMilestones?: MilestoneUpdateManyWithoutOwnerNestedInput;
    ownedSprints?: SprintUpdateManyWithoutOwnerNestedInput;
    workspaces?: WorkspaceMemberUpdateManyWithoutUserNestedInput;
    notifications?: NotificationUpdateManyWithoutUserNestedInput;
    activities?: ActivityUpdateManyWithoutUserNestedInput;
    rooms?: RoomUpdateManyWithoutOwnerNestedInput;
    messages?: ChatMessageUpdateManyWithoutUserNestedInput;
  };

  export type UserUncheckedUpdateWithoutAssignedTasksInput = {
    id?: StringFieldUpdateOperationsInput | string;
    email?: NullableStringFieldUpdateOperationsInput | string | null;
    name?: NullableStringFieldUpdateOperationsInput | string | null;
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole;
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string;
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string;
    createdTasks?: TaskUncheckedUpdateManyWithoutCreatorNestedInput;
    ownedMilestones?: MilestoneUncheckedUpdateManyWithoutOwnerNestedInput;
    ownedSprints?: SprintUncheckedUpdateManyWithoutOwnerNestedInput;
    workspaces?: WorkspaceMemberUncheckedUpdateManyWithoutUserNestedInput;
    notifications?: NotificationUncheckedUpdateManyWithoutUserNestedInput;
    activities?: ActivityUncheckedUpdateManyWithoutUserNestedInput;
    rooms?: RoomUncheckedUpdateManyWithoutOwnerNestedInput;
    messages?: ChatMessageUncheckedUpdateManyWithoutUserNestedInput;
  };

  export type UserUpsertWithoutCreatedTasksInput = {
    update: XOR<
      UserUpdateWithoutCreatedTasksInput,
      UserUncheckedUpdateWithoutCreatedTasksInput
    >;
    create: XOR<
      UserCreateWithoutCreatedTasksInput,
      UserUncheckedCreateWithoutCreatedTasksInput
    >;
    where?: UserWhereInput;
  };

  export type UserUpdateToOneWithWhereWithoutCreatedTasksInput = {
    where?: UserWhereInput;
    data: XOR<
      UserUpdateWithoutCreatedTasksInput,
      UserUncheckedUpdateWithoutCreatedTasksInput
    >;
  };

  export type UserUpdateWithoutCreatedTasksInput = {
    id?: StringFieldUpdateOperationsInput | string;
    email?: NullableStringFieldUpdateOperationsInput | string | null;
    name?: NullableStringFieldUpdateOperationsInput | string | null;
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole;
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string;
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string;
    assignedTasks?: TaskUpdateManyWithoutAssigneeNestedInput;
    ownedMilestones?: MilestoneUpdateManyWithoutOwnerNestedInput;
    ownedSprints?: SprintUpdateManyWithoutOwnerNestedInput;
    workspaces?: WorkspaceMemberUpdateManyWithoutUserNestedInput;
    notifications?: NotificationUpdateManyWithoutUserNestedInput;
    activities?: ActivityUpdateManyWithoutUserNestedInput;
    rooms?: RoomUpdateManyWithoutOwnerNestedInput;
    messages?: ChatMessageUpdateManyWithoutUserNestedInput;
  };

  export type UserUncheckedUpdateWithoutCreatedTasksInput = {
    id?: StringFieldUpdateOperationsInput | string;
    email?: NullableStringFieldUpdateOperationsInput | string | null;
    name?: NullableStringFieldUpdateOperationsInput | string | null;
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole;
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string;
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string;
    assignedTasks?: TaskUncheckedUpdateManyWithoutAssigneeNestedInput;
    ownedMilestones?: MilestoneUncheckedUpdateManyWithoutOwnerNestedInput;
    ownedSprints?: SprintUncheckedUpdateManyWithoutOwnerNestedInput;
    workspaces?: WorkspaceMemberUncheckedUpdateManyWithoutUserNestedInput;
    notifications?: NotificationUncheckedUpdateManyWithoutUserNestedInput;
    activities?: ActivityUncheckedUpdateManyWithoutUserNestedInput;
    rooms?: RoomUncheckedUpdateManyWithoutOwnerNestedInput;
    messages?: ChatMessageUncheckedUpdateManyWithoutUserNestedInput;
  };

  export type TaskTagUpsertWithWhereUniqueWithoutTaskInput = {
    where: TaskTagWhereUniqueInput;
    update: XOR<
      TaskTagUpdateWithoutTaskInput,
      TaskTagUncheckedUpdateWithoutTaskInput
    >;
    create: XOR<
      TaskTagCreateWithoutTaskInput,
      TaskTagUncheckedCreateWithoutTaskInput
    >;
  };

  export type TaskTagUpdateWithWhereUniqueWithoutTaskInput = {
    where: TaskTagWhereUniqueInput;
    data: XOR<
      TaskTagUpdateWithoutTaskInput,
      TaskTagUncheckedUpdateWithoutTaskInput
    >;
  };

  export type TaskTagUpdateManyWithWhereWithoutTaskInput = {
    where: TaskTagScalarWhereInput;
    data: XOR<
      TaskTagUpdateManyMutationInput,
      TaskTagUncheckedUpdateManyWithoutTaskInput
    >;
  };

  export type TaskTagScalarWhereInput = {
    AND?: TaskTagScalarWhereInput | TaskTagScalarWhereInput[];
    OR?: TaskTagScalarWhereInput[];
    NOT?: TaskTagScalarWhereInput | TaskTagScalarWhereInput[];
    id?: StringFilter<"TaskTag"> | string;
    name?: StringFilter<"TaskTag"> | string;
    color?: StringNullableFilter<"TaskTag"> | string | null;
    taskId?: StringFilter<"TaskTag"> | string;
  };

  export type ActivityUpsertWithWhereUniqueWithoutTaskInput = {
    where: ActivityWhereUniqueInput;
    update: XOR<
      ActivityUpdateWithoutTaskInput,
      ActivityUncheckedUpdateWithoutTaskInput
    >;
    create: XOR<
      ActivityCreateWithoutTaskInput,
      ActivityUncheckedCreateWithoutTaskInput
    >;
  };

  export type ActivityUpdateWithWhereUniqueWithoutTaskInput = {
    where: ActivityWhereUniqueInput;
    data: XOR<
      ActivityUpdateWithoutTaskInput,
      ActivityUncheckedUpdateWithoutTaskInput
    >;
  };

  export type ActivityUpdateManyWithWhereWithoutTaskInput = {
    where: ActivityScalarWhereInput;
    data: XOR<
      ActivityUpdateManyMutationInput,
      ActivityUncheckedUpdateManyWithoutTaskInput
    >;
  };

  export type TaskCreateWithoutTagsInput = {
    id?: string;
    title: string;
    description?: string | null;
    type?: $Enums.TaskType;
    status?: $Enums.TaskStatus;
    priority?: $Enums.Priority;
    storyPoints?: number | null;
    dueDate?: Date | string | null;
    createdAt?: Date | string;
    updatedAt?: Date | string;
    parentId?: string | null;
    project: ProjectCreateNestedOneWithoutTasksInput;
    sprint?: SprintCreateNestedOneWithoutTasksInput;
    assignee?: UserCreateNestedOneWithoutAssignedTasksInput;
    creator: UserCreateNestedOneWithoutCreatedTasksInput;
    activities?: ActivityCreateNestedManyWithoutTaskInput;
  };

  export type TaskUncheckedCreateWithoutTagsInput = {
    id?: string;
    title: string;
    description?: string | null;
    type?: $Enums.TaskType;
    status?: $Enums.TaskStatus;
    priority?: $Enums.Priority;
    storyPoints?: number | null;
    dueDate?: Date | string | null;
    createdAt?: Date | string;
    updatedAt?: Date | string;
    projectId: string;
    sprintId?: string | null;
    assigneeId?: string | null;
    creatorId: string;
    parentId?: string | null;
    activities?: ActivityUncheckedCreateNestedManyWithoutTaskInput;
  };

  export type TaskCreateOrConnectWithoutTagsInput = {
    where: TaskWhereUniqueInput;
    create: XOR<
      TaskCreateWithoutTagsInput,
      TaskUncheckedCreateWithoutTagsInput
    >;
  };

  export type TaskUpsertWithoutTagsInput = {
    update: XOR<
      TaskUpdateWithoutTagsInput,
      TaskUncheckedUpdateWithoutTagsInput
    >;
    create: XOR<
      TaskCreateWithoutTagsInput,
      TaskUncheckedCreateWithoutTagsInput
    >;
    where?: TaskWhereInput;
  };

  export type TaskUpdateToOneWithWhereWithoutTagsInput = {
    where?: TaskWhereInput;
    data: XOR<TaskUpdateWithoutTagsInput, TaskUncheckedUpdateWithoutTagsInput>;
  };

  export type TaskUpdateWithoutTagsInput = {
    id?: StringFieldUpdateOperationsInput | string;
    title?: StringFieldUpdateOperationsInput | string;
    description?: NullableStringFieldUpdateOperationsInput | string | null;
    type?: EnumTaskTypeFieldUpdateOperationsInput | $Enums.TaskType;
    status?: EnumTaskStatusFieldUpdateOperationsInput | $Enums.TaskStatus;
    priority?: EnumPriorityFieldUpdateOperationsInput | $Enums.Priority;
    storyPoints?: NullableIntFieldUpdateOperationsInput | number | null;
    dueDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null;
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string;
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string;
    parentId?: NullableStringFieldUpdateOperationsInput | string | null;
    project?: ProjectUpdateOneRequiredWithoutTasksNestedInput;
    sprint?: SprintUpdateOneWithoutTasksNestedInput;
    assignee?: UserUpdateOneWithoutAssignedTasksNestedInput;
    creator?: UserUpdateOneRequiredWithoutCreatedTasksNestedInput;
    activities?: ActivityUpdateManyWithoutTaskNestedInput;
  };

  export type TaskUncheckedUpdateWithoutTagsInput = {
    id?: StringFieldUpdateOperationsInput | string;
    title?: StringFieldUpdateOperationsInput | string;
    description?: NullableStringFieldUpdateOperationsInput | string | null;
    type?: EnumTaskTypeFieldUpdateOperationsInput | $Enums.TaskType;
    status?: EnumTaskStatusFieldUpdateOperationsInput | $Enums.TaskStatus;
    priority?: EnumPriorityFieldUpdateOperationsInput | $Enums.Priority;
    storyPoints?: NullableIntFieldUpdateOperationsInput | number | null;
    dueDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null;
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string;
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string;
    projectId?: StringFieldUpdateOperationsInput | string;
    sprintId?: NullableStringFieldUpdateOperationsInput | string | null;
    assigneeId?: NullableStringFieldUpdateOperationsInput | string | null;
    creatorId?: StringFieldUpdateOperationsInput | string;
    parentId?: NullableStringFieldUpdateOperationsInput | string | null;
    activities?: ActivityUncheckedUpdateManyWithoutTaskNestedInput;
  };

  export type ProjectCreateWithoutSprintsInput = {
    id?: string;
    name: string;
    description?: string | null;
    key: string;
    status?: $Enums.ProjectStatus;
    progress?: number;
    createdAt?: Date | string;
    updatedAt?: Date | string;
    workspace: WorkspaceCreateNestedOneWithoutProjectsInput;
    tasks?: TaskCreateNestedManyWithoutProjectInput;
    milestones?: MilestoneCreateNestedManyWithoutProjectInput;
  };

  export type ProjectUncheckedCreateWithoutSprintsInput = {
    id?: string;
    name: string;
    description?: string | null;
    key: string;
    status?: $Enums.ProjectStatus;
    progress?: number;
    createdAt?: Date | string;
    updatedAt?: Date | string;
    workspaceId: string;
    tasks?: TaskUncheckedCreateNestedManyWithoutProjectInput;
    milestones?: MilestoneUncheckedCreateNestedManyWithoutProjectInput;
  };

  export type ProjectCreateOrConnectWithoutSprintsInput = {
    where: ProjectWhereUniqueInput;
    create: XOR<
      ProjectCreateWithoutSprintsInput,
      ProjectUncheckedCreateWithoutSprintsInput
    >;
  };

  export type UserCreateWithoutOwnedSprintsInput = {
    id?: string;
    email?: string | null;
    name?: string | null;
    role?: $Enums.UserRole;
    createdAt?: Date | string;
    updatedAt?: Date | string;
    assignedTasks?: TaskCreateNestedManyWithoutAssigneeInput;
    createdTasks?: TaskCreateNestedManyWithoutCreatorInput;
    ownedMilestones?: MilestoneCreateNestedManyWithoutOwnerInput;
    workspaces?: WorkspaceMemberCreateNestedManyWithoutUserInput;
    notifications?: NotificationCreateNestedManyWithoutUserInput;
    activities?: ActivityCreateNestedManyWithoutUserInput;
    rooms?: RoomCreateNestedManyWithoutOwnerInput;
    messages?: ChatMessageCreateNestedManyWithoutUserInput;
  };

  export type UserUncheckedCreateWithoutOwnedSprintsInput = {
    id?: string;
    email?: string | null;
    name?: string | null;
    role?: $Enums.UserRole;
    createdAt?: Date | string;
    updatedAt?: Date | string;
    assignedTasks?: TaskUncheckedCreateNestedManyWithoutAssigneeInput;
    createdTasks?: TaskUncheckedCreateNestedManyWithoutCreatorInput;
    ownedMilestones?: MilestoneUncheckedCreateNestedManyWithoutOwnerInput;
    workspaces?: WorkspaceMemberUncheckedCreateNestedManyWithoutUserInput;
    notifications?: NotificationUncheckedCreateNestedManyWithoutUserInput;
    activities?: ActivityUncheckedCreateNestedManyWithoutUserInput;
    rooms?: RoomUncheckedCreateNestedManyWithoutOwnerInput;
    messages?: ChatMessageUncheckedCreateNestedManyWithoutUserInput;
  };

  export type UserCreateOrConnectWithoutOwnedSprintsInput = {
    where: UserWhereUniqueInput;
    create: XOR<
      UserCreateWithoutOwnedSprintsInput,
      UserUncheckedCreateWithoutOwnedSprintsInput
    >;
  };

  export type TaskCreateWithoutSprintInput = {
    id?: string;
    title: string;
    description?: string | null;
    type?: $Enums.TaskType;
    status?: $Enums.TaskStatus;
    priority?: $Enums.Priority;
    storyPoints?: number | null;
    dueDate?: Date | string | null;
    createdAt?: Date | string;
    updatedAt?: Date | string;
    parentId?: string | null;
    project: ProjectCreateNestedOneWithoutTasksInput;
    assignee?: UserCreateNestedOneWithoutAssignedTasksInput;
    creator: UserCreateNestedOneWithoutCreatedTasksInput;
    tags?: TaskTagCreateNestedManyWithoutTaskInput;
    activities?: ActivityCreateNestedManyWithoutTaskInput;
  };

  export type TaskUncheckedCreateWithoutSprintInput = {
    id?: string;
    title: string;
    description?: string | null;
    type?: $Enums.TaskType;
    status?: $Enums.TaskStatus;
    priority?: $Enums.Priority;
    storyPoints?: number | null;
    dueDate?: Date | string | null;
    createdAt?: Date | string;
    updatedAt?: Date | string;
    projectId: string;
    assigneeId?: string | null;
    creatorId: string;
    parentId?: string | null;
    tags?: TaskTagUncheckedCreateNestedManyWithoutTaskInput;
    activities?: ActivityUncheckedCreateNestedManyWithoutTaskInput;
  };

  export type TaskCreateOrConnectWithoutSprintInput = {
    where: TaskWhereUniqueInput;
    create: XOR<
      TaskCreateWithoutSprintInput,
      TaskUncheckedCreateWithoutSprintInput
    >;
  };

  export type TaskCreateManySprintInputEnvelope = {
    data: TaskCreateManySprintInput | TaskCreateManySprintInput[];
    skipDuplicates?: boolean;
  };

  export type ProjectUpsertWithoutSprintsInput = {
    update: XOR<
      ProjectUpdateWithoutSprintsInput,
      ProjectUncheckedUpdateWithoutSprintsInput
    >;
    create: XOR<
      ProjectCreateWithoutSprintsInput,
      ProjectUncheckedCreateWithoutSprintsInput
    >;
    where?: ProjectWhereInput;
  };

  export type ProjectUpdateToOneWithWhereWithoutSprintsInput = {
    where?: ProjectWhereInput;
    data: XOR<
      ProjectUpdateWithoutSprintsInput,
      ProjectUncheckedUpdateWithoutSprintsInput
    >;
  };

  export type ProjectUpdateWithoutSprintsInput = {
    id?: StringFieldUpdateOperationsInput | string;
    name?: StringFieldUpdateOperationsInput | string;
    description?: NullableStringFieldUpdateOperationsInput | string | null;
    key?: StringFieldUpdateOperationsInput | string;
    status?: EnumProjectStatusFieldUpdateOperationsInput | $Enums.ProjectStatus;
    progress?: IntFieldUpdateOperationsInput | number;
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string;
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string;
    workspace?: WorkspaceUpdateOneRequiredWithoutProjectsNestedInput;
    tasks?: TaskUpdateManyWithoutProjectNestedInput;
    milestones?: MilestoneUpdateManyWithoutProjectNestedInput;
  };

  export type ProjectUncheckedUpdateWithoutSprintsInput = {
    id?: StringFieldUpdateOperationsInput | string;
    name?: StringFieldUpdateOperationsInput | string;
    description?: NullableStringFieldUpdateOperationsInput | string | null;
    key?: StringFieldUpdateOperationsInput | string;
    status?: EnumProjectStatusFieldUpdateOperationsInput | $Enums.ProjectStatus;
    progress?: IntFieldUpdateOperationsInput | number;
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string;
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string;
    workspaceId?: StringFieldUpdateOperationsInput | string;
    tasks?: TaskUncheckedUpdateManyWithoutProjectNestedInput;
    milestones?: MilestoneUncheckedUpdateManyWithoutProjectNestedInput;
  };

  export type UserUpsertWithoutOwnedSprintsInput = {
    update: XOR<
      UserUpdateWithoutOwnedSprintsInput,
      UserUncheckedUpdateWithoutOwnedSprintsInput
    >;
    create: XOR<
      UserCreateWithoutOwnedSprintsInput,
      UserUncheckedCreateWithoutOwnedSprintsInput
    >;
    where?: UserWhereInput;
  };

  export type UserUpdateToOneWithWhereWithoutOwnedSprintsInput = {
    where?: UserWhereInput;
    data: XOR<
      UserUpdateWithoutOwnedSprintsInput,
      UserUncheckedUpdateWithoutOwnedSprintsInput
    >;
  };

  export type UserUpdateWithoutOwnedSprintsInput = {
    id?: StringFieldUpdateOperationsInput | string;
    email?: NullableStringFieldUpdateOperationsInput | string | null;
    name?: NullableStringFieldUpdateOperationsInput | string | null;
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole;
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string;
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string;
    assignedTasks?: TaskUpdateManyWithoutAssigneeNestedInput;
    createdTasks?: TaskUpdateManyWithoutCreatorNestedInput;
    ownedMilestones?: MilestoneUpdateManyWithoutOwnerNestedInput;
    workspaces?: WorkspaceMemberUpdateManyWithoutUserNestedInput;
    notifications?: NotificationUpdateManyWithoutUserNestedInput;
    activities?: ActivityUpdateManyWithoutUserNestedInput;
    rooms?: RoomUpdateManyWithoutOwnerNestedInput;
    messages?: ChatMessageUpdateManyWithoutUserNestedInput;
  };

  export type UserUncheckedUpdateWithoutOwnedSprintsInput = {
    id?: StringFieldUpdateOperationsInput | string;
    email?: NullableStringFieldUpdateOperationsInput | string | null;
    name?: NullableStringFieldUpdateOperationsInput | string | null;
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole;
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string;
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string;
    assignedTasks?: TaskUncheckedUpdateManyWithoutAssigneeNestedInput;
    createdTasks?: TaskUncheckedUpdateManyWithoutCreatorNestedInput;
    ownedMilestones?: MilestoneUncheckedUpdateManyWithoutOwnerNestedInput;
    workspaces?: WorkspaceMemberUncheckedUpdateManyWithoutUserNestedInput;
    notifications?: NotificationUncheckedUpdateManyWithoutUserNestedInput;
    activities?: ActivityUncheckedUpdateManyWithoutUserNestedInput;
    rooms?: RoomUncheckedUpdateManyWithoutOwnerNestedInput;
    messages?: ChatMessageUncheckedUpdateManyWithoutUserNestedInput;
  };

  export type TaskUpsertWithWhereUniqueWithoutSprintInput = {
    where: TaskWhereUniqueInput;
    update: XOR<
      TaskUpdateWithoutSprintInput,
      TaskUncheckedUpdateWithoutSprintInput
    >;
    create: XOR<
      TaskCreateWithoutSprintInput,
      TaskUncheckedCreateWithoutSprintInput
    >;
  };

  export type TaskUpdateWithWhereUniqueWithoutSprintInput = {
    where: TaskWhereUniqueInput;
    data: XOR<
      TaskUpdateWithoutSprintInput,
      TaskUncheckedUpdateWithoutSprintInput
    >;
  };

  export type TaskUpdateManyWithWhereWithoutSprintInput = {
    where: TaskScalarWhereInput;
    data: XOR<
      TaskUpdateManyMutationInput,
      TaskUncheckedUpdateManyWithoutSprintInput
    >;
  };

  export type ProjectCreateWithoutMilestonesInput = {
    id?: string;
    name: string;
    description?: string | null;
    key: string;
    status?: $Enums.ProjectStatus;
    progress?: number;
    createdAt?: Date | string;
    updatedAt?: Date | string;
    workspace: WorkspaceCreateNestedOneWithoutProjectsInput;
    tasks?: TaskCreateNestedManyWithoutProjectInput;
    sprints?: SprintCreateNestedManyWithoutProjectInput;
  };

  export type ProjectUncheckedCreateWithoutMilestonesInput = {
    id?: string;
    name: string;
    description?: string | null;
    key: string;
    status?: $Enums.ProjectStatus;
    progress?: number;
    createdAt?: Date | string;
    updatedAt?: Date | string;
    workspaceId: string;
    tasks?: TaskUncheckedCreateNestedManyWithoutProjectInput;
    sprints?: SprintUncheckedCreateNestedManyWithoutProjectInput;
  };

  export type ProjectCreateOrConnectWithoutMilestonesInput = {
    where: ProjectWhereUniqueInput;
    create: XOR<
      ProjectCreateWithoutMilestonesInput,
      ProjectUncheckedCreateWithoutMilestonesInput
    >;
  };

  export type UserCreateWithoutOwnedMilestonesInput = {
    id?: string;
    email?: string | null;
    name?: string | null;
    role?: $Enums.UserRole;
    createdAt?: Date | string;
    updatedAt?: Date | string;
    assignedTasks?: TaskCreateNestedManyWithoutAssigneeInput;
    createdTasks?: TaskCreateNestedManyWithoutCreatorInput;
    ownedSprints?: SprintCreateNestedManyWithoutOwnerInput;
    workspaces?: WorkspaceMemberCreateNestedManyWithoutUserInput;
    notifications?: NotificationCreateNestedManyWithoutUserInput;
    activities?: ActivityCreateNestedManyWithoutUserInput;
    rooms?: RoomCreateNestedManyWithoutOwnerInput;
    messages?: ChatMessageCreateNestedManyWithoutUserInput;
  };

  export type UserUncheckedCreateWithoutOwnedMilestonesInput = {
    id?: string;
    email?: string | null;
    name?: string | null;
    role?: $Enums.UserRole;
    createdAt?: Date | string;
    updatedAt?: Date | string;
    assignedTasks?: TaskUncheckedCreateNestedManyWithoutAssigneeInput;
    createdTasks?: TaskUncheckedCreateNestedManyWithoutCreatorInput;
    ownedSprints?: SprintUncheckedCreateNestedManyWithoutOwnerInput;
    workspaces?: WorkspaceMemberUncheckedCreateNestedManyWithoutUserInput;
    notifications?: NotificationUncheckedCreateNestedManyWithoutUserInput;
    activities?: ActivityUncheckedCreateNestedManyWithoutUserInput;
    rooms?: RoomUncheckedCreateNestedManyWithoutOwnerInput;
    messages?: ChatMessageUncheckedCreateNestedManyWithoutUserInput;
  };

  export type UserCreateOrConnectWithoutOwnedMilestonesInput = {
    where: UserWhereUniqueInput;
    create: XOR<
      UserCreateWithoutOwnedMilestonesInput,
      UserUncheckedCreateWithoutOwnedMilestonesInput
    >;
  };

  export type MilestoneDependencyCreateWithoutMilestoneInput = {
    id?: string;
    dependsOn: MilestoneCreateNestedOneWithoutDependentsInput;
  };

  export type MilestoneDependencyUncheckedCreateWithoutMilestoneInput = {
    id?: string;
    dependsOnId: string;
  };

  export type MilestoneDependencyCreateOrConnectWithoutMilestoneInput = {
    where: MilestoneDependencyWhereUniqueInput;
    create: XOR<
      MilestoneDependencyCreateWithoutMilestoneInput,
      MilestoneDependencyUncheckedCreateWithoutMilestoneInput
    >;
  };

  export type MilestoneDependencyCreateManyMilestoneInputEnvelope = {
    data:
      | MilestoneDependencyCreateManyMilestoneInput
      | MilestoneDependencyCreateManyMilestoneInput[];
    skipDuplicates?: boolean;
  };

  export type MilestoneDependencyCreateWithoutDependsOnInput = {
    id?: string;
    milestone: MilestoneCreateNestedOneWithoutDependenciesInput;
  };

  export type MilestoneDependencyUncheckedCreateWithoutDependsOnInput = {
    id?: string;
    milestoneId: string;
  };

  export type MilestoneDependencyCreateOrConnectWithoutDependsOnInput = {
    where: MilestoneDependencyWhereUniqueInput;
    create: XOR<
      MilestoneDependencyCreateWithoutDependsOnInput,
      MilestoneDependencyUncheckedCreateWithoutDependsOnInput
    >;
  };

  export type MilestoneDependencyCreateManyDependsOnInputEnvelope = {
    data:
      | MilestoneDependencyCreateManyDependsOnInput
      | MilestoneDependencyCreateManyDependsOnInput[];
    skipDuplicates?: boolean;
  };

  export type ProjectUpsertWithoutMilestonesInput = {
    update: XOR<
      ProjectUpdateWithoutMilestonesInput,
      ProjectUncheckedUpdateWithoutMilestonesInput
    >;
    create: XOR<
      ProjectCreateWithoutMilestonesInput,
      ProjectUncheckedCreateWithoutMilestonesInput
    >;
    where?: ProjectWhereInput;
  };

  export type ProjectUpdateToOneWithWhereWithoutMilestonesInput = {
    where?: ProjectWhereInput;
    data: XOR<
      ProjectUpdateWithoutMilestonesInput,
      ProjectUncheckedUpdateWithoutMilestonesInput
    >;
  };

  export type ProjectUpdateWithoutMilestonesInput = {
    id?: StringFieldUpdateOperationsInput | string;
    name?: StringFieldUpdateOperationsInput | string;
    description?: NullableStringFieldUpdateOperationsInput | string | null;
    key?: StringFieldUpdateOperationsInput | string;
    status?: EnumProjectStatusFieldUpdateOperationsInput | $Enums.ProjectStatus;
    progress?: IntFieldUpdateOperationsInput | number;
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string;
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string;
    workspace?: WorkspaceUpdateOneRequiredWithoutProjectsNestedInput;
    tasks?: TaskUpdateManyWithoutProjectNestedInput;
    sprints?: SprintUpdateManyWithoutProjectNestedInput;
  };

  export type ProjectUncheckedUpdateWithoutMilestonesInput = {
    id?: StringFieldUpdateOperationsInput | string;
    name?: StringFieldUpdateOperationsInput | string;
    description?: NullableStringFieldUpdateOperationsInput | string | null;
    key?: StringFieldUpdateOperationsInput | string;
    status?: EnumProjectStatusFieldUpdateOperationsInput | $Enums.ProjectStatus;
    progress?: IntFieldUpdateOperationsInput | number;
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string;
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string;
    workspaceId?: StringFieldUpdateOperationsInput | string;
    tasks?: TaskUncheckedUpdateManyWithoutProjectNestedInput;
    sprints?: SprintUncheckedUpdateManyWithoutProjectNestedInput;
  };

  export type UserUpsertWithoutOwnedMilestonesInput = {
    update: XOR<
      UserUpdateWithoutOwnedMilestonesInput,
      UserUncheckedUpdateWithoutOwnedMilestonesInput
    >;
    create: XOR<
      UserCreateWithoutOwnedMilestonesInput,
      UserUncheckedCreateWithoutOwnedMilestonesInput
    >;
    where?: UserWhereInput;
  };

  export type UserUpdateToOneWithWhereWithoutOwnedMilestonesInput = {
    where?: UserWhereInput;
    data: XOR<
      UserUpdateWithoutOwnedMilestonesInput,
      UserUncheckedUpdateWithoutOwnedMilestonesInput
    >;
  };

  export type UserUpdateWithoutOwnedMilestonesInput = {
    id?: StringFieldUpdateOperationsInput | string;
    email?: NullableStringFieldUpdateOperationsInput | string | null;
    name?: NullableStringFieldUpdateOperationsInput | string | null;
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole;
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string;
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string;
    assignedTasks?: TaskUpdateManyWithoutAssigneeNestedInput;
    createdTasks?: TaskUpdateManyWithoutCreatorNestedInput;
    ownedSprints?: SprintUpdateManyWithoutOwnerNestedInput;
    workspaces?: WorkspaceMemberUpdateManyWithoutUserNestedInput;
    notifications?: NotificationUpdateManyWithoutUserNestedInput;
    activities?: ActivityUpdateManyWithoutUserNestedInput;
    rooms?: RoomUpdateManyWithoutOwnerNestedInput;
    messages?: ChatMessageUpdateManyWithoutUserNestedInput;
  };

  export type UserUncheckedUpdateWithoutOwnedMilestonesInput = {
    id?: StringFieldUpdateOperationsInput | string;
    email?: NullableStringFieldUpdateOperationsInput | string | null;
    name?: NullableStringFieldUpdateOperationsInput | string | null;
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole;
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string;
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string;
    assignedTasks?: TaskUncheckedUpdateManyWithoutAssigneeNestedInput;
    createdTasks?: TaskUncheckedUpdateManyWithoutCreatorNestedInput;
    ownedSprints?: SprintUncheckedUpdateManyWithoutOwnerNestedInput;
    workspaces?: WorkspaceMemberUncheckedUpdateManyWithoutUserNestedInput;
    notifications?: NotificationUncheckedUpdateManyWithoutUserNestedInput;
    activities?: ActivityUncheckedUpdateManyWithoutUserNestedInput;
    rooms?: RoomUncheckedUpdateManyWithoutOwnerNestedInput;
    messages?: ChatMessageUncheckedUpdateManyWithoutUserNestedInput;
  };

  export type MilestoneDependencyUpsertWithWhereUniqueWithoutMilestoneInput = {
    where: MilestoneDependencyWhereUniqueInput;
    update: XOR<
      MilestoneDependencyUpdateWithoutMilestoneInput,
      MilestoneDependencyUncheckedUpdateWithoutMilestoneInput
    >;
    create: XOR<
      MilestoneDependencyCreateWithoutMilestoneInput,
      MilestoneDependencyUncheckedCreateWithoutMilestoneInput
    >;
  };

  export type MilestoneDependencyUpdateWithWhereUniqueWithoutMilestoneInput = {
    where: MilestoneDependencyWhereUniqueInput;
    data: XOR<
      MilestoneDependencyUpdateWithoutMilestoneInput,
      MilestoneDependencyUncheckedUpdateWithoutMilestoneInput
    >;
  };

  export type MilestoneDependencyUpdateManyWithWhereWithoutMilestoneInput = {
    where: MilestoneDependencyScalarWhereInput;
    data: XOR<
      MilestoneDependencyUpdateManyMutationInput,
      MilestoneDependencyUncheckedUpdateManyWithoutMilestoneInput
    >;
  };

  export type MilestoneDependencyScalarWhereInput = {
    AND?:
      | MilestoneDependencyScalarWhereInput
      | MilestoneDependencyScalarWhereInput[];
    OR?: MilestoneDependencyScalarWhereInput[];
    NOT?:
      | MilestoneDependencyScalarWhereInput
      | MilestoneDependencyScalarWhereInput[];
    id?: StringFilter<"MilestoneDependency"> | string;
    milestoneId?: StringFilter<"MilestoneDependency"> | string;
    dependsOnId?: StringFilter<"MilestoneDependency"> | string;
  };

  export type MilestoneDependencyUpsertWithWhereUniqueWithoutDependsOnInput = {
    where: MilestoneDependencyWhereUniqueInput;
    update: XOR<
      MilestoneDependencyUpdateWithoutDependsOnInput,
      MilestoneDependencyUncheckedUpdateWithoutDependsOnInput
    >;
    create: XOR<
      MilestoneDependencyCreateWithoutDependsOnInput,
      MilestoneDependencyUncheckedCreateWithoutDependsOnInput
    >;
  };

  export type MilestoneDependencyUpdateWithWhereUniqueWithoutDependsOnInput = {
    where: MilestoneDependencyWhereUniqueInput;
    data: XOR<
      MilestoneDependencyUpdateWithoutDependsOnInput,
      MilestoneDependencyUncheckedUpdateWithoutDependsOnInput
    >;
  };

  export type MilestoneDependencyUpdateManyWithWhereWithoutDependsOnInput = {
    where: MilestoneDependencyScalarWhereInput;
    data: XOR<
      MilestoneDependencyUpdateManyMutationInput,
      MilestoneDependencyUncheckedUpdateManyWithoutDependsOnInput
    >;
  };

  export type MilestoneCreateWithoutDependenciesInput = {
    id?: string;
    title: string;
    description?: string | null;
    status?: $Enums.MilestoneStatus;
    progress?: number;
    startDate?: Date | string | null;
    endDate?: Date | string | null;
    createdAt?: Date | string;
    updatedAt?: Date | string;
    project: ProjectCreateNestedOneWithoutMilestonesInput;
    owner: UserCreateNestedOneWithoutOwnedMilestonesInput;
    dependents?: MilestoneDependencyCreateNestedManyWithoutDependsOnInput;
  };

  export type MilestoneUncheckedCreateWithoutDependenciesInput = {
    id?: string;
    title: string;
    description?: string | null;
    status?: $Enums.MilestoneStatus;
    progress?: number;
    startDate?: Date | string | null;
    endDate?: Date | string | null;
    createdAt?: Date | string;
    updatedAt?: Date | string;
    projectId: string;
    ownerId: string;
    dependents?: MilestoneDependencyUncheckedCreateNestedManyWithoutDependsOnInput;
  };

  export type MilestoneCreateOrConnectWithoutDependenciesInput = {
    where: MilestoneWhereUniqueInput;
    create: XOR<
      MilestoneCreateWithoutDependenciesInput,
      MilestoneUncheckedCreateWithoutDependenciesInput
    >;
  };

  export type MilestoneCreateWithoutDependentsInput = {
    id?: string;
    title: string;
    description?: string | null;
    status?: $Enums.MilestoneStatus;
    progress?: number;
    startDate?: Date | string | null;
    endDate?: Date | string | null;
    createdAt?: Date | string;
    updatedAt?: Date | string;
    project: ProjectCreateNestedOneWithoutMilestonesInput;
    owner: UserCreateNestedOneWithoutOwnedMilestonesInput;
    dependencies?: MilestoneDependencyCreateNestedManyWithoutMilestoneInput;
  };

  export type MilestoneUncheckedCreateWithoutDependentsInput = {
    id?: string;
    title: string;
    description?: string | null;
    status?: $Enums.MilestoneStatus;
    progress?: number;
    startDate?: Date | string | null;
    endDate?: Date | string | null;
    createdAt?: Date | string;
    updatedAt?: Date | string;
    projectId: string;
    ownerId: string;
    dependencies?: MilestoneDependencyUncheckedCreateNestedManyWithoutMilestoneInput;
  };

  export type MilestoneCreateOrConnectWithoutDependentsInput = {
    where: MilestoneWhereUniqueInput;
    create: XOR<
      MilestoneCreateWithoutDependentsInput,
      MilestoneUncheckedCreateWithoutDependentsInput
    >;
  };

  export type MilestoneUpsertWithoutDependenciesInput = {
    update: XOR<
      MilestoneUpdateWithoutDependenciesInput,
      MilestoneUncheckedUpdateWithoutDependenciesInput
    >;
    create: XOR<
      MilestoneCreateWithoutDependenciesInput,
      MilestoneUncheckedCreateWithoutDependenciesInput
    >;
    where?: MilestoneWhereInput;
  };

  export type MilestoneUpdateToOneWithWhereWithoutDependenciesInput = {
    where?: MilestoneWhereInput;
    data: XOR<
      MilestoneUpdateWithoutDependenciesInput,
      MilestoneUncheckedUpdateWithoutDependenciesInput
    >;
  };

  export type MilestoneUpdateWithoutDependenciesInput = {
    id?: StringFieldUpdateOperationsInput | string;
    title?: StringFieldUpdateOperationsInput | string;
    description?: NullableStringFieldUpdateOperationsInput | string | null;
    status?:
      | EnumMilestoneStatusFieldUpdateOperationsInput
      | $Enums.MilestoneStatus;
    progress?: IntFieldUpdateOperationsInput | number;
    startDate?:
      | NullableDateTimeFieldUpdateOperationsInput
      | Date
      | string
      | null;
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null;
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string;
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string;
    project?: ProjectUpdateOneRequiredWithoutMilestonesNestedInput;
    owner?: UserUpdateOneRequiredWithoutOwnedMilestonesNestedInput;
    dependents?: MilestoneDependencyUpdateManyWithoutDependsOnNestedInput;
  };

  export type MilestoneUncheckedUpdateWithoutDependenciesInput = {
    id?: StringFieldUpdateOperationsInput | string;
    title?: StringFieldUpdateOperationsInput | string;
    description?: NullableStringFieldUpdateOperationsInput | string | null;
    status?:
      | EnumMilestoneStatusFieldUpdateOperationsInput
      | $Enums.MilestoneStatus;
    progress?: IntFieldUpdateOperationsInput | number;
    startDate?:
      | NullableDateTimeFieldUpdateOperationsInput
      | Date
      | string
      | null;
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null;
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string;
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string;
    projectId?: StringFieldUpdateOperationsInput | string;
    ownerId?: StringFieldUpdateOperationsInput | string;
    dependents?: MilestoneDependencyUncheckedUpdateManyWithoutDependsOnNestedInput;
  };

  export type MilestoneUpsertWithoutDependentsInput = {
    update: XOR<
      MilestoneUpdateWithoutDependentsInput,
      MilestoneUncheckedUpdateWithoutDependentsInput
    >;
    create: XOR<
      MilestoneCreateWithoutDependentsInput,
      MilestoneUncheckedCreateWithoutDependentsInput
    >;
    where?: MilestoneWhereInput;
  };

  export type MilestoneUpdateToOneWithWhereWithoutDependentsInput = {
    where?: MilestoneWhereInput;
    data: XOR<
      MilestoneUpdateWithoutDependentsInput,
      MilestoneUncheckedUpdateWithoutDependentsInput
    >;
  };

  export type MilestoneUpdateWithoutDependentsInput = {
    id?: StringFieldUpdateOperationsInput | string;
    title?: StringFieldUpdateOperationsInput | string;
    description?: NullableStringFieldUpdateOperationsInput | string | null;
    status?:
      | EnumMilestoneStatusFieldUpdateOperationsInput
      | $Enums.MilestoneStatus;
    progress?: IntFieldUpdateOperationsInput | number;
    startDate?:
      | NullableDateTimeFieldUpdateOperationsInput
      | Date
      | string
      | null;
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null;
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string;
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string;
    project?: ProjectUpdateOneRequiredWithoutMilestonesNestedInput;
    owner?: UserUpdateOneRequiredWithoutOwnedMilestonesNestedInput;
    dependencies?: MilestoneDependencyUpdateManyWithoutMilestoneNestedInput;
  };

  export type MilestoneUncheckedUpdateWithoutDependentsInput = {
    id?: StringFieldUpdateOperationsInput | string;
    title?: StringFieldUpdateOperationsInput | string;
    description?: NullableStringFieldUpdateOperationsInput | string | null;
    status?:
      | EnumMilestoneStatusFieldUpdateOperationsInput
      | $Enums.MilestoneStatus;
    progress?: IntFieldUpdateOperationsInput | number;
    startDate?:
      | NullableDateTimeFieldUpdateOperationsInput
      | Date
      | string
      | null;
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null;
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string;
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string;
    projectId?: StringFieldUpdateOperationsInput | string;
    ownerId?: StringFieldUpdateOperationsInput | string;
    dependencies?: MilestoneDependencyUncheckedUpdateManyWithoutMilestoneNestedInput;
  };

  export type UserCreateWithoutActivitiesInput = {
    id?: string;
    email?: string | null;
    name?: string | null;
    role?: $Enums.UserRole;
    createdAt?: Date | string;
    updatedAt?: Date | string;
    assignedTasks?: TaskCreateNestedManyWithoutAssigneeInput;
    createdTasks?: TaskCreateNestedManyWithoutCreatorInput;
    ownedMilestones?: MilestoneCreateNestedManyWithoutOwnerInput;
    ownedSprints?: SprintCreateNestedManyWithoutOwnerInput;
    workspaces?: WorkspaceMemberCreateNestedManyWithoutUserInput;
    notifications?: NotificationCreateNestedManyWithoutUserInput;
    rooms?: RoomCreateNestedManyWithoutOwnerInput;
    messages?: ChatMessageCreateNestedManyWithoutUserInput;
  };

  export type UserUncheckedCreateWithoutActivitiesInput = {
    id?: string;
    email?: string | null;
    name?: string | null;
    role?: $Enums.UserRole;
    createdAt?: Date | string;
    updatedAt?: Date | string;
    assignedTasks?: TaskUncheckedCreateNestedManyWithoutAssigneeInput;
    createdTasks?: TaskUncheckedCreateNestedManyWithoutCreatorInput;
    ownedMilestones?: MilestoneUncheckedCreateNestedManyWithoutOwnerInput;
    ownedSprints?: SprintUncheckedCreateNestedManyWithoutOwnerInput;
    workspaces?: WorkspaceMemberUncheckedCreateNestedManyWithoutUserInput;
    notifications?: NotificationUncheckedCreateNestedManyWithoutUserInput;
    rooms?: RoomUncheckedCreateNestedManyWithoutOwnerInput;
    messages?: ChatMessageUncheckedCreateNestedManyWithoutUserInput;
  };

  export type UserCreateOrConnectWithoutActivitiesInput = {
    where: UserWhereUniqueInput;
    create: XOR<
      UserCreateWithoutActivitiesInput,
      UserUncheckedCreateWithoutActivitiesInput
    >;
  };

  export type TaskCreateWithoutActivitiesInput = {
    id?: string;
    title: string;
    description?: string | null;
    type?: $Enums.TaskType;
    status?: $Enums.TaskStatus;
    priority?: $Enums.Priority;
    storyPoints?: number | null;
    dueDate?: Date | string | null;
    createdAt?: Date | string;
    updatedAt?: Date | string;
    parentId?: string | null;
    project: ProjectCreateNestedOneWithoutTasksInput;
    sprint?: SprintCreateNestedOneWithoutTasksInput;
    assignee?: UserCreateNestedOneWithoutAssignedTasksInput;
    creator: UserCreateNestedOneWithoutCreatedTasksInput;
    tags?: TaskTagCreateNestedManyWithoutTaskInput;
  };

  export type TaskUncheckedCreateWithoutActivitiesInput = {
    id?: string;
    title: string;
    description?: string | null;
    type?: $Enums.TaskType;
    status?: $Enums.TaskStatus;
    priority?: $Enums.Priority;
    storyPoints?: number | null;
    dueDate?: Date | string | null;
    createdAt?: Date | string;
    updatedAt?: Date | string;
    projectId: string;
    sprintId?: string | null;
    assigneeId?: string | null;
    creatorId: string;
    parentId?: string | null;
    tags?: TaskTagUncheckedCreateNestedManyWithoutTaskInput;
  };

  export type TaskCreateOrConnectWithoutActivitiesInput = {
    where: TaskWhereUniqueInput;
    create: XOR<
      TaskCreateWithoutActivitiesInput,
      TaskUncheckedCreateWithoutActivitiesInput
    >;
  };

  export type UserUpsertWithoutActivitiesInput = {
    update: XOR<
      UserUpdateWithoutActivitiesInput,
      UserUncheckedUpdateWithoutActivitiesInput
    >;
    create: XOR<
      UserCreateWithoutActivitiesInput,
      UserUncheckedCreateWithoutActivitiesInput
    >;
    where?: UserWhereInput;
  };

  export type UserUpdateToOneWithWhereWithoutActivitiesInput = {
    where?: UserWhereInput;
    data: XOR<
      UserUpdateWithoutActivitiesInput,
      UserUncheckedUpdateWithoutActivitiesInput
    >;
  };

  export type UserUpdateWithoutActivitiesInput = {
    id?: StringFieldUpdateOperationsInput | string;
    email?: NullableStringFieldUpdateOperationsInput | string | null;
    name?: NullableStringFieldUpdateOperationsInput | string | null;
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole;
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string;
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string;
    assignedTasks?: TaskUpdateManyWithoutAssigneeNestedInput;
    createdTasks?: TaskUpdateManyWithoutCreatorNestedInput;
    ownedMilestones?: MilestoneUpdateManyWithoutOwnerNestedInput;
    ownedSprints?: SprintUpdateManyWithoutOwnerNestedInput;
    workspaces?: WorkspaceMemberUpdateManyWithoutUserNestedInput;
    notifications?: NotificationUpdateManyWithoutUserNestedInput;
    rooms?: RoomUpdateManyWithoutOwnerNestedInput;
    messages?: ChatMessageUpdateManyWithoutUserNestedInput;
  };

  export type UserUncheckedUpdateWithoutActivitiesInput = {
    id?: StringFieldUpdateOperationsInput | string;
    email?: NullableStringFieldUpdateOperationsInput | string | null;
    name?: NullableStringFieldUpdateOperationsInput | string | null;
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole;
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string;
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string;
    assignedTasks?: TaskUncheckedUpdateManyWithoutAssigneeNestedInput;
    createdTasks?: TaskUncheckedUpdateManyWithoutCreatorNestedInput;
    ownedMilestones?: MilestoneUncheckedUpdateManyWithoutOwnerNestedInput;
    ownedSprints?: SprintUncheckedUpdateManyWithoutOwnerNestedInput;
    workspaces?: WorkspaceMemberUncheckedUpdateManyWithoutUserNestedInput;
    notifications?: NotificationUncheckedUpdateManyWithoutUserNestedInput;
    rooms?: RoomUncheckedUpdateManyWithoutOwnerNestedInput;
    messages?: ChatMessageUncheckedUpdateManyWithoutUserNestedInput;
  };

  export type TaskUpsertWithoutActivitiesInput = {
    update: XOR<
      TaskUpdateWithoutActivitiesInput,
      TaskUncheckedUpdateWithoutActivitiesInput
    >;
    create: XOR<
      TaskCreateWithoutActivitiesInput,
      TaskUncheckedCreateWithoutActivitiesInput
    >;
    where?: TaskWhereInput;
  };

  export type TaskUpdateToOneWithWhereWithoutActivitiesInput = {
    where?: TaskWhereInput;
    data: XOR<
      TaskUpdateWithoutActivitiesInput,
      TaskUncheckedUpdateWithoutActivitiesInput
    >;
  };

  export type TaskUpdateWithoutActivitiesInput = {
    id?: StringFieldUpdateOperationsInput | string;
    title?: StringFieldUpdateOperationsInput | string;
    description?: NullableStringFieldUpdateOperationsInput | string | null;
    type?: EnumTaskTypeFieldUpdateOperationsInput | $Enums.TaskType;
    status?: EnumTaskStatusFieldUpdateOperationsInput | $Enums.TaskStatus;
    priority?: EnumPriorityFieldUpdateOperationsInput | $Enums.Priority;
    storyPoints?: NullableIntFieldUpdateOperationsInput | number | null;
    dueDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null;
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string;
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string;
    parentId?: NullableStringFieldUpdateOperationsInput | string | null;
    project?: ProjectUpdateOneRequiredWithoutTasksNestedInput;
    sprint?: SprintUpdateOneWithoutTasksNestedInput;
    assignee?: UserUpdateOneWithoutAssignedTasksNestedInput;
    creator?: UserUpdateOneRequiredWithoutCreatedTasksNestedInput;
    tags?: TaskTagUpdateManyWithoutTaskNestedInput;
  };

  export type TaskUncheckedUpdateWithoutActivitiesInput = {
    id?: StringFieldUpdateOperationsInput | string;
    title?: StringFieldUpdateOperationsInput | string;
    description?: NullableStringFieldUpdateOperationsInput | string | null;
    type?: EnumTaskTypeFieldUpdateOperationsInput | $Enums.TaskType;
    status?: EnumTaskStatusFieldUpdateOperationsInput | $Enums.TaskStatus;
    priority?: EnumPriorityFieldUpdateOperationsInput | $Enums.Priority;
    storyPoints?: NullableIntFieldUpdateOperationsInput | number | null;
    dueDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null;
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string;
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string;
    projectId?: StringFieldUpdateOperationsInput | string;
    sprintId?: NullableStringFieldUpdateOperationsInput | string | null;
    assigneeId?: NullableStringFieldUpdateOperationsInput | string | null;
    creatorId?: StringFieldUpdateOperationsInput | string;
    parentId?: NullableStringFieldUpdateOperationsInput | string | null;
    tags?: TaskTagUncheckedUpdateManyWithoutTaskNestedInput;
  };

  export type UserCreateWithoutNotificationsInput = {
    id?: string;
    email?: string | null;
    name?: string | null;
    role?: $Enums.UserRole;
    createdAt?: Date | string;
    updatedAt?: Date | string;
    assignedTasks?: TaskCreateNestedManyWithoutAssigneeInput;
    createdTasks?: TaskCreateNestedManyWithoutCreatorInput;
    ownedMilestones?: MilestoneCreateNestedManyWithoutOwnerInput;
    ownedSprints?: SprintCreateNestedManyWithoutOwnerInput;
    workspaces?: WorkspaceMemberCreateNestedManyWithoutUserInput;
    activities?: ActivityCreateNestedManyWithoutUserInput;
    rooms?: RoomCreateNestedManyWithoutOwnerInput;
    messages?: ChatMessageCreateNestedManyWithoutUserInput;
  };

  export type UserUncheckedCreateWithoutNotificationsInput = {
    id?: string;
    email?: string | null;
    name?: string | null;
    role?: $Enums.UserRole;
    createdAt?: Date | string;
    updatedAt?: Date | string;
    assignedTasks?: TaskUncheckedCreateNestedManyWithoutAssigneeInput;
    createdTasks?: TaskUncheckedCreateNestedManyWithoutCreatorInput;
    ownedMilestones?: MilestoneUncheckedCreateNestedManyWithoutOwnerInput;
    ownedSprints?: SprintUncheckedCreateNestedManyWithoutOwnerInput;
    workspaces?: WorkspaceMemberUncheckedCreateNestedManyWithoutUserInput;
    activities?: ActivityUncheckedCreateNestedManyWithoutUserInput;
    rooms?: RoomUncheckedCreateNestedManyWithoutOwnerInput;
    messages?: ChatMessageUncheckedCreateNestedManyWithoutUserInput;
  };

  export type UserCreateOrConnectWithoutNotificationsInput = {
    where: UserWhereUniqueInput;
    create: XOR<
      UserCreateWithoutNotificationsInput,
      UserUncheckedCreateWithoutNotificationsInput
    >;
  };

  export type UserUpsertWithoutNotificationsInput = {
    update: XOR<
      UserUpdateWithoutNotificationsInput,
      UserUncheckedUpdateWithoutNotificationsInput
    >;
    create: XOR<
      UserCreateWithoutNotificationsInput,
      UserUncheckedCreateWithoutNotificationsInput
    >;
    where?: UserWhereInput;
  };

  export type UserUpdateToOneWithWhereWithoutNotificationsInput = {
    where?: UserWhereInput;
    data: XOR<
      UserUpdateWithoutNotificationsInput,
      UserUncheckedUpdateWithoutNotificationsInput
    >;
  };

  export type UserUpdateWithoutNotificationsInput = {
    id?: StringFieldUpdateOperationsInput | string;
    email?: NullableStringFieldUpdateOperationsInput | string | null;
    name?: NullableStringFieldUpdateOperationsInput | string | null;
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole;
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string;
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string;
    assignedTasks?: TaskUpdateManyWithoutAssigneeNestedInput;
    createdTasks?: TaskUpdateManyWithoutCreatorNestedInput;
    ownedMilestones?: MilestoneUpdateManyWithoutOwnerNestedInput;
    ownedSprints?: SprintUpdateManyWithoutOwnerNestedInput;
    workspaces?: WorkspaceMemberUpdateManyWithoutUserNestedInput;
    activities?: ActivityUpdateManyWithoutUserNestedInput;
    rooms?: RoomUpdateManyWithoutOwnerNestedInput;
    messages?: ChatMessageUpdateManyWithoutUserNestedInput;
  };

  export type UserUncheckedUpdateWithoutNotificationsInput = {
    id?: StringFieldUpdateOperationsInput | string;
    email?: NullableStringFieldUpdateOperationsInput | string | null;
    name?: NullableStringFieldUpdateOperationsInput | string | null;
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole;
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string;
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string;
    assignedTasks?: TaskUncheckedUpdateManyWithoutAssigneeNestedInput;
    createdTasks?: TaskUncheckedUpdateManyWithoutCreatorNestedInput;
    ownedMilestones?: MilestoneUncheckedUpdateManyWithoutOwnerNestedInput;
    ownedSprints?: SprintUncheckedUpdateManyWithoutOwnerNestedInput;
    workspaces?: WorkspaceMemberUncheckedUpdateManyWithoutUserNestedInput;
    activities?: ActivityUncheckedUpdateManyWithoutUserNestedInput;
    rooms?: RoomUncheckedUpdateManyWithoutOwnerNestedInput;
    messages?: ChatMessageUncheckedUpdateManyWithoutUserNestedInput;
  };

  export type TaskCreateManyAssigneeInput = {
    id?: string;
    title: string;
    description?: string | null;
    type?: $Enums.TaskType;
    status?: $Enums.TaskStatus;
    priority?: $Enums.Priority;
    storyPoints?: number | null;
    dueDate?: Date | string | null;
    createdAt?: Date | string;
    updatedAt?: Date | string;
    projectId: string;
    sprintId?: string | null;
    creatorId: string;
    parentId?: string | null;
  };

  export type TaskCreateManyCreatorInput = {
    id?: string;
    title: string;
    description?: string | null;
    type?: $Enums.TaskType;
    status?: $Enums.TaskStatus;
    priority?: $Enums.Priority;
    storyPoints?: number | null;
    dueDate?: Date | string | null;
    createdAt?: Date | string;
    updatedAt?: Date | string;
    projectId: string;
    sprintId?: string | null;
    assigneeId?: string | null;
    parentId?: string | null;
  };

  export type MilestoneCreateManyOwnerInput = {
    id?: string;
    title: string;
    description?: string | null;
    status?: $Enums.MilestoneStatus;
    progress?: number;
    startDate?: Date | string | null;
    endDate?: Date | string | null;
    createdAt?: Date | string;
    updatedAt?: Date | string;
    projectId: string;
  };

  export type SprintCreateManyOwnerInput = {
    id?: string;
    name: string;
    goal?: string | null;
    status?: $Enums.SprintStatus;
    startDate?: Date | string | null;
    endDate?: Date | string | null;
    progress?: number;
    createdAt?: Date | string;
    updatedAt?: Date | string;
    projectId: string;
  };

  export type WorkspaceMemberCreateManyUserInput = {
    id?: string;
    workspaceId: string;
    role?: $Enums.UserRole;
    joinedAt?: Date | string;
  };

  export type NotificationCreateManyUserInput = {
    id?: string;
    title: string;
    content: string;
    isRead?: boolean;
    createdAt?: Date | string;
  };

  export type ActivityCreateManyUserInput = {
    id?: string;
    type: $Enums.ActivityType;
    content: string;
    createdAt?: Date | string;
    taskId?: string | null;
  };

  export type RoomCreateManyOwnerInput = {
    id?: string;
    name: string;
    createdAt?: Date | string;
    whiteboardData?: NullableJsonNullValueInput | InputJsonValue;
  };

  export type ChatMessageCreateManyUserInput = {
    id?: string;
    roomName: string;
    message: string;
    createdAt?: Date | string;
  };

  export type TaskUpdateWithoutAssigneeInput = {
    id?: StringFieldUpdateOperationsInput | string;
    title?: StringFieldUpdateOperationsInput | string;
    description?: NullableStringFieldUpdateOperationsInput | string | null;
    type?: EnumTaskTypeFieldUpdateOperationsInput | $Enums.TaskType;
    status?: EnumTaskStatusFieldUpdateOperationsInput | $Enums.TaskStatus;
    priority?: EnumPriorityFieldUpdateOperationsInput | $Enums.Priority;
    storyPoints?: NullableIntFieldUpdateOperationsInput | number | null;
    dueDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null;
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string;
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string;
    parentId?: NullableStringFieldUpdateOperationsInput | string | null;
    project?: ProjectUpdateOneRequiredWithoutTasksNestedInput;
    sprint?: SprintUpdateOneWithoutTasksNestedInput;
    creator?: UserUpdateOneRequiredWithoutCreatedTasksNestedInput;
    tags?: TaskTagUpdateManyWithoutTaskNestedInput;
    activities?: ActivityUpdateManyWithoutTaskNestedInput;
  };

  export type TaskUncheckedUpdateWithoutAssigneeInput = {
    id?: StringFieldUpdateOperationsInput | string;
    title?: StringFieldUpdateOperationsInput | string;
    description?: NullableStringFieldUpdateOperationsInput | string | null;
    type?: EnumTaskTypeFieldUpdateOperationsInput | $Enums.TaskType;
    status?: EnumTaskStatusFieldUpdateOperationsInput | $Enums.TaskStatus;
    priority?: EnumPriorityFieldUpdateOperationsInput | $Enums.Priority;
    storyPoints?: NullableIntFieldUpdateOperationsInput | number | null;
    dueDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null;
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string;
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string;
    projectId?: StringFieldUpdateOperationsInput | string;
    sprintId?: NullableStringFieldUpdateOperationsInput | string | null;
    creatorId?: StringFieldUpdateOperationsInput | string;
    parentId?: NullableStringFieldUpdateOperationsInput | string | null;
    tags?: TaskTagUncheckedUpdateManyWithoutTaskNestedInput;
    activities?: ActivityUncheckedUpdateManyWithoutTaskNestedInput;
  };

  export type TaskUncheckedUpdateManyWithoutAssigneeInput = {
    id?: StringFieldUpdateOperationsInput | string;
    title?: StringFieldUpdateOperationsInput | string;
    description?: NullableStringFieldUpdateOperationsInput | string | null;
    type?: EnumTaskTypeFieldUpdateOperationsInput | $Enums.TaskType;
    status?: EnumTaskStatusFieldUpdateOperationsInput | $Enums.TaskStatus;
    priority?: EnumPriorityFieldUpdateOperationsInput | $Enums.Priority;
    storyPoints?: NullableIntFieldUpdateOperationsInput | number | null;
    dueDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null;
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string;
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string;
    projectId?: StringFieldUpdateOperationsInput | string;
    sprintId?: NullableStringFieldUpdateOperationsInput | string | null;
    creatorId?: StringFieldUpdateOperationsInput | string;
    parentId?: NullableStringFieldUpdateOperationsInput | string | null;
  };

  export type TaskUpdateWithoutCreatorInput = {
    id?: StringFieldUpdateOperationsInput | string;
    title?: StringFieldUpdateOperationsInput | string;
    description?: NullableStringFieldUpdateOperationsInput | string | null;
    type?: EnumTaskTypeFieldUpdateOperationsInput | $Enums.TaskType;
    status?: EnumTaskStatusFieldUpdateOperationsInput | $Enums.TaskStatus;
    priority?: EnumPriorityFieldUpdateOperationsInput | $Enums.Priority;
    storyPoints?: NullableIntFieldUpdateOperationsInput | number | null;
    dueDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null;
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string;
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string;
    parentId?: NullableStringFieldUpdateOperationsInput | string | null;
    project?: ProjectUpdateOneRequiredWithoutTasksNestedInput;
    sprint?: SprintUpdateOneWithoutTasksNestedInput;
    assignee?: UserUpdateOneWithoutAssignedTasksNestedInput;
    tags?: TaskTagUpdateManyWithoutTaskNestedInput;
    activities?: ActivityUpdateManyWithoutTaskNestedInput;
  };

  export type TaskUncheckedUpdateWithoutCreatorInput = {
    id?: StringFieldUpdateOperationsInput | string;
    title?: StringFieldUpdateOperationsInput | string;
    description?: NullableStringFieldUpdateOperationsInput | string | null;
    type?: EnumTaskTypeFieldUpdateOperationsInput | $Enums.TaskType;
    status?: EnumTaskStatusFieldUpdateOperationsInput | $Enums.TaskStatus;
    priority?: EnumPriorityFieldUpdateOperationsInput | $Enums.Priority;
    storyPoints?: NullableIntFieldUpdateOperationsInput | number | null;
    dueDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null;
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string;
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string;
    projectId?: StringFieldUpdateOperationsInput | string;
    sprintId?: NullableStringFieldUpdateOperationsInput | string | null;
    assigneeId?: NullableStringFieldUpdateOperationsInput | string | null;
    parentId?: NullableStringFieldUpdateOperationsInput | string | null;
    tags?: TaskTagUncheckedUpdateManyWithoutTaskNestedInput;
    activities?: ActivityUncheckedUpdateManyWithoutTaskNestedInput;
  };

  export type TaskUncheckedUpdateManyWithoutCreatorInput = {
    id?: StringFieldUpdateOperationsInput | string;
    title?: StringFieldUpdateOperationsInput | string;
    description?: NullableStringFieldUpdateOperationsInput | string | null;
    type?: EnumTaskTypeFieldUpdateOperationsInput | $Enums.TaskType;
    status?: EnumTaskStatusFieldUpdateOperationsInput | $Enums.TaskStatus;
    priority?: EnumPriorityFieldUpdateOperationsInput | $Enums.Priority;
    storyPoints?: NullableIntFieldUpdateOperationsInput | number | null;
    dueDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null;
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string;
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string;
    projectId?: StringFieldUpdateOperationsInput | string;
    sprintId?: NullableStringFieldUpdateOperationsInput | string | null;
    assigneeId?: NullableStringFieldUpdateOperationsInput | string | null;
    parentId?: NullableStringFieldUpdateOperationsInput | string | null;
  };

  export type MilestoneUpdateWithoutOwnerInput = {
    id?: StringFieldUpdateOperationsInput | string;
    title?: StringFieldUpdateOperationsInput | string;
    description?: NullableStringFieldUpdateOperationsInput | string | null;
    status?:
      | EnumMilestoneStatusFieldUpdateOperationsInput
      | $Enums.MilestoneStatus;
    progress?: IntFieldUpdateOperationsInput | number;
    startDate?:
      | NullableDateTimeFieldUpdateOperationsInput
      | Date
      | string
      | null;
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null;
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string;
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string;
    project?: ProjectUpdateOneRequiredWithoutMilestonesNestedInput;
    dependencies?: MilestoneDependencyUpdateManyWithoutMilestoneNestedInput;
    dependents?: MilestoneDependencyUpdateManyWithoutDependsOnNestedInput;
  };

  export type MilestoneUncheckedUpdateWithoutOwnerInput = {
    id?: StringFieldUpdateOperationsInput | string;
    title?: StringFieldUpdateOperationsInput | string;
    description?: NullableStringFieldUpdateOperationsInput | string | null;
    status?:
      | EnumMilestoneStatusFieldUpdateOperationsInput
      | $Enums.MilestoneStatus;
    progress?: IntFieldUpdateOperationsInput | number;
    startDate?:
      | NullableDateTimeFieldUpdateOperationsInput
      | Date
      | string
      | null;
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null;
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string;
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string;
    projectId?: StringFieldUpdateOperationsInput | string;
    dependencies?: MilestoneDependencyUncheckedUpdateManyWithoutMilestoneNestedInput;
    dependents?: MilestoneDependencyUncheckedUpdateManyWithoutDependsOnNestedInput;
  };

  export type MilestoneUncheckedUpdateManyWithoutOwnerInput = {
    id?: StringFieldUpdateOperationsInput | string;
    title?: StringFieldUpdateOperationsInput | string;
    description?: NullableStringFieldUpdateOperationsInput | string | null;
    status?:
      | EnumMilestoneStatusFieldUpdateOperationsInput
      | $Enums.MilestoneStatus;
    progress?: IntFieldUpdateOperationsInput | number;
    startDate?:
      | NullableDateTimeFieldUpdateOperationsInput
      | Date
      | string
      | null;
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null;
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string;
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string;
    projectId?: StringFieldUpdateOperationsInput | string;
  };

  export type SprintUpdateWithoutOwnerInput = {
    id?: StringFieldUpdateOperationsInput | string;
    name?: StringFieldUpdateOperationsInput | string;
    goal?: NullableStringFieldUpdateOperationsInput | string | null;
    status?: EnumSprintStatusFieldUpdateOperationsInput | $Enums.SprintStatus;
    startDate?:
      | NullableDateTimeFieldUpdateOperationsInput
      | Date
      | string
      | null;
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null;
    progress?: IntFieldUpdateOperationsInput | number;
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string;
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string;
    project?: ProjectUpdateOneRequiredWithoutSprintsNestedInput;
    tasks?: TaskUpdateManyWithoutSprintNestedInput;
  };

  export type SprintUncheckedUpdateWithoutOwnerInput = {
    id?: StringFieldUpdateOperationsInput | string;
    name?: StringFieldUpdateOperationsInput | string;
    goal?: NullableStringFieldUpdateOperationsInput | string | null;
    status?: EnumSprintStatusFieldUpdateOperationsInput | $Enums.SprintStatus;
    startDate?:
      | NullableDateTimeFieldUpdateOperationsInput
      | Date
      | string
      | null;
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null;
    progress?: IntFieldUpdateOperationsInput | number;
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string;
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string;
    projectId?: StringFieldUpdateOperationsInput | string;
    tasks?: TaskUncheckedUpdateManyWithoutSprintNestedInput;
  };

  export type SprintUncheckedUpdateManyWithoutOwnerInput = {
    id?: StringFieldUpdateOperationsInput | string;
    name?: StringFieldUpdateOperationsInput | string;
    goal?: NullableStringFieldUpdateOperationsInput | string | null;
    status?: EnumSprintStatusFieldUpdateOperationsInput | $Enums.SprintStatus;
    startDate?:
      | NullableDateTimeFieldUpdateOperationsInput
      | Date
      | string
      | null;
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null;
    progress?: IntFieldUpdateOperationsInput | number;
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string;
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string;
    projectId?: StringFieldUpdateOperationsInput | string;
  };

  export type WorkspaceMemberUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string;
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole;
    joinedAt?: DateTimeFieldUpdateOperationsInput | Date | string;
    workspace?: WorkspaceUpdateOneRequiredWithoutMembersNestedInput;
  };

  export type WorkspaceMemberUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string;
    workspaceId?: StringFieldUpdateOperationsInput | string;
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole;
    joinedAt?: DateTimeFieldUpdateOperationsInput | Date | string;
  };

  export type WorkspaceMemberUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string;
    workspaceId?: StringFieldUpdateOperationsInput | string;
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole;
    joinedAt?: DateTimeFieldUpdateOperationsInput | Date | string;
  };

  export type NotificationUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string;
    title?: StringFieldUpdateOperationsInput | string;
    content?: StringFieldUpdateOperationsInput | string;
    isRead?: BoolFieldUpdateOperationsInput | boolean;
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string;
  };

  export type NotificationUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string;
    title?: StringFieldUpdateOperationsInput | string;
    content?: StringFieldUpdateOperationsInput | string;
    isRead?: BoolFieldUpdateOperationsInput | boolean;
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string;
  };

  export type NotificationUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string;
    title?: StringFieldUpdateOperationsInput | string;
    content?: StringFieldUpdateOperationsInput | string;
    isRead?: BoolFieldUpdateOperationsInput | boolean;
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string;
  };

  export type ActivityUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string;
    type?: EnumActivityTypeFieldUpdateOperationsInput | $Enums.ActivityType;
    content?: StringFieldUpdateOperationsInput | string;
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string;
    task?: TaskUpdateOneWithoutActivitiesNestedInput;
  };

  export type ActivityUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string;
    type?: EnumActivityTypeFieldUpdateOperationsInput | $Enums.ActivityType;
    content?: StringFieldUpdateOperationsInput | string;
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string;
    taskId?: NullableStringFieldUpdateOperationsInput | string | null;
  };

  export type ActivityUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string;
    type?: EnumActivityTypeFieldUpdateOperationsInput | $Enums.ActivityType;
    content?: StringFieldUpdateOperationsInput | string;
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string;
    taskId?: NullableStringFieldUpdateOperationsInput | string | null;
  };

  export type RoomUpdateWithoutOwnerInput = {
    id?: StringFieldUpdateOperationsInput | string;
    name?: StringFieldUpdateOperationsInput | string;
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string;
    whiteboardData?: NullableJsonNullValueInput | InputJsonValue;
    chatMessages?: ChatMessageUpdateManyWithoutRoomNestedInput;
  };

  export type RoomUncheckedUpdateWithoutOwnerInput = {
    id?: StringFieldUpdateOperationsInput | string;
    name?: StringFieldUpdateOperationsInput | string;
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string;
    whiteboardData?: NullableJsonNullValueInput | InputJsonValue;
    chatMessages?: ChatMessageUncheckedUpdateManyWithoutRoomNestedInput;
  };

  export type RoomUncheckedUpdateManyWithoutOwnerInput = {
    id?: StringFieldUpdateOperationsInput | string;
    name?: StringFieldUpdateOperationsInput | string;
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string;
    whiteboardData?: NullableJsonNullValueInput | InputJsonValue;
  };

  export type ChatMessageUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string;
    message?: StringFieldUpdateOperationsInput | string;
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string;
    room?: RoomUpdateOneRequiredWithoutChatMessagesNestedInput;
  };

  export type ChatMessageUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string;
    roomName?: StringFieldUpdateOperationsInput | string;
    message?: StringFieldUpdateOperationsInput | string;
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string;
  };

  export type ChatMessageUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string;
    roomName?: StringFieldUpdateOperationsInput | string;
    message?: StringFieldUpdateOperationsInput | string;
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string;
  };

  export type ChatMessageCreateManyRoomInput = {
    id?: string;
    userId: string;
    message: string;
    createdAt?: Date | string;
  };

  export type ChatMessageUpdateWithoutRoomInput = {
    id?: StringFieldUpdateOperationsInput | string;
    message?: StringFieldUpdateOperationsInput | string;
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string;
    user?: UserUpdateOneRequiredWithoutMessagesNestedInput;
  };

  export type ChatMessageUncheckedUpdateWithoutRoomInput = {
    id?: StringFieldUpdateOperationsInput | string;
    userId?: StringFieldUpdateOperationsInput | string;
    message?: StringFieldUpdateOperationsInput | string;
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string;
  };

  export type ChatMessageUncheckedUpdateManyWithoutRoomInput = {
    id?: StringFieldUpdateOperationsInput | string;
    userId?: StringFieldUpdateOperationsInput | string;
    message?: StringFieldUpdateOperationsInput | string;
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string;
  };

  export type WorkspaceMemberCreateManyWorkspaceInput = {
    id?: string;
    userId: string;
    role?: $Enums.UserRole;
    joinedAt?: Date | string;
  };

  export type ProjectCreateManyWorkspaceInput = {
    id?: string;
    name: string;
    description?: string | null;
    key: string;
    status?: $Enums.ProjectStatus;
    progress?: number;
    createdAt?: Date | string;
    updatedAt?: Date | string;
  };

  export type WorkspaceMemberUpdateWithoutWorkspaceInput = {
    id?: StringFieldUpdateOperationsInput | string;
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole;
    joinedAt?: DateTimeFieldUpdateOperationsInput | Date | string;
    user?: UserUpdateOneRequiredWithoutWorkspacesNestedInput;
  };

  export type WorkspaceMemberUncheckedUpdateWithoutWorkspaceInput = {
    id?: StringFieldUpdateOperationsInput | string;
    userId?: StringFieldUpdateOperationsInput | string;
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole;
    joinedAt?: DateTimeFieldUpdateOperationsInput | Date | string;
  };

  export type WorkspaceMemberUncheckedUpdateManyWithoutWorkspaceInput = {
    id?: StringFieldUpdateOperationsInput | string;
    userId?: StringFieldUpdateOperationsInput | string;
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole;
    joinedAt?: DateTimeFieldUpdateOperationsInput | Date | string;
  };

  export type ProjectUpdateWithoutWorkspaceInput = {
    id?: StringFieldUpdateOperationsInput | string;
    name?: StringFieldUpdateOperationsInput | string;
    description?: NullableStringFieldUpdateOperationsInput | string | null;
    key?: StringFieldUpdateOperationsInput | string;
    status?: EnumProjectStatusFieldUpdateOperationsInput | $Enums.ProjectStatus;
    progress?: IntFieldUpdateOperationsInput | number;
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string;
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string;
    tasks?: TaskUpdateManyWithoutProjectNestedInput;
    sprints?: SprintUpdateManyWithoutProjectNestedInput;
    milestones?: MilestoneUpdateManyWithoutProjectNestedInput;
  };

  export type ProjectUncheckedUpdateWithoutWorkspaceInput = {
    id?: StringFieldUpdateOperationsInput | string;
    name?: StringFieldUpdateOperationsInput | string;
    description?: NullableStringFieldUpdateOperationsInput | string | null;
    key?: StringFieldUpdateOperationsInput | string;
    status?: EnumProjectStatusFieldUpdateOperationsInput | $Enums.ProjectStatus;
    progress?: IntFieldUpdateOperationsInput | number;
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string;
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string;
    tasks?: TaskUncheckedUpdateManyWithoutProjectNestedInput;
    sprints?: SprintUncheckedUpdateManyWithoutProjectNestedInput;
    milestones?: MilestoneUncheckedUpdateManyWithoutProjectNestedInput;
  };

  export type ProjectUncheckedUpdateManyWithoutWorkspaceInput = {
    id?: StringFieldUpdateOperationsInput | string;
    name?: StringFieldUpdateOperationsInput | string;
    description?: NullableStringFieldUpdateOperationsInput | string | null;
    key?: StringFieldUpdateOperationsInput | string;
    status?: EnumProjectStatusFieldUpdateOperationsInput | $Enums.ProjectStatus;
    progress?: IntFieldUpdateOperationsInput | number;
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string;
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string;
  };

  export type TaskCreateManyProjectInput = {
    id?: string;
    title: string;
    description?: string | null;
    type?: $Enums.TaskType;
    status?: $Enums.TaskStatus;
    priority?: $Enums.Priority;
    storyPoints?: number | null;
    dueDate?: Date | string | null;
    createdAt?: Date | string;
    updatedAt?: Date | string;
    sprintId?: string | null;
    assigneeId?: string | null;
    creatorId: string;
    parentId?: string | null;
  };

  export type SprintCreateManyProjectInput = {
    id?: string;
    name: string;
    goal?: string | null;
    status?: $Enums.SprintStatus;
    startDate?: Date | string | null;
    endDate?: Date | string | null;
    progress?: number;
    createdAt?: Date | string;
    updatedAt?: Date | string;
    ownerId: string;
  };

  export type MilestoneCreateManyProjectInput = {
    id?: string;
    title: string;
    description?: string | null;
    status?: $Enums.MilestoneStatus;
    progress?: number;
    startDate?: Date | string | null;
    endDate?: Date | string | null;
    createdAt?: Date | string;
    updatedAt?: Date | string;
    ownerId: string;
  };

  export type TaskUpdateWithoutProjectInput = {
    id?: StringFieldUpdateOperationsInput | string;
    title?: StringFieldUpdateOperationsInput | string;
    description?: NullableStringFieldUpdateOperationsInput | string | null;
    type?: EnumTaskTypeFieldUpdateOperationsInput | $Enums.TaskType;
    status?: EnumTaskStatusFieldUpdateOperationsInput | $Enums.TaskStatus;
    priority?: EnumPriorityFieldUpdateOperationsInput | $Enums.Priority;
    storyPoints?: NullableIntFieldUpdateOperationsInput | number | null;
    dueDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null;
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string;
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string;
    parentId?: NullableStringFieldUpdateOperationsInput | string | null;
    sprint?: SprintUpdateOneWithoutTasksNestedInput;
    assignee?: UserUpdateOneWithoutAssignedTasksNestedInput;
    creator?: UserUpdateOneRequiredWithoutCreatedTasksNestedInput;
    tags?: TaskTagUpdateManyWithoutTaskNestedInput;
    activities?: ActivityUpdateManyWithoutTaskNestedInput;
  };

  export type TaskUncheckedUpdateWithoutProjectInput = {
    id?: StringFieldUpdateOperationsInput | string;
    title?: StringFieldUpdateOperationsInput | string;
    description?: NullableStringFieldUpdateOperationsInput | string | null;
    type?: EnumTaskTypeFieldUpdateOperationsInput | $Enums.TaskType;
    status?: EnumTaskStatusFieldUpdateOperationsInput | $Enums.TaskStatus;
    priority?: EnumPriorityFieldUpdateOperationsInput | $Enums.Priority;
    storyPoints?: NullableIntFieldUpdateOperationsInput | number | null;
    dueDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null;
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string;
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string;
    sprintId?: NullableStringFieldUpdateOperationsInput | string | null;
    assigneeId?: NullableStringFieldUpdateOperationsInput | string | null;
    creatorId?: StringFieldUpdateOperationsInput | string;
    parentId?: NullableStringFieldUpdateOperationsInput | string | null;
    tags?: TaskTagUncheckedUpdateManyWithoutTaskNestedInput;
    activities?: ActivityUncheckedUpdateManyWithoutTaskNestedInput;
  };

  export type TaskUncheckedUpdateManyWithoutProjectInput = {
    id?: StringFieldUpdateOperationsInput | string;
    title?: StringFieldUpdateOperationsInput | string;
    description?: NullableStringFieldUpdateOperationsInput | string | null;
    type?: EnumTaskTypeFieldUpdateOperationsInput | $Enums.TaskType;
    status?: EnumTaskStatusFieldUpdateOperationsInput | $Enums.TaskStatus;
    priority?: EnumPriorityFieldUpdateOperationsInput | $Enums.Priority;
    storyPoints?: NullableIntFieldUpdateOperationsInput | number | null;
    dueDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null;
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string;
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string;
    sprintId?: NullableStringFieldUpdateOperationsInput | string | null;
    assigneeId?: NullableStringFieldUpdateOperationsInput | string | null;
    creatorId?: StringFieldUpdateOperationsInput | string;
    parentId?: NullableStringFieldUpdateOperationsInput | string | null;
  };

  export type SprintUpdateWithoutProjectInput = {
    id?: StringFieldUpdateOperationsInput | string;
    name?: StringFieldUpdateOperationsInput | string;
    goal?: NullableStringFieldUpdateOperationsInput | string | null;
    status?: EnumSprintStatusFieldUpdateOperationsInput | $Enums.SprintStatus;
    startDate?:
      | NullableDateTimeFieldUpdateOperationsInput
      | Date
      | string
      | null;
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null;
    progress?: IntFieldUpdateOperationsInput | number;
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string;
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string;
    owner?: UserUpdateOneRequiredWithoutOwnedSprintsNestedInput;
    tasks?: TaskUpdateManyWithoutSprintNestedInput;
  };

  export type SprintUncheckedUpdateWithoutProjectInput = {
    id?: StringFieldUpdateOperationsInput | string;
    name?: StringFieldUpdateOperationsInput | string;
    goal?: NullableStringFieldUpdateOperationsInput | string | null;
    status?: EnumSprintStatusFieldUpdateOperationsInput | $Enums.SprintStatus;
    startDate?:
      | NullableDateTimeFieldUpdateOperationsInput
      | Date
      | string
      | null;
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null;
    progress?: IntFieldUpdateOperationsInput | number;
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string;
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string;
    ownerId?: StringFieldUpdateOperationsInput | string;
    tasks?: TaskUncheckedUpdateManyWithoutSprintNestedInput;
  };

  export type SprintUncheckedUpdateManyWithoutProjectInput = {
    id?: StringFieldUpdateOperationsInput | string;
    name?: StringFieldUpdateOperationsInput | string;
    goal?: NullableStringFieldUpdateOperationsInput | string | null;
    status?: EnumSprintStatusFieldUpdateOperationsInput | $Enums.SprintStatus;
    startDate?:
      | NullableDateTimeFieldUpdateOperationsInput
      | Date
      | string
      | null;
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null;
    progress?: IntFieldUpdateOperationsInput | number;
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string;
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string;
    ownerId?: StringFieldUpdateOperationsInput | string;
  };

  export type MilestoneUpdateWithoutProjectInput = {
    id?: StringFieldUpdateOperationsInput | string;
    title?: StringFieldUpdateOperationsInput | string;
    description?: NullableStringFieldUpdateOperationsInput | string | null;
    status?:
      | EnumMilestoneStatusFieldUpdateOperationsInput
      | $Enums.MilestoneStatus;
    progress?: IntFieldUpdateOperationsInput | number;
    startDate?:
      | NullableDateTimeFieldUpdateOperationsInput
      | Date
      | string
      | null;
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null;
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string;
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string;
    owner?: UserUpdateOneRequiredWithoutOwnedMilestonesNestedInput;
    dependencies?: MilestoneDependencyUpdateManyWithoutMilestoneNestedInput;
    dependents?: MilestoneDependencyUpdateManyWithoutDependsOnNestedInput;
  };

  export type MilestoneUncheckedUpdateWithoutProjectInput = {
    id?: StringFieldUpdateOperationsInput | string;
    title?: StringFieldUpdateOperationsInput | string;
    description?: NullableStringFieldUpdateOperationsInput | string | null;
    status?:
      | EnumMilestoneStatusFieldUpdateOperationsInput
      | $Enums.MilestoneStatus;
    progress?: IntFieldUpdateOperationsInput | number;
    startDate?:
      | NullableDateTimeFieldUpdateOperationsInput
      | Date
      | string
      | null;
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null;
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string;
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string;
    ownerId?: StringFieldUpdateOperationsInput | string;
    dependencies?: MilestoneDependencyUncheckedUpdateManyWithoutMilestoneNestedInput;
    dependents?: MilestoneDependencyUncheckedUpdateManyWithoutDependsOnNestedInput;
  };

  export type MilestoneUncheckedUpdateManyWithoutProjectInput = {
    id?: StringFieldUpdateOperationsInput | string;
    title?: StringFieldUpdateOperationsInput | string;
    description?: NullableStringFieldUpdateOperationsInput | string | null;
    status?:
      | EnumMilestoneStatusFieldUpdateOperationsInput
      | $Enums.MilestoneStatus;
    progress?: IntFieldUpdateOperationsInput | number;
    startDate?:
      | NullableDateTimeFieldUpdateOperationsInput
      | Date
      | string
      | null;
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null;
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string;
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string;
    ownerId?: StringFieldUpdateOperationsInput | string;
  };

  export type TaskTagCreateManyTaskInput = {
    id?: string;
    name: string;
    color?: string | null;
  };

  export type ActivityCreateManyTaskInput = {
    id?: string;
    type: $Enums.ActivityType;
    content: string;
    createdAt?: Date | string;
    userId: string;
  };

  export type TaskTagUpdateWithoutTaskInput = {
    id?: StringFieldUpdateOperationsInput | string;
    name?: StringFieldUpdateOperationsInput | string;
    color?: NullableStringFieldUpdateOperationsInput | string | null;
  };

  export type TaskTagUncheckedUpdateWithoutTaskInput = {
    id?: StringFieldUpdateOperationsInput | string;
    name?: StringFieldUpdateOperationsInput | string;
    color?: NullableStringFieldUpdateOperationsInput | string | null;
  };

  export type TaskTagUncheckedUpdateManyWithoutTaskInput = {
    id?: StringFieldUpdateOperationsInput | string;
    name?: StringFieldUpdateOperationsInput | string;
    color?: NullableStringFieldUpdateOperationsInput | string | null;
  };

  export type ActivityUpdateWithoutTaskInput = {
    id?: StringFieldUpdateOperationsInput | string;
    type?: EnumActivityTypeFieldUpdateOperationsInput | $Enums.ActivityType;
    content?: StringFieldUpdateOperationsInput | string;
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string;
    user?: UserUpdateOneRequiredWithoutActivitiesNestedInput;
  };

  export type ActivityUncheckedUpdateWithoutTaskInput = {
    id?: StringFieldUpdateOperationsInput | string;
    type?: EnumActivityTypeFieldUpdateOperationsInput | $Enums.ActivityType;
    content?: StringFieldUpdateOperationsInput | string;
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string;
    userId?: StringFieldUpdateOperationsInput | string;
  };

  export type ActivityUncheckedUpdateManyWithoutTaskInput = {
    id?: StringFieldUpdateOperationsInput | string;
    type?: EnumActivityTypeFieldUpdateOperationsInput | $Enums.ActivityType;
    content?: StringFieldUpdateOperationsInput | string;
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string;
    userId?: StringFieldUpdateOperationsInput | string;
  };

  export type TaskCreateManySprintInput = {
    id?: string;
    title: string;
    description?: string | null;
    type?: $Enums.TaskType;
    status?: $Enums.TaskStatus;
    priority?: $Enums.Priority;
    storyPoints?: number | null;
    dueDate?: Date | string | null;
    createdAt?: Date | string;
    updatedAt?: Date | string;
    projectId: string;
    assigneeId?: string | null;
    creatorId: string;
    parentId?: string | null;
  };

  export type TaskUpdateWithoutSprintInput = {
    id?: StringFieldUpdateOperationsInput | string;
    title?: StringFieldUpdateOperationsInput | string;
    description?: NullableStringFieldUpdateOperationsInput | string | null;
    type?: EnumTaskTypeFieldUpdateOperationsInput | $Enums.TaskType;
    status?: EnumTaskStatusFieldUpdateOperationsInput | $Enums.TaskStatus;
    priority?: EnumPriorityFieldUpdateOperationsInput | $Enums.Priority;
    storyPoints?: NullableIntFieldUpdateOperationsInput | number | null;
    dueDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null;
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string;
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string;
    parentId?: NullableStringFieldUpdateOperationsInput | string | null;
    project?: ProjectUpdateOneRequiredWithoutTasksNestedInput;
    assignee?: UserUpdateOneWithoutAssignedTasksNestedInput;
    creator?: UserUpdateOneRequiredWithoutCreatedTasksNestedInput;
    tags?: TaskTagUpdateManyWithoutTaskNestedInput;
    activities?: ActivityUpdateManyWithoutTaskNestedInput;
  };

  export type TaskUncheckedUpdateWithoutSprintInput = {
    id?: StringFieldUpdateOperationsInput | string;
    title?: StringFieldUpdateOperationsInput | string;
    description?: NullableStringFieldUpdateOperationsInput | string | null;
    type?: EnumTaskTypeFieldUpdateOperationsInput | $Enums.TaskType;
    status?: EnumTaskStatusFieldUpdateOperationsInput | $Enums.TaskStatus;
    priority?: EnumPriorityFieldUpdateOperationsInput | $Enums.Priority;
    storyPoints?: NullableIntFieldUpdateOperationsInput | number | null;
    dueDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null;
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string;
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string;
    projectId?: StringFieldUpdateOperationsInput | string;
    assigneeId?: NullableStringFieldUpdateOperationsInput | string | null;
    creatorId?: StringFieldUpdateOperationsInput | string;
    parentId?: NullableStringFieldUpdateOperationsInput | string | null;
    tags?: TaskTagUncheckedUpdateManyWithoutTaskNestedInput;
    activities?: ActivityUncheckedUpdateManyWithoutTaskNestedInput;
  };

  export type TaskUncheckedUpdateManyWithoutSprintInput = {
    id?: StringFieldUpdateOperationsInput | string;
    title?: StringFieldUpdateOperationsInput | string;
    description?: NullableStringFieldUpdateOperationsInput | string | null;
    type?: EnumTaskTypeFieldUpdateOperationsInput | $Enums.TaskType;
    status?: EnumTaskStatusFieldUpdateOperationsInput | $Enums.TaskStatus;
    priority?: EnumPriorityFieldUpdateOperationsInput | $Enums.Priority;
    storyPoints?: NullableIntFieldUpdateOperationsInput | number | null;
    dueDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null;
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string;
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string;
    projectId?: StringFieldUpdateOperationsInput | string;
    assigneeId?: NullableStringFieldUpdateOperationsInput | string | null;
    creatorId?: StringFieldUpdateOperationsInput | string;
    parentId?: NullableStringFieldUpdateOperationsInput | string | null;
  };

  export type MilestoneDependencyCreateManyMilestoneInput = {
    id?: string;
    dependsOnId: string;
  };

  export type MilestoneDependencyCreateManyDependsOnInput = {
    id?: string;
    milestoneId: string;
  };

  export type MilestoneDependencyUpdateWithoutMilestoneInput = {
    id?: StringFieldUpdateOperationsInput | string;
    dependsOn?: MilestoneUpdateOneRequiredWithoutDependentsNestedInput;
  };

  export type MilestoneDependencyUncheckedUpdateWithoutMilestoneInput = {
    id?: StringFieldUpdateOperationsInput | string;
    dependsOnId?: StringFieldUpdateOperationsInput | string;
  };

  export type MilestoneDependencyUncheckedUpdateManyWithoutMilestoneInput = {
    id?: StringFieldUpdateOperationsInput | string;
    dependsOnId?: StringFieldUpdateOperationsInput | string;
  };

  export type MilestoneDependencyUpdateWithoutDependsOnInput = {
    id?: StringFieldUpdateOperationsInput | string;
    milestone?: MilestoneUpdateOneRequiredWithoutDependenciesNestedInput;
  };

  export type MilestoneDependencyUncheckedUpdateWithoutDependsOnInput = {
    id?: StringFieldUpdateOperationsInput | string;
    milestoneId?: StringFieldUpdateOperationsInput | string;
  };

  export type MilestoneDependencyUncheckedUpdateManyWithoutDependsOnInput = {
    id?: StringFieldUpdateOperationsInput | string;
    milestoneId?: StringFieldUpdateOperationsInput | string;
  };

  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number;
  };

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF;
}
